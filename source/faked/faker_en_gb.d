// generated by fakerjsgenerator
///
module faked.faker_en_gb;

import faked.base;


///
class Faker_en_gb : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"01#### #####",
		"01### ######",
		"01#1 ### ####",
		"011# ### ####",
		"02# #### ####",
		"03## ### ####",
		"055 #### ####",
		"056 #### ####",
		"0800 ### ####",
		"08## ### ####",
		"09## ### ####",
		"016977 ####",
		"01### #####",
		"0500 ######",
		"0800 ######"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationStateAbbr() {
		auto data = [
		"ENG",
		"NIR",
		"SCT",
		"WLS'"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationState() {
		auto data = [
		"England",
		"Northern Ireland",
		"Scotland",
		"Wales'"
		];
		return choice(data, this.rnd);
	}

	///
	string locationCityInfix() {
		auto data = [
		"-under-",
		"-over-",
		"-le-",
		"-upon-",
		"-on-'"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationDefaultCountry() {
		auto data = [
		"England",
		"Scotland",
		"Wales",
		"Northern Ireland'"
		];
		return choice(data, this.rnd);
	}


	override string locationCityPattern() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return locationCityPrefix() ~ " " ~ personLastName() ~ locationCitySuffix();
			case 1: return locationCityPrefix() ~ " " ~ personLastName();
			case 2: return personLastName() ~ locationCitySuffix();
			case 3: return personLastName() ~ locationCityInfix() ~ personLastName();
		}
	}


	override string locationStreetPattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return personFirstName() ~ " " ~ locationStreetSuffix();
			case 1: return personLastName() ~ " " ~ locationStreetSuffix();
		}
	}

	///
	override string locationCitySuffix() {
		auto data = [
		"ton",
		"ham",
		"ley",
		"ington",
		"ford",
		"field",
		"bury",
		"don",
		"ing",
		"worth",
		"well",
		"ingham",
		"wood",
		"ridge",
		"borough",
		"stone",
		"hill",
		"thorpe",
		"hampton",
		"wick",
		" Green",
		" Park",
		" Hill",
		" Court",
		" Heath",
		" Bridge",
		" End",
		" Common",
		" Place",
		" Cross",
		" Gardens"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationCityPrefix() {
		auto data = [
		"Great",
		"Little",
		"St.",
		"West",
		"East",
		"North",
		"South",
		"Upper",
		"Lower",
		"Old",
		"Long",
		"New",
		"High",
		"Nether",
		"Castle",
		"Upton",
		"Newton"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationCounty() {
		auto data = [
		"Avon",
		"Bedfordshire",
		"Berkshire",
		"Borders",
		"Buckinghamshire",
		"Cambridgeshire",
		"Central",
		"Cheshire",
		"Cleveland",
		"Clwyd",
		"Cornwall",
		"County Antrim",
		"County Armagh",
		"County Down",
		"County Fermanagh",
		"County Londonderry",
		"County Tyrone",
		"Cumbria",
		"Derbyshire",
		"Devon",
		"Dorset",
		"Dumfries and Galloway",
		"Durham",
		"Dyfed",
		"East Sussex",
		"Essex",
		"Fife",
		"Gloucestershire",
		"Grampian",
		"Greater Manchester",
		"Gwent",
		"Gwynedd County",
		"Hampshire",
		"Herefordshire",
		"Hertfordshire",
		"Highlands and Islands",
		"Humberside",
		"Isle of Wight",
		"Kent",
		"Lancashire",
		"Leicestershire",
		"Lincolnshire",
		"Lothian",
		"Merseyside",
		"Mid Glamorgan",
		"Norfolk",
		"North Yorkshire",
		"Northamptonshire",
		"Northumberland",
		"Nottinghamshire",
		"Oxfordshire",
		"Powys",
		"Rutland",
		"Shropshire",
		"Somerset",
		"South Glamorgan",
		"South Yorkshire",
		"Staffordshire",
		"Strathclyde",
		"Suffolk",
		"Surrey",
		"Tayside",
		"Tyne and Wear",
		"Warwickshire",
		"West Glamorgan",
		"West Midlands",
		"West Sussex",
		"West Yorkshire",
		"Wiltshire",
		"Worcestershire"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationBuildingNumber() {
		auto data = [
		"###",
		"##",
		"#'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationPostcode() {
		auto data = [
		"??# #??",
		"??## #??'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationStreetSuffix() {
		auto data = [
		"Road",
		"Close",
		"Street",
		"Lane",
		"Avenue",
		"Drive",
		"Way",
		"Place",
		"Court",
		"Gardens",
		"Crescent",
		"Grove",
		"Terrace",
		"Hill",
		"View",
		"Walk",
		"Park",
		"Mews",
		"Rise",
		"Green",
		"Square",
		"Croft",
		"Bank",
		"Row",
		"Meadow",
		"Gate",
		"End",
		"Drove",
		"Mead",
		"Field",
		"Chase",
		"Mount",
		"Meadows",
		"Orchard",
		"Fields",
		"Yard",
		"Garth",
		"Fold",
		"Wynd",
		"Parade",
		"Vale",
		"Brae",
		"Grange",
		"Approach",
		"Wood",
		"Paddock",
		"Brow",
		"Lea",
		"Path",
		"Side",
		"Heights",
		"Copse",
		"Corner",
		"Ridge",
		"Glade"
		];
		return choice(data, this.rnd);
	}

	///
	override string cellPhoneFormats() {
		auto data = [
		"074## ######",
		"075## ######",
		"076## ######",
		"077## ######",
		"078## ######",
		"079## ######"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string internetDomainSuffix() {
		auto data = [
		"ac.uk",
		"biz",
		"co",
		"co.uk",
		"com",
		"cymru",
		"gov.uk",
		"info",
		"london",
		"ltd.uk",
		"me.uk",
		"name",
		"nhs.uk",
		"org.uk",
		"plc.uk",
		"sch.uk",
		"scot",
		"uk",
		"wales"
		];
		return choice(data, this.rnd);
	}


	override string personLastNamePattern() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return "{ value: '" ~ personLastName();
			case 1: return "weight: 9 }";
			case 2: return "{ value: '" ~ personLastName() ~ "-" ~ personLastName();
			case 3: return "weight: 1 }";
		}
	}


	override string personName() {
		final switch(uniform(0, 6, this.rnd)) {
			case 0: return "{ value: '" ~ personFirstName() ~ " " ~ personLastName();
			case 1: return "weight: 7 }";
			case 2: return "{";
			case 3: return "value: '" ~ personPrefix() ~ " " ~ personFirstName() ~ " " ~ personLastName();
			case 4: return "weight: 1";
			case 5: return "}";
		}
	}

}
