// generated by fakerjsgenerator
///
module faked.faker_zh_cn;

import faked.base;


///
class Faker_zh_cn : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string locationStateAbbr() {
		auto data = [
		"北京",
		"上海",
		"天津",
		"重庆",
		"黑龙江",
		"吉林",
		"辽阳",
		"内蒙古",
		"河北",
		"新疆",
		"甘肃",
		"青海",
		"陕西",
		"宁夏",
		"河南",
		"山东",
		"山西",
		"合肥",
		"湖北",
		"湖南",
		"苏州",
		"四川",
		"贵州",
		"云南",
		"广西",
		"西藏",
		"浙江",
		"江西",
		"广东",
		"福建",
		"海南"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationState() {
		auto data = [
		"北京市",
		"上海市",
		"天津市",
		"重庆市",
		"黑龙江省",
		"吉林省",
		"辽宁省",
		"内蒙古自治区",
		"河北省",
		"新疆维吾尔自治区",
		"甘肃省",
		"青海省",
		"陕西省",
		"宁夏回族自治区",
		"河南省",
		"山东省",
		"山西省",
		"安徽省",
		"湖北省",
		"湖南省",
		"江苏省",
		"四川省",
		"贵州省",
		"云南省",
		"广西壮族自治区",
		"西藏自治区",
		"浙江省",
		"江西省",
		"广东省",
		"福建省",
		"海南省"
		];
		return choice(data, this.rnd);
	}


	override string locationStreetPattern() {
		final switch(uniform(0, 1, this.rnd)) {
			case 0: return personLastName() ~ locationStreetSuffix() ~ "'";
		}
	}


	override string locationStreetAddress() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "normal: '" ~ locationStreet() ~ locationBuildingNumber() ~ "号";
			case 1: return "full: '" ~ locationStreet() ~ locationBuildingNumber() ~ "号 " ~ locationSecondaryAddress();
		}
	}

	///
	override string locationDefaultCountry() {
		auto data = [
		"中国'"
		];
		return choice(data, this.rnd);
	}


	override string locationCityPattern() {
		final switch(uniform(0, 1, this.rnd)) {
			case 0: return locationCityPrefix() ~ locationCitySuffix() ~ "'";
		}
	}

	///
	override string locationCitySuffix() {
		auto data = [
		"乡县",
		"京市",
		"南市",
		"原市",
		"口市",
		"头市",
		"宁市",
		"安市",
		"州市",
		"徽市",
		"林市",
		"汉市",
		"沙市",
		"海市",
		"码市",
		"都市",
		"门市",
		"阳市"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationCityPrefix() {
		auto data = [
		"上",
		"包",
		"北",
		"南",
		"厦",
		"吉",
		"太",
		"宁",
		"安",
		"成",
		"武",
		"济",
		"海",
		"珠",
		"福",
		"衡",
		"西",
		"诸",
		"贵",
		"长"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationBuildingNumber() {
		auto data = [
		"#####",
		"####",
		"###",
		"##",
		"#'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationPostcode() {
		auto data = [
		"######'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationStreetSuffix() {
		auto data = [
		"巷",
		"街",
		"路",
		"桥",
		"侬",
		"旁",
		"中心",
		"栋'"
		];
		return choice(data, this.rnd);
	}

	///
	override string financeTransactionType() {
		auto data = [
		"存款",
		"取款",
		"支付",
		"开票'"
		];
		return choice(data, this.rnd);
	}

	///
	override Currency financeCurrency() {
		auto data = [
		Currency("阿联酋迪拉姆", "AED", ""),
		Currency("阿富汗尼", "AFN", "؋"),
		Currency("列克", "ALL", "Lek"),
		Currency("亚美尼亚德拉姆", "AMD", ""),
		Currency("荷属安的列斯盾", "ANG", "ƒ"),
		Currency("宽扎", "AOA", ""),
		Currency("阿根廷比索", "ARS", "$"),
		Currency("澳大利亚元", "AUD", "$"),
		Currency("阿鲁巴弗罗林", "AWG", "ƒ"),
		Currency("阿塞拜疆马纳特", "AZN", "ман"),
		Currency("可兑换马克", "BAM", "KM"),
		Currency("巴巴多斯元", "BBD", "$"),
		Currency("孟加拉塔卡", "BDT", ""),
		Currency("保加利亚列弗", "BGN", "лв"),
		Currency("巴林第纳尔", "BHD", ""),
		Currency("布隆迪法郎", "BIF", ""),
		Currency("百慕大元（通常称为百慕大元）", "BMD", "$"),
		Currency("文莱元", "BND", "$"),
		Currency("玻利维亚诺", "BOB", "Bs"),
		Currency("巴西雷亚尔", "BRL", "R$"),
		Currency("巴哈马元", "BSD", "$"),
		Currency("普拉", "BWP", "P"),
		Currency("白俄罗斯卢布", "BYN", "Rbl"),
		Currency("伯利兹元", "BZD", "BZ$"),
		Currency("加拿大元", "CAD", "$"),
		Currency("刚果法郎", "CDF", ""),
		Currency("瑞士法郎", "CHF", "CHF"),
		Currency("智利比索", "CLP", "$"),
		Currency("人民币", "CNY", "¥"),
		Currency("哥伦比亚比索", "COP", "$"),
		Currency("哥斯达黎加科朗", "CRC", "₡"),
		Currency("古巴比索", "CUP", "₱"),
		Currency("佛得角埃斯库多", "CVE", ""),
		Currency("捷克克朗", "CZK", "Kč"),
		Currency("吉布提法郎", "DJF", ""),
		Currency("丹麦克朗", "DKK", "kr"),
		Currency("多米尼加比索", "DOP", "RD$"),
		Currency("阿尔及利亚第纳尔", "DZD", ""),
		Currency("埃及镑", "EGP", "£"),
		Currency("纳克法", "ERN", ""),
		Currency("埃塞俄比亚比尔", "ETB", ""),
		Currency("欧元", "EUR", "€"),
		Currency("斐济元", "FJD", "$"),
		Currency("福克兰群岛镑", "FKP", "£"),
		Currency("英镑", "GBP", "£"),
		Currency("格鲁吉亚拉里", "GEL", ""),
		Currency("塞地", "GHS", ""),
		Currency("直布罗陀镑", "GIP", "£"),
		Currency("达尔西", "GMD", ""),
		Currency("几内亚法郎", "GNF", ""),
		Currency("格查尔", "GTQ", "Q"),
		Currency("圭亚那元", "GYD", "$"),
		Currency("港元", "HKD", "$"),
		Currency("伦皮拉", "HNL", "L"),
		Currency("古德", "HTG", ""),
		Currency("福林特", "HUF", "Ft"),
		Currency("印度尼西亚卢比", "IDR", "Rp"),
		Currency("新以色列谢克尔", "ILS", "₪"),
		Currency("不丹努扎姆", "BTN", "Nu"),
		Currency("印度卢比", "INR", "₹"),
		Currency("伊拉克第纳尔", "IQD", ""),
		Currency("伊朗里亚尔", "IRR", "﷼"),
		Currency("冰岛克朗", "ISK", "kr"),
		Currency("牙买加元", "JMD", "J$"),
		Currency("约旦第纳尔", "JOD", ""),
		Currency("日元", "JPY", "¥"),
		Currency("肯尼亚先令", "KES", ""),
		Currency("吉尔吉斯斯坦索姆", "KGS", "лв"),
		Currency("瑞尔", "KHR", "៛"),
		Currency("科摩罗法郎", "KMF", ""),
		Currency("朝鲜圆", "KPW", "₩"),
		Currency("韩元", "KRW", "₩"),
		Currency("科威特第纳尔", "KWD", ""),
		Currency("开曼群岛元", "KYD", "$"),
		Currency("坚戈", "KZT", "лв"),
		Currency("基普", "LAK", "₭"),
		Currency("黎巴嫩镑", "LBP", "£"),
		Currency("斯里兰卡卢比", "LKR", "₨"),
		Currency("利比里亚元", "LRD", "$"),
		Currency("利比亚第纳尔", "LYD", ""),
		Currency("摩洛哥迪拉姆", "MAD", ""),
		Currency("摩尔多瓦列伊", "MDL", ""),
		Currency("马达加斯加阿里亚里", "MGA", ""),
		Currency("马其顿代纳尔", "MKD", "ден"),
		Currency("缅甸元", "MMK", ""),
		Currency("图格里克", "MNT", "₮"),
		Currency("澳门元", "MOP", ""),
		Currency("乌吉亚", "MRU", ""),
		Currency("毛里求斯卢比", "MUR", "₨"),
		Currency("拉菲亚", "MVR", ""),
		Currency("克瓦查", "MWK", ""),
		Currency("墨西哥比索", "MXN", "$"),
		Currency("马来西亚林吉特", "MYR", "RM"),
		Currency("莫桑比克梅蒂卡尔", "MZN", "MT"),
		Currency("奈拉", "NGN", "₦"),
		Currency("科多巴金科多巴", "NIO", "C$"),
		Currency("挪威克朗", "NOK", "kr"),
		Currency("尼泊尔卢比", "NPR", "₨"),
		Currency("新西兰元", "NZD", "$"),
		Currency("阿曼里亚尔", "OMR", "﷼"),
		Currency("巴尔博亚", "PAB", "B/."),
		Currency("秘鲁新索尔", "PEN", "S/."),
		Currency("基纳", "PGK", ""),
		Currency("菲律宾比索", "PHP", "Php"),
		Currency("巴基斯坦卢比", "PKR", "₨"),
		Currency("兹罗提", "PLN", "zł"),
		Currency("巴拉圭瓜拉尼", "PYG", "Gs"),
		Currency("卡塔尔里亚尔", "QAR", "﷼"),
		Currency("新卢", "RON", "lei"),
		Currency("塞尔维亚第纳尔", "RSD", "Дин."),
		Currency("俄罗斯卢布", "RUB", "руб"),
		Currency("卢旺达法郎", "RWF", ""),
		Currency("沙特里亚尔", "SAR", "﷼"),
		Currency("所罗门群岛元", "SBD", "$"),
		Currency("塞舌尔卢比", "SCR", "₨"),
		Currency("苏丹镑", "SDG", ""),
		Currency("瑞典克朗", "SEK", "kr"),
		Currency("新加坡元", "SGD", "$"),
		Currency("圣赫勒拿镑", "SHP", "£"),
		Currency("利昂", "SLE", ""),
		Currency("索马里先令", "SOS", "S"),
		Currency("苏里南元", "SRD", "$"),
		Currency("南苏丹镑", "SSP", ""),
		Currency("多布拉", "STN", "Db"),
		Currency("叙利亚镑", "SYP", "£"),
		Currency("利兰吉尼", "SZL", ""),
		Currency("泰铢", "THB", "฿"),
		Currency("索莫尼", "TJS", ""),
		Currency("马纳特", "TMT", ""),
		Currency("突尼斯第纳尔", "TND", ""),
		Currency("帕安加", "TOP", ""),
		Currency("土耳其里拉", "TRY", "₺"),
		Currency("特立尼达和多巴哥元", "TTD", "TT$"),
		Currency("新台币", "TWD", "NT$"),
		Currency("坦桑尼亚先令", "TZS", ""),
		Currency("格里夫尼亚", "UAH", "₴"),
		Currency("乌干达先令", "UGX", ""),
		Currency("美元", "USD", "$"),
		Currency("乌拉圭比索", "UYU", "$U"),
		Currency("乌兹别克索姆", "UZS", "лв"),
		Currency("委内瑞拉玻利瓦尔", "VES", "Bs"),
		Currency("越南盾", "VND", "₫"),
		Currency("瓦图", "VUV", ""),
		Currency("塔拉", "WST", ""),
		Currency("科姆罗尔法郎", "XAF", ""),
		Currency("银", "XAG", "XAG"),
		Currency("金", "XAU", "XAU"),
		Currency("东加勒比元", "XCD", "$"),
		Currency("特别提款权", "XDR", "XDR"),
		Currency("中非金融合作法郎", "XOF", ""),
		Currency("波利尼西亚法郎", "XPF", ""),
		Currency("也门里亚尔", "YER", "﷼"),
		Currency("南非兰特", "ZAR", "R"),
		Currency("赞比亚克瓦查", "ZMW", "ZK"),
		Currency("津巴布韦元", "ZWL", "$")
		];
		return choice(data, this.rnd);
	}

	///
	override string financeAccountType() {
		auto data = [
		"支票",
		"储蓄",
		"货币市场",
		"投资",
		"房屋贷款",
		"信用卡",
		"汽车贷款",
		"个人贷款"
		];
		return choice(data, this.rnd);
	}


	///
    override string financeCreditCardCVV() {
        string ret;
        for(int i = 0; i < 3; ++i) {
            ret ~= to!string(uniform(0, 3, this.rnd));
        }
        return ret;
    }

	///
    override string financeCreditCard() {
        switch(uniform(0, 1, this.rnd)) {
			case 0: 
				return financeCreditCardMastercard();
			case 1: 
				return financeCreditCardVisa();
			case 2: 
				return financeCreditCardUnionpay();

            default:
                assert(false);
        }
        assert(false);
    }

	///
	override string financeCreditCardMastercard() {
		auto data = [
		"5[1-5]##-####-####-###L'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string financeCreditCardVisa() {
		auto data = [
		"4###########L",
		"4###-####-####-###L'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	string financeCreditCardUnionpay() {
		auto data = [
		"62#############L",
		"67#############L",
		"81#############L",
		"81##############L",
		"81###############L",
		"81################L"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string animalType() {
		auto data = [
		"熊",
		"猫",
		"狗",
		"鱼",
		"马'"
		];
		return choice(data, this.rnd);
	}

	///
	override string animalHorse() {
		auto data = [
		"蒙古马",
		"伊利马",
		"三河马",
		"河曲马'"
		];
		return choice(data, this.rnd);
	}

	///
	override string animalFish() {
		auto data = [
		"草鱼",
		"鲶鱼",
		"鳙鱼",
		"鲤鱼",
		"金鱼",
		"胭脂鱼",
		"中华鲟",
		"长江白鲟",
		"新疆大头鱼",
		"青鱼",
		"鲫鱼"
		];
		return choice(data, this.rnd);
	}

	///
	override string animalBear() {
		auto data = [
		"大熊猫",
		"眼镜熊",
		"太阳熊",
		"懒熊",
		"美洲黑熊",
		"亚洲黑熊",
		"棕熊",
		"北极熊"
		];
		return choice(data, this.rnd);
	}

	///
	override string animalDog() {
		auto data = [
		"藏獒",
		"袖狗",
		"拉萨狮子犬",
		"西藏狮子犬",
		"松狮犬",
		"中国冠毛犬",
		"西施犬",
		"沙皮犬",
		"八哥犬",
		"西藏獚",
		"中华田园犬",
		"下司犬",
		"北京犬",
		"西藏梗",
		"柴犬",
		"哈士奇",
		"德国牧羊犬",
		"边境牧羊犬",
		"贵兵犬",
		"秋田犬",
		"罗威纳犬",
		"蝴蝶犬",
		"英国斗牛犬",
		"阿富汗猎犬",
		"萨摩耶犬",
		"大白熊犬",
		"比利时牧羊犬",
		"美国爱斯基摩犬",
		"彭布罗克威尔士柯基犬",
		"墨西哥无毛犬"
		];
		return choice(data, this.rnd);
	}

	///
	override string animalCat() {
		auto data = [
		"中华田园猫",
		"中国狸花猫",
		"山东狮子猫",
		"玄猫",
		"黑白花猫",
		"三花猫",
		"玳瑁猫",
		"橘猫",
		"四川简州猫",
		"中国大白猫",
		"美国短毛猫",
		"英国短毛猫",
		"加菲猫",
		"波斯猫",
		"布偶猫",
		"苏格兰折耳猫",
		"暹罗猫",
		"斯芬克斯猫",
		"德文卷毛猫",
		"阿比西尼亚猫"
		];
		return choice(data, this.rnd);
	}

	///
	string companyType() {
		auto data = [
		"有限责任公司",
		"股份有限公司",
		"有限公司",
		"（集团）有限公司",
		"集团有限公司",
		"无限公司",
		"无限责任公司"
		];
		return choice(data, this.rnd);
	}

	///
	string companyCategory() {
		auto data = [
		"水产",
		"林业",
		"矿业",
		"建设",
		"食品",
		"印刷",
		"电力",
		"燃气",
		"网络科技",
		"物流",
		"保险",
		"旅游发展",
		"传媒",
		"运输"
		];
		return choice(data, this.rnd);
	}


	override string companyNamePattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return locationState() ~ personFirstName() ~ companyCategory() ~ companyType();
			case 1: return locationCity() ~ personFirstName() ~ companyCategory() ~ companyType();
		}
	}

	///
	override string hackerAdjective() {
		auto data = [
		"辅助",
		"主要",
		"后端",
		"开源",
		"虚拟",
		"跨平台",
		"冗余",
		"在线",
		"触控",
		"多字节",
		"蓝牙",
		"无线",
		"全高清",
		"神经元",
		"光学",
		"固态",
		"移动"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerVerb() {
		auto data = [
		"备份",
		"绕过",
		"入侵",
		"覆盖",
		"压缩",
		"复制",
		"导航",
		"索引",
		"链接",
		"生成",
		"量化",
		"计算",
		"合成",
		"输入",
		"传输",
		"编程",
		"重启",
		"解析"
		];
		return choice(data, this.rnd);
	}


	override string hackerPhrase() {
		final switch(uniform(0, 8, this.rnd)) {
			case 0: return "倘若我们" ~ hackerVerb() ~ hackerNoun() ~ "，我们就可以通过" ~ hackerAdjective() ~ hackerAbbreviation() ~ hackerNoun() ~ "获得" ~ hackerAbbreviation() ~ hackerNoun() ~ "！";
			case 1: return "我们需要" ~ hackerVerb() ~ hackerAdjective() ~ hackerAbbreviation() ~ hackerNoun() ~ "！";
			case 2: return "尝试" ~ hackerVerb() ~ hackerAbbreviation() ~ hackerNoun() ~ "，也许会" ~ hackerVerb() ~ hackerAdjective() ~ hackerNoun() ~ "！";
			case 3: return "在没有" ~ hackerVerb() ~ hackerAdjective() ~ hackerAbbreviation() ~ hackerNoun() ~ "的情况下，你不能" ~ hackerVerb() ~ hackerNoun() ~ "！";
			case 4: return "使用" ~ hackerAdjective() ~ hackerAbbreviation() ~ hackerNoun() ~ "，然后你就能" ~ hackerVerb() ~ hackerAdjective() ~ hackerNoun() ~ "！";
			case 5: return hackerAbbreviation() ~ hackerNoun() ~ "已关闭，因为" ~ hackerAdjective() ~ hackerNoun() ~ "所以我们能" ~ hackerVerb() ~ hackerAbbreviation() ~ hackerNoun() ~ "！";
			case 6: return hackerVerb() ~ hackerNoun() ~ "是无济于事的，我们需要" ~ hackerVerb() ~ hackerAdjective() ~ hackerAbbreviation() ~ hackerNoun() ~ "！";
			case 7: return "我将" ~ hackerVerb() ~ hackerAdjective() ~ hackerAbbreviation() ~ hackerNoun() ~ "，那是应该" ~ hackerNoun() ~ hackerAbbreviation() ~ hackerNoun() ~ "！";
		}
	}

	///
	override string hackerNoun() {
		auto data = [
		"驱动",
		"协议",
		"带宽",
		"面板",
		"芯片",
		"程序",
		"端口",
		"卡片",
		"数组",
		"接口",
		"系统",
		"传感器",
		"防火墙",
		"硬盘",
		"像素",
		"警报",
		"提要",
		"监视器",
		"应用",
		"发送端",
		"总线",
		"电路",
		"电容器",
		"矩阵"
		];
		return choice(data, this.rnd);
	}

	///
	override string musicSongName() {
		auto data = [
		"白月光与朱砂痣",
		"孤勇者",
		"稻香",
		"起风了",
		"纪念",
		"晴天",
		"兰亭序",
		"我流泪情绪零碎",
		"七里香",
		"花海",
		"反方向的钟",
		"一路向北",
		"蒲公英的约定",
		"夜曲",
		"搁浅",
		"海底",
		"105度的你",
		"明明就",
		"爱在西元前",
		"我如此相信",
		"枫",
		"青花瓷",
		"半岛铁盒",
		"说了再见",
		"暗号",
		"退后",
		"最长的电影",
		"等你下课",
		"烟花易冷",
		"不该",
		"告白气球",
		"说好不哭",
		"轨迹",
		"红尘客栈",
		"不能说的秘密",
		"珊瑚海",
		"给我一首歌的时间",
		"你听得到",
		"简单的爱",
		"龙卷风",
		"发如雪",
		"园游会",
		"听妈妈的话",
		"夜的第七章",
		"接口",
		"手写从前",
		"安静",
		"爱情废材",
		"以父之名",
		"我不配",
		"最伟大的作品",
		"可爱女人",
		"彩虹",
		"回到过去",
		"听悲伤的情话",
		"把回忆拼好给你",
		"东风破",
		"黑色毛衣",
		"本草纲目",
		"开不了口",
		"霍元甲",
		"爱的飞行日记",
		"大本钟",
		"断了的弦",
		"爷爷泡的茶",
		"星晴",
		"甜甜的",
		"红颜如霜",
		"粉色海洋",
		"她的睫毛",
		"雨下一整晚",
		"白色风车",
		"还在流浪",
		"阳光宅男",
		"算什么男人",
		"菊花台",
		"千里之外",
		"错过的烟火",
		"倒影",
		"听见下雨的声音",
		"黑色幽默",
		"默",
		"不爱我拉倒",
		"之战之殇",
		"布拉格广场",
		"美人鱼",
		"分裂",
		"心雨",
		"米兰的小铁匠",
		"世界末日",
		"一点点",
		"外婆",
		"画沙",
		"哪里都是你",
		"刀马旦",
		"超人不会飞",
		"牛仔很忙",
		"周大侠",
		"飘移",
		"忍者",
		"夏日妄想",
		"铃芽之旅",
		"玫瑰少年",
		"大鱼",
		"灯火里的中国",
		"义勇军进行曲",
		"调查中",
		"少年",
		"堕",
		"在你身边",
		"悬溺",
		"奢香夫人",
		"最好的安排",
		"夏至未至",
		"小城夏天",
		"暖暖"
		];
		return choice(data, this.rnd);
	}

	///
	override string musicGenre() {
		auto data = [
		"摇滚",
		"流行",
		"重金属",
		"电子",
		"民谣",
		"世界",
		"乡村",
		"爵士",
		"放克",
		"灵魂",
		"嘻哈",
		"经典",
		"拉丁",
		"牙买加",
		"蓝调",
		"非音乐",
		"说唱",
		"舞台与银幕"
		];
		return choice(data, this.rnd);
	}

	///
	override string colorHuman() {
		auto data = [
		"红色",
		"绿色",
		"蓝色",
		"黄色",
		"紫色",
		"薄荷绿色",
		"蓝绿色",
		"白色",
		"黑色",
		"橙色",
		"粉红色",
		"灰色",
		"红褐色",
		"蓝紫色",
		"青绿色",
		"棕褐色",
		"天蓝色",
		"浅橙色",
		"紫红色",
		"淡紫色",
		"淡褐色",
		"青柠色",
		"乳白色",
		"靛蓝色",
		"金色",
		"银色"
		];
		return choice(data, this.rnd);
	}

	///
	override string dateWeekday() {
		auto data = [
		"wide: ['星期天",
		"星期一",
		"星期二",
		"星期三",
		"星期四",
		"星期五",
		"星期六']",
		"abbr: ['周日",
		"周一",
		"周二",
		"周三",
		"周四",
		"周五",
		"周六']"
		];
		return choice(data, this.rnd);
	}


	override string dateMonth() {
		final switch(uniform(0, 28, this.rnd)) {
			case 0: return "wide: [";
			case 1: return "一月";
			case 2: return "二月";
			case 3: return "三月";
			case 4: return "四月";
			case 5: return "五月";
			case 6: return "六月";
			case 7: return "七月";
			case 8: return "八月";
			case 9: return "九月";
			case 10: return "十月";
			case 11: return "十一月";
			case 12: return "十二月";
			case 13: return "]";
			case 14: return "abbr: [";
			case 15: return "1月";
			case 16: return "2月";
			case 17: return "3月";
			case 18: return "4月";
			case 19: return "5月";
			case 20: return "6月";
			case 21: return "7月";
			case 22: return "8月";
			case 23: return "9月";
			case 24: return "10月";
			case 25: return "11月";
			case 26: return "12月";
			case 27: return "]";
		}
	}

	///
	override string wordAdverb() {
		auto data = [
		"都",
		"全",
		"单",
		"共",
		"光",
		"尽",
		"净",
		"仅",
		"就",
		"只",
		"一共",
		"一起",
		"一同",
		"一道",
		"一齐",
		"一概",
		"一味",
		"统统",
		"总共",
		"仅仅",
		"惟独",
		"可",
		"倒",
		"一定",
		"必定",
		"必然",
		"却",
		"幸亏",
		"难道",
		"何尝",
		"偏偏",
		"索性",
		"简直",
		"反正",
		"多亏",
		"也许",
		"大约",
		"好在",
		"敢情",
		"不",
		"没",
		"没有",
		"别",
		"仿佛",
		"渐渐",
		"百般",
		"特地",
		"互相",
		"擅自",
		"几乎",
		"逐渐",
		"逐步",
		"猛然",
		"依然",
		"仍然",
		"当然",
		"毅然",
		"果然",
		"差点儿",
		"很",
		"极",
		"最",
		"太",
		"更",
		"更加",
		"格外",
		"十分",
		"极其",
		"比较",
		"相当",
		"稍微",
		"略微",
		"多么"
		];
		return choice(data, this.rnd);
	}

	///
	override string wordAdjective() {
		auto data = [
		"长",
		"短",
		"大",
		"小",
		"粗",
		"细",
		"红",
		"绿",
		"平坦",
		"整齐",
		"雪白",
		"笔直",
		"绿油油",
		"血淋淋",
		"骨碌碌",
		"黑不溜秋",
		"好",
		"坏",
		"伟大",
		"勇敢",
		"优秀",
		"聪明",
		"老实",
		"鲁莽",
		"大方",
		"软",
		"硬",
		"苦",
		"甜",
		"冷",
		"热",
		"坚固",
		"平常",
		"快",
		"慢",
		"生动",
		"熟练",
		"轻松",
		"清楚",
		"马虎",
		"干脆",
		"许多",
		"好些",
		"全部",
		"全",
		"整",
		"多",
		"少"
		];
		return choice(data, this.rnd);
	}

	///
	override string wordVerb() {
		auto data = [
		"打",
		"吃",
		"抿",
		"做",
		"坐",
		"跑",
		"跳",
		"走",
		"飞",
		"爬",
		"开",
		"滑",
		"切",
		"拆",
		"咬",
		"吞",
		"吐",
		"吮",
		"吸",
		"啃",
		"喝",
		"咀",
		"嚼",
		"搀",
		"抱",
		"搂",
		"扶",
		"捉",
		"擒",
		"掐",
		"推",
		"拿",
		"抽",
		"撕",
		"摘",
		"拣",
		"捡",
		"播",
		"击",
		"捏",
		"撒",
		"按",
		"弹",
		"撞",
		"提",
		"扭",
		"捶",
		"持",
		"揍",
		"披",
		"捣",
		"搜",
		"托",
		"举",
		"拖",
		"擦",
		"敲",
		"挖",
		"抛",
		"掘",
		"抬",
		"插",
		"扔",
		"写",
		"抄",
		"抓",
		"捧",
		"掷",
		"撑",
		"摊",
		"倒",
		"摔",
		"劈",
		"画",
		"搔",
		"撬",
		"挥",
		"揽",
		"挡",
		"捺",
		"抚",
		"搡",
		"拉",
		"摸",
		"拍",
		"摇",
		"剪",
		"拎",
		"拔",
		"拧",
		"拨",
		"舞",
		"握",
		"攥",
		"驾驶",
		"移动",
		"转动",
		"操作",
		"蠕动",
		"启动",
		"关闭"
		];
		return choice(data, this.rnd);
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"0##-########",
		"0###-########",
		"1##########'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string internetFreeEmail() {
		auto data = [
		"126.com",
		"139.com",
		"163.com",
		"21cn.com",
		"gmail.com",
		"hotmail.com",
		"qq.com",
		"sina.com",
		"sohu.com",
		"tom.com",
		"vip.qq.com",
		"yahoo.cn",
		"yahoo.com.cn",
		"yeah.net",
		"foxmail.com",
		"outlook.com"
		];
		return choice(data, this.rnd);
	}


	override string personBioPattern() {
		final switch(uniform(0, 8, this.rnd)) {
			case 0: return personBioPart();
			case 1: return personBioPart() ~ "，" ~ personBioPart();
			case 2: return personBioPart() ~ "，" ~ personBioPart() ~ "，" ~ personBioPart();
			case 3: return personBioPart() ~ "，" ~ personBioPart() ~ "，" ~ personBioPart() ~ internetEmoji();
			case 4: return wordNoun() ~ personBioSupporter();
			case 5: return wordNoun() ~ personBioSupporter() ~ internetEmoji();
			case 6: return wordNoun() ~ personBioSupporter() ~ "，" ~ personBioPart();
			case 7: return wordNoun() ~ personBioSupporter() ~ "，" ~ personBioPart() ~ internetEmoji();
		}
	}

	///
	override string personMaleFirstName() {
		auto data = [
		"建华",
		"建国",
		"建军",
		"国强",
		"国平",
		"国良",
		"国栋",
		"国辉",
		"志国",
		"志明",
		"勇",
		"军",
		"伟",
		"强",
		"刚",
		"涛",
		"斌",
		"波",
		"辉",
		"磊",
		"超",
		"鹏",
		"杰",
		"浩",
		"鑫",
		"帅",
		"宇",
		"晨",
		"诚",
		"成",
		"民",
		"明",
		"阳",
		"瑜",
		"熙成",
		"熙瑶",
		"家豪",
		"家明",
		"俊杰",
		"俊熙",
		"沐宸",
		"浩宇",
		"浩然",
		"浩轩",
		"浩晨",
		"沐辰",
		"茗泽",
		"奕辰",
		"奕泽",
		"宇泽",
		"宇轩",
		"宇航",
		"沐阳",
		"梓诚",
		"梓豪",
		"梓睿",
		"梓浩",
		"浩辰",
		"癸霖",
		"一全",
		"三锋",
		"义轩",
		"俊凯",
		"子豪",
		"振东",
		"智杰",
		"哲新",
		"文昊",
		"中海",
		"超栋",
		"治涛",
		"治文",
		"文韬",
		"敬彪",
		"敬阳",
		"政君",
		"立伟",
		"呈轩"
		];
		return choice(data, this.rnd);
	}

	///
	override string personLastName() {
		auto data = [
		"赵",
		"钱",
		"孙",
		"李",
		"周",
		"吴",
		"郑",
		"王",
		"冯",
		"陈",
		"褚",
		"卫",
		"蒋",
		"沈",
		"韩",
		"杨",
		"朱",
		"秦",
		"尤",
		"许",
		"何",
		"吕",
		"施",
		"张",
		"孔",
		"曹",
		"严",
		"华",
		"金",
		"魏",
		"陶",
		"姜",
		"戚",
		"谢",
		"邹",
		"喻",
		"柏",
		"水",
		"窦",
		"章",
		"云",
		"苏",
		"潘",
		"葛",
		"奚",
		"范",
		"彭",
		"郎",
		"鲁",
		"韦",
		"昌",
		"马",
		"苗",
		"凤",
		"花",
		"方",
		"俞",
		"任",
		"袁",
		"柳",
		"酆",
		"鲍",
		"史",
		"唐",
		"费",
		"廉",
		"岑",
		"薛",
		"雷",
		"贺",
		"倪",
		"汤",
		"滕",
		"殷",
		"罗",
		"毕",
		"郝",
		"邬",
		"安",
		"常",
		"乐",
		"于",
		"时",
		"傅",
		"皮",
		"卞",
		"齐",
		"康",
		"伍",
		"余",
		"元",
		"卜",
		"顾",
		"孟",
		"平",
		"黄",
		"和",
		"穆",
		"萧",
		"尹",
		"姚",
		"邵",
		"湛",
		"汪",
		"祁",
		"毛",
		"禹",
		"狄",
		"米",
		"贝",
		"明",
		"臧",
		"计",
		"伏",
		"成",
		"戴",
		"谈",
		"宋",
		"茅",
		"庞",
		"熊",
		"纪",
		"舒",
		"屈",
		"项",
		"祝",
		"董",
		"梁",
		"杜",
		"阮",
		"蓝",
		"闵",
		"席",
		"季",
		"麻",
		"强",
		"贾",
		"路",
		"娄",
		"危",
		"江",
		"童",
		"颜",
		"郭",
		"梅",
		"盛",
		"林",
		"刁",
		"锺",
		"徐",
		"邱",
		"骆",
		"高",
		"夏",
		"蔡",
		"田",
		"樊",
		"胡",
		"凌",
		"蹇",
		"称",
		"诺",
		"来",
		"多",
		"繁",
		"戊",
		"朴",
		"回",
		"毓",
		"税",
		"荤",
		"靖",
		"绪",
		"愈",
		"硕",
		"牢",
		"买",
		"但",
		"巧",
		"枚",
		"撒",
		"泰",
		"秘",
		"亥",
		"绍",
		"以",
		"壬",
		"森",
		"斋",
		"释",
		"奕",
		"姒",
		"朋",
		"求",
		"羽",
		"用",
		"占",
		"真",
		"穰",
		"翦",
		"闾",
		"漆",
		"贵",
		"代",
		"贯",
		"旁",
		"崇",
		"栋",
		"告",
		"休",
		"褒",
		"谏",
		"锐",
		"皋",
		"闳",
		"在",
		"歧",
		"禾",
		"示",
		"是",
		"委",
		"钊",
		"频",
		"嬴",
		"呼",
		"大",
		"威",
		"昂",
		"律",
		"冒",
		"保",
		"系",
		"抄",
		"定",
		"化",
		"莱",
		"校",
		"么",
		"抗",
		"祢",
		"綦",
		"悟",
		"宏",
		"功",
		"庚",
		"务",
		"敏",
		"捷",
		"拱",
		"兆",
		"丑",
		"丙",
		"畅",
		"苟",
		"随",
		"类",
		"卯",
		"俟",
		"友",
		"答",
		"乙",
		"允",
		"甲",
		"留",
		"尾",
		"佼",
		"玄",
		"乘",
		"裔",
		"延",
		"植",
		"环",
		"矫",
		"赛",
		"昔",
		"侍",
		"度",
		"旷",
		"遇",
		"偶",
		"前",
		"由",
		"咎",
		"塞",
		"敛",
		"受",
		"泷",
		"袭",
		"衅",
		"叔",
		"圣",
		"御",
		"夫",
		"仆",
		"镇",
		"藩",
		"邸",
		"府",
		"掌",
		"首",
		"员",
		"焉",
		"戏",
		"可",
		"智",
		"尔",
		"凭",
		"悉",
		"进",
		"笃",
		"厚",
		"仁",
		"业",
		"肇",
		"资",
		"合",
		"仍",
		"九",
		"衷",
		"哀",
		"刑",
		"俎",
		"仵",
		"圭",
		"夷",
		"徭",
		"蛮",
		"汗",
		"孛",
		"乾",
		"帖",
		"罕",
		"洛",
		"淦",
		"洋",
		"邶",
		"郸",
		"郯",
		"邗",
		"邛",
		"剑",
		"虢",
		"隋",
		"蒿",
		"茆",
		"菅",
		"苌",
		"树",
		"桐",
		"锁",
		"钟",
		"机",
		"盘",
		"铎",
		"斛",
		"玉",
		"线",
		"针",
		"箕",
		"庹",
		"绳",
		"磨",
		"蒉",
		"瓮",
		"弭",
		"刀",
		"疏",
		"牵",
		"浑",
		"恽",
		"势",
		"世",
		"仝",
		"同",
		"蚁",
		"止",
		"戢",
		"睢",
		"冼",
		"种",
		"涂",
		"肖",
		"己",
		"泣",
		"潜",
		"卷",
		"脱",
		"谬",
		"蹉",
		"赧",
		"浮",
		"顿",
		"说",
		"次",
		"错",
		"念",
		"夙",
		"斯",
		"完",
		"丹",
		"表",
		"聊",
		"源",
		"姓",
		"吾",
		"寻",
		"展",
		"出",
		"不",
		"户",
		"闭",
		"才",
		"无",
		"书",
		"学",
		"愚",
		"本",
		"性",
		"雪",
		"霜",
		"烟",
		"寒",
		"少",
		"字",
		"桥",
		"板",
		"斐",
		"独",
		"千",
		"诗",
		"嘉",
		"扬",
		"善",
		"揭",
		"祈",
		"析",
		"赤",
		"紫",
		"青",
		"柔",
		"刚",
		"奇",
		"拜",
		"佛",
		"陀",
		"弥",
		"阿",
		"素",
		"长",
		"僧",
		"隐",
		"仙",
		"隽",
		"宇",
		"祭",
		"酒",
		"淡",
		"塔",
		"琦",
		"闪",
		"始",
		"星",
		"南",
		"天",
		"接",
		"波",
		"碧",
		"速",
		"禚",
		"腾",
		"潮",
		"镜",
		"似",
		"澄",
		"潭",
		"謇",
		"纵",
		"渠",
		"奈",
		"风",
		"春",
		"濯",
		"沐",
		"茂",
		"英",
		"兰",
		"檀",
		"藤",
		"枝",
		"检",
		"生",
		"折",
		"登",
		"驹",
		"骑",
		"貊",
		"虎",
		"肥",
		"鹿",
		"雀",
		"野",
		"禽",
		"飞",
		"节",
		"宜",
		"鲜",
		"粟",
		"栗",
		"豆",
		"帛",
		"官",
		"布",
		"衣",
		"藏",
		"宝",
		"钞",
		"银",
		"门",
		"盈",
		"庆",
		"喜",
		"及",
		"普",
		"建",
		"营",
		"巨",
		"望",
		"希",
		"道",
		"载",
		"声",
		"漫",
		"犁",
		"力",
		"贸",
		"勤",
		"革",
		"改",
		"兴",
		"亓",
		"睦",
		"修",
		"信",
		"闽",
		"北",
		"守",
		"坚",
		"勇",
		"汉",
		"练",
		"尉",
		"士",
		"旅",
		"五",
		"令",
		"将",
		"旗",
		"军",
		"行",
		"奉",
		"敬",
		"恭",
		"仪",
		"母",
		"堂",
		"丘",
		"义",
		"礼",
		"慈",
		"孝",
		"理",
		"伦",
		"卿",
		"问",
		"永",
		"辉",
		"位",
		"让",
		"尧",
		"依",
		"犹",
		"介",
		"承",
		"市",
		"所",
		"苑",
		"杞",
		"剧",
		"第",
		"零",
		"谌",
		"招",
		"续",
		"达",
		"忻",
		"六",
		"鄞",
		"战",
		"迟",
		"候",
		"宛",
		"励",
		"粘",
		"萨",
		"邝",
		"覃",
		"辜",
		"初",
		"楼",
		"城",
		"区",
		"局",
		"台",
		"原",
		"考",
		"妫",
		"纳",
		"泉",
		"老",
		"清",
		"德",
		"卑",
		"过",
		"麦",
		"曲",
		"竹",
		"百",
		"福",
		"言",
		"霍",
		"虞",
		"万",
		"支",
		"柯",
		"昝",
		"管",
		"卢",
		"莫",
		"经",
		"房",
		"裘",
		"缪",
		"干",
		"解",
		"应",
		"宗",
		"丁",
		"宣",
		"贲",
		"邓",
		"单",
		"杭",
		"洪",
		"包",
		"诸",
		"左",
		"石",
		"崔",
		"吉",
		"钮",
		"龚",
		"程",
		"嵇",
		"邢",
		"滑",
		"裴",
		"陆",
		"荣",
		"翁",
		"荀",
		"羊",
		"於",
		"惠",
		"甄",
		"麴",
		"家",
		"封",
		"芮",
		"羿",
		"储",
		"靳",
		"汲",
		"邴",
		"糜",
		"松",
		"井",
		"段",
		"富",
		"巫",
		"乌",
		"焦",
		"巴",
		"弓",
		"牧",
		"隗",
		"山",
		"谷",
		"车",
		"侯",
		"宓",
		"蓬",
		"全",
		"郗",
		"班",
		"仰",
		"秋",
		"仲",
		"伊",
		"宫",
		"宁",
		"仇",
		"栾",
		"暴",
		"甘",
		"钭",
		"历",
		"戎",
		"祖",
		"武",
		"符",
		"刘",
		"景",
		"詹",
		"束",
		"龙",
		"叶",
		"幸",
		"司",
		"韶",
		"郜",
		"黎",
		"蓟",
		"溥",
		"印",
		"宿",
		"白",
		"怀",
		"蒲",
		"邰",
		"召",
		"有",
		"舜",
		"拉",
		"丛",
		"岳",
		"寸",
		"贰",
		"皇",
		"侨",
		"彤",
		"竭",
		"端",
		"赫",
		"实",
		"甫",
		"集",
		"象",
		"翠",
		"狂",
		"辟",
		"典",
		"良",
		"函",
		"芒",
		"苦",
		"其",
		"京",
		"中",
		"夕",
		"之",
		"从",
		"鄂",
		"索",
		"咸",
		"籍",
		"赖",
		"卓",
		"蔺",
		"屠",
		"蒙",
		"池",
		"乔",
		"阳",
		"郁",
		"胥",
		"能",
		"苍",
		"双",
		"闻",
		"莘",
		"党",
		"翟",
		"谭",
		"贡",
		"劳",
		"逄",
		"姬",
		"申",
		"扶",
		"堵",
		"冉",
		"宰",
		"郦",
		"雍",
		"却",
		"璩",
		"桑",
		"桂",
		"濮",
		"牛",
		"寿",
		"通",
		"边",
		"扈",
		"燕",
		"冀",
		"僪",
		"浦",
		"尚",
		"农",
		"温",
		"别",
		"庄",
		"晏",
		"柴",
		"瞿",
		"阎",
		"充",
		"慕",
		"连",
		"茹",
		"习",
		"宦",
		"艾",
		"鱼",
		"容",
		"向",
		"古",
		"易",
		"慎",
		"戈",
		"廖",
		"庾",
		"终",
		"暨",
		"居",
		"衡",
		"步",
		"都",
		"耿",
		"满",
		"弘",
		"匡",
		"国",
		"文",
		"琴",
		"况",
		"亢",
		"缑",
		"帅",
		"寇",
		"广",
		"禄",
		"阙",
		"东",
		"欧",
		"殳",
		"沃",
		"利",
		"蔚",
		"越",
		"夔",
		"隆",
		"师",
		"巩",
		"厍",
		"聂",
		"晁",
		"勾",
		"敖",
		"融",
		"冷",
		"訾",
		"辛",
		"阚",
		"那",
		"简",
		"饶",
		"空",
		"曾",
		"毋",
		"沙",
		"乜",
		"养",
		"鞠",
		"须",
		"丰",
		"巢",
		"关",
		"蒯",
		"相",
		"查",
		"后",
		"荆",
		"红",
		"游",
		"特",
		"察",
		"竺",
		"冠",
		"宾",
		"香",
		"赏",
		"伯",
		"佴",
		"佘",
		"佟",
		"爱",
		"年",
		"笪",
		"谯",
		"哈",
		"墨",
		"牟",
		"商",
		"海",
		"归",
		"钦",
		"鄢",
		"汝",
		"法",
		"闫",
		"楚",
		"晋",
		"督",
		"仉",
		"盖",
		"逯",
		"库",
		"郏",
		"逢",
		"阴",
		"薄",
		"厉",
		"稽",
		"开",
		"光",
		"操",
		"瑞",
		"眭",
		"泥",
		"运",
		"摩",
		"伟",
		"铁",
		"迮",
		"果",
		"权",
		"逮",
		"盍",
		"益",
		"桓",
		"公",
		"万俟",
		"司马",
		"上官",
		"欧阳",
		"夏侯",
		"诸葛",
		"闻人",
		"东方",
		"赫连",
		"皇甫",
		"尉迟",
		"公羊",
		"澹台",
		"公冶",
		"宗政",
		"濮阳",
		"淳于",
		"单于",
		"太叔",
		"申屠",
		"公孙",
		"仲孙",
		"轩辕",
		"令狐",
		"钟离",
		"宇文",
		"长孙",
		"慕容",
		"司徒",
		"司空",
		"章佳",
		"那拉",
		"觉罗",
		"纳喇",
		"乌雅",
		"范姜",
		"碧鲁"
		];
		return choice(data, this.rnd);
	}

	///
	override string personFirstName() {
		auto data = [
		"乐驹",
		"伟宸",
		"伟泽",
		"伟祺",
		"伟诚",
		"俊驰",
		"修杰",
		"修洁",
		"健柏",
		"健雄",
		"凯瑞",
		"博文",
		"博涛",
		"博超",
		"君浩",
		"哲瀚",
		"嘉懿",
		"嘉熙",
		"天宇",
		"天磊",
		"天翊",
		"子涵",
		"子轩",
		"子骞",
		"子默",
		"展鹏",
		"峻熙",
		"建辉",
		"弘文",
		"彬",
		"志强",
		"志泽",
		"思",
		"思淼",
		"思源",
		"思聪",
		"思远",
		"懿轩",
		"振家",
		"擎宇",
		"擎苍",
		"文",
		"文博",
		"文昊",
		"文轩",
		"旭尧",
		"昊天",
		"昊强",
		"昊焱",
		"昊然",
		"明",
		"明哲",
		"明杰",
		"明轩",
		"明辉",
		"晋鹏",
		"晓博",
		"晓啸",
		"晟睿",
		"智宸",
		"智渊",
		"智辉",
		"果",
		"梓晨",
		"楷瑞",
		"正豪",
		"泽洋",
		"浩",
		"浩宇",
		"浩然",
		"浩轩",
		"涛",
		"潇然",
		"炎彬",
		"炫明",
		"烨伟",
		"烨华",
		"烨磊",
		"烨霖",
		"煜城",
		"煜祺",
		"熠彤",
		"琪",
		"瑞霖",
		"瑾瑜",
		"皓轩",
		"睿渊",
		"立果",
		"立诚",
		"立轩",
		"立辉",
		"笑愚",
		"绍辉",
		"绍齐",
		"耀杰",
		"聪健",
		"胤祥",
		"致远",
		"航",
		"苑博",
		"荣轩",
		"语堂",
		"越彬",
		"越泽",
		"远航",
		"金鑫",
		"鑫磊",
		"鑫鹏",
		"钰轩",
		"锦程",
		"雨泽",
		"雪松",
		"靖琪",
		"风华",
		"驰",
		"鸿涛",
		"鸿煊",
		"鹏",
		"鹏涛",
		"鹏煊",
		"鹏飞",
		"鹤轩",
		"鹭洋",
		"黎昕",
		"诗雨",
		"婷方",
		"美方",
		"雅婷",
		"紫林",
		"天娇",
		"万佳",
		"子欣",
		"海燕",
		"乙萍",
		"安琪",
		"馨羽",
		"馥君",
		"思佳",
		"雅鑫",
		"静怡",
		"晨阳",
		"佳琪",
		"雯静",
		"榕融",
		"浩辰",
		"癸霖",
		"一全",
		"三锋",
		"义轩",
		"俊凯",
		"子豪",
		"振东",
		"智杰",
		"哲新",
		"中海",
		"超栋",
		"治涛",
		"治文",
		"文韬",
		"敬彪",
		"敬阳",
		"政君",
		"立伟",
		"呈轩"
		];
		return choice(data, this.rnd);
	}


	override string personName() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "{ value: '" ~ personLastName() ~ personFirstName();
			case 1: return "weight: 1 }";
		}
	}

	///
	override string personFemaleFirstName() {
		auto data = [
		"秀英",
		"秀兰",
		"秀珍",
		"桂英",
		"桂兰",
		"玉兰",
		"玉珍",
		"玉英",
		"玉梅",
		"凤英",
		"兰英",
		"婷婷",
		"国英",
		"国珍",
		"国华",
		"国芳",
		"国兰",
		"国秀",
		"国琴",
		"国荣",
		"国香",
		"英",
		"萍",
		"蒙",
		"红",
		"丽",
		"敏",
		"芳",
		"静",
		"霞",
		"燕",
		"娟",
		"艳",
		"娜",
		"丹",
		"玲",
		"婷",
		"珈",
		"雪",
		"倩",
		"悦",
		"颖",
		"洁",
		"慧",
		"开慧",
		"丽芬",
		"丽芳",
		"丽萍",
		"若汐",
		"一诺",
		"艺涵",
		"依诺",
		"梓涵",
		"梓晨",
		"梓馨",
		"梓萱",
		"梓妍",
		"梓玥",
		"苡沫",
		"雨桐",
		"欣怡",
		"语桐",
		"语汐",
		"雨涵",
		"雨欣",
		"诗雨",
		"婷方",
		"美方",
		"雅婷",
		"紫林",
		"天娇",
		"万佳",
		"子欣",
		"海燕",
		"乙萍",
		"安琪",
		"馨羽",
		"馥君",
		"思佳",
		"雅鑫",
		"静怡",
		"晨阳",
		"佳琪",
		"雯静",
		"榕融"
		];
		return choice(data, this.rnd);
	}

	///
	override string personBioPart() {
		auto data = [
		"活动家",
		"艺术家",
		"作家",
		"博主",
		"企业家",
		"教练",
		"发明家",
		"设计师",
		"开发者",
		"教育家",
		"工程师",
		"企业主",
		"环保主义者",
		"电影爱好者",
		"电影制片人",
		"美食家",
		"创始人",
		"朋友",
		"玩家",
		"极客",
		"毕业生",
		"创造者",
		"领导者",
		"模特",
		"脑力爱好者",
		"父母",
		"爱国者",
		"个人",
		"哲学家",
		"摄影爱好者",
		"公众演说家",
		"科学家",
		"梦想家",
		"学生",
		"老师",
		"旅行家",
		"退伍军人",
		"作者"
		];
		return choice(data, this.rnd);
	}


	override string personLastNamePattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "{ value: '" ~ personLastName();
			case 1: return "weight: 1 }";
		}
	}

	///
	override string personBioSupporter() {
		auto data = [
		"倡导者",
		"贡献者",
		"发烧友",
		"粉丝",
		"狂热者",
		"爱好者",
		"支持者"
		];
		return choice(data, this.rnd);
	}

}
