// generated by fakerjsgenerator
///
module faked.faker_ja;

import faked.base;


///
class Faker_ja : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string cellPhoneFormats() {
		static enum data = [
		"090-####-####",
		"080-####-####",
		"070-####-####"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string phoneNumberFormats() {
		static enum data = [
		"0####-#-####",
		"0###-##-####",
		"0##-###-####",
		"0#-####-####"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressStateAbbr() {
		static enum data = [
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9",
		"10",
		"11",
		"12",
		"13",
		"14",
		"15",
		"16",
		"17",
		"18",
		"19",
		"20",
		"21",
		"22",
		"23",
		"24",
		"25",
		"26",
		"27",
		"28",
		"29",
		"30",
		"31",
		"32",
		"33",
		"34",
		"35",
		"36",
		"37",
		"38",
		"39",
		"40",
		"41",
		"42",
		"43",
		"44",
		"45",
		"46",
		"47"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressState() {
		static enum data = [
		"北海道",
		"青森県",
		"岩手県",
		"宮城県",
		"秋田県",
		"山形県",
		"福島県",
		"茨城県",
		"栃木県",
		"群馬県",
		"埼玉県",
		"千葉県",
		"東京都",
		"神奈川県",
		"新潟県",
		"富山県",
		"石川県",
		"福井県",
		"山梨県",
		"長野県",
		"岐阜県",
		"静岡県",
		"愛知県",
		"三重県",
		"滋賀県",
		"京都府",
		"大阪府",
		"兵庫県",
		"奈良県",
		"和歌山県",
		"鳥取県",
		"島根県",
		"岡山県",
		"広島県",
		"山口県",
		"徳島県",
		"香川県",
		"愛媛県",
		"高知県",
		"福岡県",
		"佐賀県",
		"長崎県",
		"熊本県",
		"大分県",
		"宮崎県",
		"鹿児島県",
		"沖縄県"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCitySuffix() {
		static enum data = [
		"市",
		"区",
		"町",
		"村"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCityPrefix() {
		static enum data = [
		"北",
		"東",
		"西",
		"南",
		"新",
		"湖",
		"港"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressStreetName() {
		switch(uniform(0, 2, this.rnd)) {
			case 0:
				return format!"%s%s"(nameFirstName(), addressStreetSuffix());
			case 1:
				return format!"%s%s"(nameLastName(), addressStreetSuffix());
			default: assert(false);
		}
	}

	///
	override string addressCity() {
		switch(uniform(0, 4, this.rnd)) {
			case 0:
				return format!"%s%s%s"(addressCityPrefix(), nameFirstName(), addressCitySuffix());
			case 1:
				return format!"%s%s"(nameFirstName(), addressCitySuffix());
			case 2:
				return format!"%s%s%s"(addressCityPrefix(), nameLastName(), addressCitySuffix());
			case 3:
				return format!"%s%s"(nameLastName(), addressCitySuffix());
			default: assert(false);
		}
	}

	///
	override string addressPostcode() {
		static enum data = [
		"###-####"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string nameLastName() {
		static enum data = [
		"佐藤",
		"鈴木",
		"高橋",
		"田中",
		"渡辺",
		"伊藤",
		"山本",
		"中村",
		"小林",
		"加藤",
		"吉田",
		"山田",
		"佐々木",
		"山口",
		"斎藤",
		"松本",
		"井上",
		"木村",
		"林",
		"清水"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameFirstName() {
		static enum data = [
		"大翔",
		"蓮",
		"颯太",
		"樹",
		"大和",
		"陽翔",
		"陸斗",
		"太一",
		"海翔",
		"蒼空",
		"翼",
		"陽菜",
		"結愛",
		"結衣",
		"杏",
		"莉子",
		"美羽",
		"結菜",
		"心愛",
		"愛菜",
		"美咲"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameName() {
		return format!"%s %s"(nameLastName(), nameFirstName());
	}

}
