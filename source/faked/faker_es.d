// generated by fakerjsgenerator
///
module faked.faker_es;

import faked.base;


///
class Faker_es : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string locationCityName() {
		auto data = [
		"Parla",
		"Telde",
		"Baracaldo",
		"San Fernando",
		"Torrevieja",
		"Lugo",
		"Santiago de Compostela",
		"Gerona",
		"Cáceres",
		"Lorca",
		"Coslada",
		"Talavera de la Reina",
		"El Puerto de Santa María",
		"Cornellá de Llobregat",
		"Avilés",
		"Palencia",
		"Gecho",
		"Orihuela",
		"Pontevedra",
		"Pozuelo de Alarcón",
		"Toledo",
		"El Ejido",
		"Guadalajara",
		"Gandía",
		"Ceuta",
		"Ferrol",
		"Chiclana de la Frontera",
		"Manresa",
		"Roquetas de Mar",
		"Ciudad Real",
		"Rubí",
		"Benidorm",
		"San Sebastían de los Reyes",
		"Ponferrada",
		"Zamora",
		"Alcalá de Guadaira",
		"Fuengirola",
		"Mijas",
		"Sanlúcar de Barrameda",
		"La Línea de la Concepción",
		"Majadahonda",
		"Sagunto",
		"El Prat de LLobregat",
		"Viladecans",
		"Linares",
		"Alcoy",
		"Irún",
		"Estepona",
		"Torremolinos",
		"Rivas-Vaciamadrid",
		"Molina de Segura",
		"Paterna",
		"Granollers",
		"Santa Lucía de Tirajana",
		"Motril",
		"Cerdañola del Vallés",
		"Arrecife",
		"Segovia",
		"Torrelavega",
		"Elda",
		"Mérida",
		"Ávila",
		"Valdemoro",
		"Cuenta",
		"Collado Villalba",
		"Benalmádena",
		"Mollet del Vallés",
		"Puertollano",
		"Madrid",
		"Barcelona",
		"Valencia",
		"Sevilla",
		"Zaragoza",
		"Málaga",
		"Murcia",
		"Palma de Mallorca",
		"Las Palmas de Gran Canaria",
		"Bilbao",
		"Córdoba",
		"Alicante",
		"Valladolid",
		"Vigo",
		"Gijón",
		"Hospitalet de LLobregat",
		"La Coruña",
		"Granada",
		"Vitoria",
		"Elche",
		"Santa Cruz de Tenerife",
		"Oviedo",
		"Badalona",
		"Cartagena",
		"Móstoles",
		"Jerez de la Frontera",
		"Tarrasa",
		"Sabadell",
		"Alcalá de Henares",
		"Pamplona",
		"Fuenlabrada",
		"Almería",
		"San Sebastián",
		"Leganés",
		"Santander",
		"Burgos",
		"Castellón de la Plana",
		"Alcorcón",
		"Albacete",
		"Getafe",
		"Salamanca",
		"Huelva",
		"Logroño",
		"Badajoz",
		"San Cristróbal de la Laguna",
		"León",
		"Tarragona",
		"Cádiz",
		"Lérida",
		"Marbella",
		"Mataró",
		"Dos Hermanas",
		"Santa Coloma de Gramanet",
		"Jaén",
		"Algeciras",
		"Torrejón de Ardoz",
		"Orense",
		"Alcobendas",
		"Reus",
		"Calahorra",
		"Inca",
		"Aýna"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationStateAbbr() {
		auto data = [
		"And",
		"Ara",
		"Ast",
		"Bal",
		"Can",
		"Cbr",
		"Man",
		"Leo",
		"Cat",
		"Com",
		"Ext",
		"Gal",
		"Rio",
		"Mad",
		"Nav",
		"Vas",
		"Mur"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationState() {
		auto data = [
		"Andalucía",
		"Aragón",
		"Principado de Asturias",
		"Baleares",
		"Canarias",
		"Cantabria",
		"Castilla-La Mancha",
		"Castilla y León",
		"Cataluña",
		"Comunidad Valenciana",
		"Extremadura",
		"Galicia",
		"La Rioja",
		"Comunidad de Madrid",
		"Navarra",
		"País Vasco",
		"Región de Murcia"
		];
		return choice(data, this.rnd);
	}


	override string locationStreetPattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return locationStreetSuffix() ~ " " ~ personFirstName();
			case 1: return locationStreetSuffix() ~ " " ~ personFirstName() ~ " " ~ personLastName();
		}
	}


	override string locationStreetAddress() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "normal: '" ~ locationStreet() ~ locationBuildingNumber();
			case 1: return "full: '" ~ locationStreet() ~ locationBuildingNumber() ~ " " ~ locationSecondaryAddress();
		}
	}

	///
	override string locationDefaultCountry() {
		auto data = [
		"España'"
		];
		return choice(data, this.rnd);
	}


	override string locationCityPattern() {
		final switch(uniform(0, 1, this.rnd)) {
			case 0: return locationCityName() ~ "'";
		}
	}

	///
	override string locationCountry() {
		auto data = [
		"Afganistán",
		"Albania",
		"Argelia",
		"Andorra",
		"Angola",
		"Argentina",
		"Armenia",
		"Aruba",
		"Australia",
		"Austria",
		"Azerbayán",
		"Bahamas",
		"Barein",
		"Bangladesh",
		"Barbados",
		"Bielorusia",
		"Bélgica",
		"Belice",
		"Bermuda",
		"Bután",
		"Bolivia",
		"Bosnia Herzegovina",
		"Botswana",
		"Brasil",
		"Bulgaria",
		"Burkina Faso",
		"Burundi",
		"Camboya",
		"Camerún",
		"Canada",
		"Cabo Verde",
		"Islas Caimán",
		"Chad",
		"Chile",
		"China",
		"Isla de Navidad",
		"Colombia",
		"Comodos",
		"Congo",
		"Costa Rica",
		"Costa de Marfil",
		"Croacia",
		"Cuba",
		"Chipre",
		"República Checa",
		"Dinamarca",
		"Dominica",
		"República Dominicana",
		"Ecuador",
		"Egipto",
		"El Salvador",
		"Guinea Ecuatorial",
		"Eritrea",
		"Estonia",
		"Etiopía",
		"Islas Faro",
		"Fiji",
		"Finlandia",
		"Francia",
		"Gabón",
		"Gambia",
		"Georgia",
		"Alemania",
		"Ghana",
		"Grecia",
		"Groenlandia",
		"Granada",
		"Guadalupe",
		"Guam",
		"Guatemala",
		"Guinea",
		"Guinea-Bisau",
		"Guayana",
		"Haiti",
		"Honduras",
		"Hong Kong",
		"Hungria",
		"Islandia",
		"India",
		"Indonesia",
		"Iran",
		"Irak",
		"Irlanda",
		"Italia",
		"Jamaica",
		"Japón",
		"Jordania",
		"Kazajistan",
		"Kenia",
		"Kiribati",
		"Corea",
		"Kuwait",
		"Letonia",
		"Líbano",
		"Liberia",
		"Liechtenstein",
		"Lituania",
		"Luxemburgo",
		"Macao",
		"Macedonia",
		"Madagascar",
		"Malawi",
		"Malasia",
		"Maldivas",
		"Mali",
		"Malta",
		"Martinica",
		"Mauritania",
		"Méjico",
		"Micronesia",
		"Moldavia",
		"Mónaco",
		"Mongolia",
		"Montenegro",
		"Montserrat",
		"Marruecos",
		"Mozambique",
		"Namibia",
		"Nauru",
		"Nepal",
		"Países Bajos",
		"Nueva Zelanda",
		"Nicaragua",
		"Niger",
		"Nigeria",
		"Noruega",
		"Omán",
		"Pakistan",
		"Panamá",
		"Papúa Nueva Guinea",
		"Paraguay",
		"Perú",
		"Filipinas",
		"Poland",
		"Portugal",
		"Puerto Rico",
		"Rusia",
		"Ruanda",
		"Samoa",
		"San Marino",
		"Santo Tomé y Principe",
		"Arabia Saudí",
		"Senegal",
		"Serbia",
		"Seychelles",
		"Sierra Leona",
		"Singapur",
		"Eslovaquia",
		"Eslovenia",
		"Somalia",
		"España",
		"Sri Lanka",
		"Sudán",
		"Suriname",
		"Suecia",
		"Suiza",
		"Siria",
		"Taiwan",
		"Tajikistan",
		"Tanzania",
		"Tailandia",
		"Timor-Leste",
		"Togo",
		"Tonga",
		"Trinidad y Tobago",
		"Tunez",
		"Turquia",
		"Uganda",
		"Ucrania",
		"Emiratos Árabes Unidos",
		"Reino Unido",
		"Estados Unidos de América",
		"Uruguay",
		"Uzbekistan",
		"Vanuatu",
		"Venezuela",
		"Vietnam",
		"Yemen",
		"Zambia",
		"Zimbabwe"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationCounty() {
		auto data = [
		"Álava",
		"Albacete",
		"Alicante",
		"Almería",
		"Asturias",
		"Ávila",
		"Badajoz",
		"Barcelona",
		"Burgos",
		"Cantabria",
		"Castellón",
		"Ciudad Real",
		"Cuenca",
		"Cáceres",
		"Cádiz",
		"Córdoba",
		"Gerona",
		"Granada",
		"Guadalajara",
		"Guipúzcoa",
		"Huelva",
		"Huesca",
		"Islas Baleares",
		"Jaén",
		"La Coruña",
		"La Rioja",
		"Las Palmas",
		"León",
		"Lugo",
		"lérida",
		"Madrid",
		"Murcia",
		"Málaga",
		"Navarra",
		"Orense",
		"Palencia",
		"Pontevedra",
		"Salamanca",
		"Santa Cruz de Tenerife",
		"Segovia",
		"Sevilla",
		"Soria",
		"Tarragona",
		"Teruel",
		"Toledo",
		"Valencia",
		"Valladolid",
		"Vizcaya",
		"Zamora",
		"Zaragoza"
		];
		return choice(data, this.rnd);
	}


	override string locationBuildingNumber() {
		final switch(uniform(0, 5, this.rnd)) {
			case 0: return " s/n.";
			case 1: return "#";
			case 2: return "##";
			case 3: return " #";
			case 4: return "##'";
		}
	}

	///
	override string locationSecondaryAddress() {
		auto data = [
		"Esc. ###",
		"Puerta ###'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationPostcode() {
		auto data = [
		"#####'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationStreetSuffix() {
		auto data = [
		"Aldea",
		"Apartamento",
		"Arrabal",
		"Arroyo",
		"Avenida",
		"Bajada",
		"Barranco",
		"Barrio",
		"Bloque",
		"Calle",
		"Calleja",
		"Camino",
		"Carretera",
		"Caserio",
		"Colegio",
		"Colonia",
		"Conjunto",
		"Cuesta",
		"Chalet",
		"Edificio",
		"Entrada",
		"Escalinata",
		"Explanada",
		"Extramuros",
		"Extrarradio",
		"Ferrocarril",
		"Glorieta",
		"Gran Subida",
		"Grupo",
		"Huerta",
		"Jardines",
		"Lado",
		"Lugar",
		"Manzana",
		"Masía",
		"Mercado",
		"Monte",
		"Muelle",
		"Municipio",
		"Parcela",
		"Parque",
		"Partida",
		"Pasaje",
		"Paseo",
		"Plaza",
		"Poblado",
		"Polígono",
		"Prolongación",
		"Puente",
		"Puerta",
		"Quinta",
		"Ramal",
		"Rambla",
		"Rampa",
		"Riera",
		"Rincón",
		"Ronda",
		"Rua",
		"Salida",
		"Sector",
		"Sección",
		"Senda",
		"Solar",
		"Subida",
		"Terrenos",
		"Torrente",
		"Travesía",
		"Urbanización",
		"Vía",
		"Vía Pública"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyAdjective() {
		auto data = [
		"Adaptativo",
		"Avanzado",
		"Asimilado",
		"Automatizado",
		"Equilibrado",
		"Centrado en el negocio",
		"Centralizado",
		"Clonado",
		"Compatible",
		"Configurable",
		"Multi grupo",
		"Multi plataforma",
		"Centrado en el usuario",
		"Descentralizado",
		"Digitalizado",
		"Distribuido",
		"Diverso",
		"Reducido",
		"Mejorado",
		"Para toda la empresa",
		"Ergonómico",
		"Exclusivo",
		"Expandido",
		"Extendido",
		"Cara a cara",
		"Enfocado",
		"Totalmente configurable",
		"Fundamental",
		"Orígenes",
		"Horizontal",
		"Implementado",
		"Innovador",
		"Integrado",
		"Intuitivo",
		"Inverso",
		"Gestionado",
		"Obligatorio",
		"Monitorizado",
		"Multi canal",
		"Multi lateral",
		"Multi capa",
		"En red",
		"Orientado a objetos",
		"Open-source",
		"Operativo",
		"Optimizado",
		"Opcional",
		"Orgánico",
		"Organizado",
		"Perseverando",
		"Persistente",
		"en fases",
		"Polarizado",
		"Pre-emptivo",
		"Proactivo",
		"Enfocado a benficios",
		"Profundo",
		"Programable",
		"Progresivo",
		"Public-key",
		"Enfocado en la calidad",
		"Reactivo",
		"Realineado",
		"Re-contextualizado",
		"Re-implementado",
		"Ingeniería inversa",
		"Robusto",
		"Fácil",
		"Seguro",
		"Auto proporciona",
		"Compartible",
		"Intercambiable",
		"Sincronizado",
		"Orientado a equipos",
		"Total",
		"Universal",
		"Actualizable",
		"Amigable",
		"Versatil",
		"Virtual",
		"Visionario"
		];
		return choice(data, this.rnd);
	}

	///
	override string companySuffix() {
		auto data = [
		"S.L.",
		"e Hijos",
		"S.A.",
		"Hermanos'"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyDescriptor() {
		auto data = [
		"24 horas",
		"24/7",
		"3rd generación",
		"4th generación",
		"5th generación",
		"6th generación",
		"analizada",
		"asimétrica",
		"asíncrona",
		"monitorizada por red",
		"bidireccional",
		"bifurcada",
		"generada por el cliente",
		"cliente servidor",
		"coherente",
		"cohesiva",
		"compuesto",
		"sensible al contexto",
		"basado en el contexto",
		"basado en contenido",
		"dedicada",
		"generado por la demanda",
		"didactica",
		"direccional",
		"discreta",
		"dinámica",
		"potenciada",
		"acompasada",
		"ejecutiva",
		"explícita",
		"tolerante a fallos",
		"innovadora",
		"amplio ábanico",
		"global",
		"heurística",
		"alto nivel",
		"holística",
		"homogénea",
		"hibrida",
		"incremental",
		"intangible",
		"interactiva",
		"intermedia",
		"local",
		"logística",
		"maximizada",
		"metódica",
		"misión crítica",
		"móbil",
		"modular",
		"motivadora",
		"multimedia",
		"multiestado",
		"multitarea",
		"nacional",
		"basado en necesidades",
		"neutral",
		"nueva generación",
		"no-volátil",
		"orientado a objetos",
		"óptima",
		"optimizada",
		"radical",
		"tiempo real",
		"recíproca",
		"regional",
		"escalable",
		"secundaria",
		"orientada a soluciones",
		"estable",
		"estatica",
		"sistemática",
		"sistémica",
		"tangible",
		"terciaria",
		"transicional",
		"uniforme",
		"valor añadido",
		"vía web",
		"defectos cero",
		"tolerancia cero"
		];
		return choice(data, this.rnd);
	}


	override string companyNamePattern() {
		final switch(uniform(0, 5, this.rnd)) {
			case 0: return personLastName() ~ " " ~ companySuffix();
			case 1: return personLastName() ~ " y " ~ personLastName();
			case 2: return personLastName() ~ " " ~ personLastName() ~ " " ~ companySuffix();
			case 3: return personLastName();
			case 4: return personLastName() ~ " y " ~ personLastName() ~ " Asociados";
		}
	}

	///
	override string companyNoun() {
		auto data = [
		"habilidad",
		"acceso",
		"adaptador",
		"algoritmo",
		"alianza",
		"analista",
		"aplicación",
		"enfoque",
		"arquitectura",
		"archivo",
		"inteligencia artificial",
		"array",
		"actitud",
		"medición",
		"gestión presupuestaria",
		"capacidad",
		"desafío",
		"circuito",
		"colaboración",
		"complejidad",
		"concepto",
		"conglomeración",
		"contingencia",
		"núcleo",
		"fidelidad",
		"base de datos",
		"data-warehouse",
		"definición",
		"emulación",
		"codificar",
		"encriptar",
		"extranet",
		"firmware",
		"flexibilidad",
		"focus group",
		"previsión",
		"base de trabajo",
		"función",
		"funcionalidad",
		"Interfaz Gráfica",
		"groupware",
		"Interfaz gráfico de usuario",
		"hardware",
		"Soporte",
		"jerarquía",
		"conjunto",
		"implementación",
		"infraestructura",
		"iniciativa",
		"instalación",
		"conjunto de instrucciones",
		"interfaz",
		"intranet",
		"base del conocimiento",
		"red de area local",
		"aprovechar",
		"matrices",
		"metodologías",
		"middleware",
		"migración",
		"modelo",
		"moderador",
		"monitorizar",
		"arquitectura abierta",
		"sistema abierto",
		"orquestar",
		"paradigma",
		"paralelismo",
		"política",
		"portal",
		"estructura de precios",
		"proceso de mejora",
		"producto",
		"productividad",
		"proyecto",
		"proyección",
		"protocolo",
		"línea segura",
		"software",
		"solución",
		"estandardización",
		"estrategia",
		"estructura",
		"éxito",
		"superestructura",
		"soporte",
		"sinergia",
		"mediante",
		"marco de tiempo",
		"caja de herramientas",
		"utilización",
		"website",
		"fuerza de trabajo"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceDepartment() {
		auto data = [
		"Librería",
		"Deportes",
		"Videojuegos",
		"Electrónica",
		"Moda",
		"Joyería",
		"Marroquinería",
		"Juguetería",
		"Mascotas",
		"Bebes",
		"Bricolaje",
		"Informática",
		"Salud",
		"Parafarmacia",
		"Papelería",
		"Cine",
		"Música",
		"Hogar",
		"Decoración"
		];
		return choice(data, this.rnd);
	}

	///
	override string colorHuman() {
		auto data = [
		"Rojo",
		"Azul",
		"Negro",
		"Gris",
		"Blanco",
		"Amarillo",
		"Verde",
		"Morado",
		"Violeta"
		];
		return choice(data, this.rnd);
	}


	override string dateWeekday() {
		final switch(uniform(0, 25, this.rnd)) {
			case 0: return "wide: [";
			case 1: return "domingo";
			case 2: return "lunes";
			case 3: return "martes";
			case 4: return "miércoles";
			case 5: return "jueves";
			case 6: return "viernes";
			case 7: return "sábado";
			case 8: return "]";
			case 9: return "abbr: ['dom";
			case 10: return "lun";
			case 11: return "mar";
			case 12: return "mié";
			case 13: return "jue";
			case 14: return "vie";
			case 15: return "sáb']";
			case 16: return "if not set then \"abbr\" will be used instead";
			case 17: return "which may differ from a stand-alone word";
			case 18: return "abbr_context: ['dom.";
			case 19: return "lun.";
			case 20: return "mart.";
			case 21: return "miérc.";
			case 22: return "juev.";
			case 23: return "vier.";
			case 24: return "sáb.']";
		}
	}


	override string dateMonth() {
		final switch(uniform(0, 44, this.rnd)) {
			case 0: return "wide: [";
			case 1: return "enero";
			case 2: return "febrero";
			case 3: return "marzo";
			case 4: return "abril";
			case 5: return "mayo";
			case 6: return "junio";
			case 7: return "julio";
			case 8: return "agosto";
			case 9: return "septiembre";
			case 10: return "octubre";
			case 11: return "noviembre";
			case 12: return "diciembre";
			case 13: return "]";
			case 14: return "abbr: [";
			case 15: return "ene";
			case 16: return "feb";
			case 17: return "mar";
			case 18: return "abr";
			case 19: return "may";
			case 20: return "jun";
			case 21: return "jul";
			case 22: return "ago";
			case 23: return "sep";
			case 24: return "oct";
			case 25: return "nov";
			case 26: return "dic";
			case 27: return "]";
			case 28: return "if not set then \"abbr\" will be used instead";
			case 29: return "which may differ from a stand-alone word";
			case 30: return "abbr_context: [";
			case 31: return "en.";
			case 32: return "febr.";
			case 33: return "mzo.";
			case 34: return "abr.";
			case 35: return "my.";
			case 36: return "jun.";
			case 37: return "jul.";
			case 38: return "ag.";
			case 39: return "sept.";
			case 40: return "oct.";
			case 41: return "nov.";
			case 42: return "dic.";
			case 43: return "]";
		}
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"9##-###-###",
		"9##.###.###",
		"9## ### ###",
		"9########'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string cellPhoneFormats() {
		auto data = [
		"6##-###-###",
		"6##.###.###",
		"6## ### ###",
		"6########'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string internetFreeEmail() {
		auto data = [
		"gmail.com",
		"yahoo.com",
		"hotmail.com'"
		];
		return choice(data, this.rnd);
	}

	///
	override string internetDomainSuffix() {
		auto data = [
		"com",
		"es",
		"info",
		"com.es",
		"org",
		"eus",
		"cat'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personMalePrefix() {
		auto data = [
		"Sr.'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personFemalePrefix() {
		auto data = [
		"Sra.",
		"Sta.'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personMaleFirstName() {
		auto data = [
		"Josep",
		"Ángel",
		"Daniel",
		"Manuel",
		"Pedro",
		"Salvador",
		"Rubén",
		"Iván",
		"Miguel",
		"Jorge",
		"Sergi",
		"Ricardo",
		"Carles",
		"Jordi",
		"Pío",
		"Pablo",
		"Juan Ramón",
		"Hermenegildo"
		];
		return choice(data, this.rnd);
	}

	///
	override string personSuffix() {
		auto data = [
		"Jr.",
		"Sr.",
		"I",
		"II",
		"III",
		"IV",
		"V",
		"MD",
		"DDS",
		"PhD",
		"DVM"
		];
		return choice(data, this.rnd);
	}

	///
	override string personLastName() {
		auto data = [
		"Abeyta",
		"Abrego",
		"Abreu",
		"Acevedo",
		"Acosta",
		"Acuña",
		"Adame",
		"Adorno",
		"Agosto",
		"Aguayo",
		"Aguilar",
		"Aguilera",
		"Aguirre",
		"Alanis",
		"Alaníz",
		"Alarcón",
		"Alba",
		"Alcalá",
		"Alcántar",
		"Alcaraz",
		"Alejandro",
		"Alemán",
		"Alfaro",
		"Alicea",
		"Almanza",
		"Almaráz",
		"Almonte",
		"Alonso",
		"Alonzo",
		"Altamirano",
		"Alva",
		"Alvarado",
		"Álvarez",
		"Amador",
		"Amaya",
		"Anaya",
		"Anguiano",
		"Angulo",
		"Aparicio",
		"Apodaca",
		"Aponte",
		"Aragón",
		"Araña",
		"Aranda",
		"Arce",
		"Archuleta",
		"Arellano",
		"Arenas",
		"Arevalo",
		"Argüello",
		"Arias",
		"Armas",
		"Armendáriz",
		"Armenta",
		"Armijo",
		"Arredondo",
		"Arreola",
		"Arriaga",
		"Arroyo",
		"Arteaga",
		"Atencio",
		"Ávalos",
		"Ávila",
		"Avilés",
		"Ayala",
		"Baca",
		"Badillo",
		"Báez",
		"Baeza",
		"Bahena",
		"Balderas",
		"Ballesteros",
		"Banda",
		"Bañuelos",
		"Barajas",
		"Barela",
		"Barragán",
		"Barraza",
		"Barrera",
		"Barreto",
		"Barrientos",
		"Barrios",
		"Batista",
		"Becerra",
		"Beltrán",
		"Benavides",
		"Benavídez",
		"Benítez",
		"Bermúdez",
		"Bernal",
		"Berríos",
		"Betancourt",
		"Blanco",
		"Bonilla",
		"Borrego",
		"Botello",
		"Bravo",
		"Briones",
		"Briseño",
		"Brito",
		"Bueno",
		"Burgos",
		"Bustamante",
		"Bustos",
		"Caballero",
		"Cabán",
		"Cabrera",
		"Cadena",
		"Caldera",
		"Calderón",
		"Calvillo",
		"Camacho",
		"Camarillo",
		"Campos",
		"Canales",
		"Candelaria",
		"Cano",
		"Cantú",
		"Caraballo",
		"Carbajal",
		"Cárdenas",
		"Cardona",
		"Carmona",
		"Carranza",
		"Carrasco",
		"Carrasquillo",
		"Carreón",
		"Carrera",
		"Carrero",
		"Carrillo",
		"Carrión",
		"Carvajal",
		"Casanova",
		"Casares",
		"Casarez",
		"Casas",
		"Casillas",
		"Castañeda",
		"Castellanos",
		"Castillo",
		"Castro",
		"Cavazos",
		"Cazares",
		"Ceballos",
		"Cedillo",
		"Ceja",
		"Centeno",
		"Cepeda",
		"Cerda",
		"Cervantes",
		"Cervántez",
		"Chacón",
		"Chapa",
		"Chavarría",
		"Chávez",
		"Cintrón",
		"Cisneros",
		"Collado",
		"Collazo",
		"Colón",
		"Colunga",
		"Concepción",
		"Contreras",
		"Cordero",
		"Córdova",
		"Cornejo",
		"Corona",
		"Coronado",
		"Corral",
		"Corrales",
		"Correa",
		"Cortés",
		"Cortéz",
		"Cotto",
		"Covarrubias",
		"Crespo",
		"Cruz",
		"Cuellar",
		"Curiel",
		"Dávila",
		"de Anda",
		"de Jesús",
		"Delacrúz",
		"Delafuente",
		"Delagarza",
		"Delao",
		"Delapaz",
		"Delarosa",
		"Delatorre",
		"Deleón",
		"Delgadillo",
		"Delgado",
		"Delrío",
		"Delvalle",
		"Díaz",
		"Domínguez",
		"Duarte",
		"Dueñas",
		"Durán",
		"Echevarría",
		"Elizondo",
		"Enríquez",
		"Escalante",
		"Escamilla",
		"Escobar",
		"Escobedo",
		"Esparza",
		"Espinal",
		"Espino",
		"Espinosa",
		"Espinosa de los Monteros",
		"Espinoza",
		"Esquibel",
		"Esquivel",
		"Estévez",
		"Estrada",
		"Fajardo",
		"Farías",
		"Feliciano",
		"Fernández",
		"Ferrer",
		"Fierro",
		"Figueroa",
		"Flores",
		"Flórez",
		"Fonseca",
		"Frías",
		"Fuentes",
		"Gaitán",
		"Galarza",
		"Galindo",
		"Gallardo",
		"Gallegos",
		"Galván",
		"Gálvez",
		"Gamboa",
		"Gámez",
		"Gaona",
		"Garay",
		"García",
		"Garibay",
		"Garica",
		"Garrido",
		"Garza",
		"Gastélum",
		"Gaytán",
		"Gil",
		"Girón",
		"Godínez",
		"Godoy",
		"Gómez",
		"González",
		"Gracia",
		"Granado",
		"Granados",
		"Griego",
		"Grijalva",
		"Guajardo",
		"Guardado",
		"Guerra",
		"Guerrero",
		"Guevara",
		"Guillén",
		"Gurule",
		"Gutiérrez",
		"Guzmán",
		"Haro",
		"Henríquez",
		"Heredia",
		"Hernández",
		"Herrera",
		"Hidalgo",
		"Hinojosa",
		"Holguín",
		"Huerta",
		"Hurtado",
		"Ibarra",
		"Iglesias",
		"Irizarry",
		"Jaime",
		"Jaimes",
		"Jáquez",
		"Jaramillo",
		"Jasso",
		"Jiménez",
		"Juárez",
		"Jurado",
		"Laboy",
		"Lara",
		"Laureano",
		"Leal",
		"Lebrón",
		"Ledesma",
		"Leiva",
		"Lemus",
		"León",
		"Lerma",
		"Leyva",
		"Limón",
		"Linares",
		"Lira",
		"Llamas",
		"Loera",
		"Lomeli",
		"Longoria",
		"López",
		"Lovato",
		"Loya",
		"Lozada",
		"Lozano",
		"Lucero",
		"Lucio",
		"Luevano",
		"Lugo",
		"Luna",
		"Macías",
		"Madera",
		"Madrid",
		"Madrigal",
		"Maestas",
		"Magaña",
		"Malave",
		"Maldonado",
		"Manzanares",
		"Mares",
		"Marín",
		"Márquez",
		"Marrero",
		"Marroquín",
		"Martínez",
		"Mascareñas",
		"Mata",
		"Mateo",
		"Matías",
		"Matos",
		"Maya",
		"Mayorga",
		"Medina",
		"Medrano",
		"Mejía",
		"Meléndez",
		"Melgar",
		"Mena",
		"Menchaca",
		"Méndez",
		"Mendoza",
		"Menéndez",
		"Meraz",
		"Mercado",
		"Merino",
		"Mesa",
		"Meza",
		"Miramontes",
		"Miranda",
		"Mireles",
		"Mojica",
		"Molina",
		"Mondragón",
		"Monroy",
		"Montalvo",
		"Montañez",
		"Montaño",
		"Montemayor",
		"Montenegro",
		"Montero",
		"Montes",
		"Montéz",
		"Montoya",
		"Mora",
		"Morales",
		"Moreno",
		"Mota",
		"Moya",
		"Munguía",
		"Muñiz",
		"Muñoz",
		"Murillo",
		"Muro",
		"Nájera",
		"Naranjo",
		"Narváez",
		"Nava",
		"Navarrete",
		"Navarro",
		"Nazario",
		"Negrete",
		"Negrón",
		"Nevárez",
		"Nieto",
		"Nieves",
		"Niño",
		"Noriega",
		"Núñez",
		"Ocampo",
		"Ocasio",
		"Ochoa",
		"Ojeda",
		"Olivares",
		"Olivárez",
		"Olivas",
		"Olivera",
		"Olivo",
		"Olmos",
		"Olvera",
		"Ontiveros",
		"Oquendo",
		"Ordóñez",
		"Orellana",
		"Ornelas",
		"Orosco",
		"Orozco",
		"Orta",
		"Ortega",
		"Ortiz",
		"Osorio",
		"Otero",
		"Ozuna",
		"Pabón",
		"Pacheco",
		"Padilla",
		"Padrón",
		"Páez",
		"Pagan",
		"Palacios",
		"Palomino",
		"Palomo",
		"Pantoja",
		"Paredes",
		"Parra",
		"Partida",
		"Patiño",
		"Paz",
		"Pedraza",
		"Pedroza",
		"Pelayo",
		"Peña",
		"Perales",
		"Peralta",
		"Perea",
		"Pérez",
		"Pichardo",
		"Piña",
		"Pineda",
		"Pizarro",
		"Polanco",
		"Ponce",
		"Porras",
		"Portillo",
		"Posada",
		"Prado",
		"Preciado",
		"Prieto",
		"Puente",
		"Puga",
		"Pulido",
		"Quesada",
		"Quezada",
		"Quiñones",
		"Quiñónez",
		"Quintana",
		"Quintanilla",
		"Quintero",
		"Quiróz",
		"Rael",
		"Ramírez",
		"Ramos",
		"Rangel",
		"Rascón",
		"Raya",
		"Razo",
		"Regalado",
		"Rendón",
		"Rentería",
		"Reséndez",
		"Reyes",
		"Reyna",
		"Reynoso",
		"Rico",
		"Rincón",
		"Riojas",
		"Ríos",
		"Rivas",
		"Rivera",
		"Rivero",
		"Robledo",
		"Robles",
		"Rocha",
		"Rodarte",
		"Rodríguez",
		"Rojas",
		"Rojo",
		"Roldán",
		"Rolón",
		"Romero",
		"Romo",
		"Roque",
		"Rosado",
		"Rosales",
		"Rosario",
		"Rosas",
		"Roybal",
		"Rubio",
		"Ruelas",
		"Ruíz",
		"Saavedra",
		"Sáenz",
		"Saiz",
		"Salas",
		"Salazar",
		"Salcedo",
		"Salcido",
		"Saldaña",
		"Saldivar",
		"Salgado",
		"Salinas",
		"Samaniego",
		"Sanabria",
		"Sánchez",
		"Sandoval",
		"Santacruz",
		"Santana",
		"Santiago",
		"Santillán",
		"Sarabia",
		"Sauceda",
		"Saucedo",
		"Sedillo",
		"Segovia",
		"Segura",
		"Sepúlveda",
		"Serna",
		"Serrano",
		"Serrato",
		"Sevilla",
		"Sierra",
		"Sisneros",
		"Solano",
		"Solís",
		"Soliz",
		"Solorio",
		"Solorzano",
		"Soria",
		"Sosa",
		"Sotelo",
		"Soto",
		"Suárez",
		"Tafoya",
		"Tamayo",
		"Tamez",
		"Tapia",
		"Tejada",
		"Tejeda",
		"Téllez",
		"Tello",
		"Terán",
		"Terrazas",
		"Tijerina",
		"Tirado",
		"Toledo",
		"Toro",
		"Torres",
		"Tórrez",
		"Tovar",
		"Trejo",
		"Treviño",
		"Trujillo",
		"Ulibarri",
		"Ulloa",
		"Urbina",
		"Ureña",
		"Urías",
		"Uribe",
		"Urrutia",
		"Vaca",
		"Valadez",
		"Valdés",
		"Valdez",
		"Valdivia",
		"Valencia",
		"Valentín",
		"Valenzuela",
		"Valladares",
		"Valle",
		"Vallejo",
		"Valles",
		"Valverde",
		"Vanegas",
		"Varela",
		"Vargas",
		"Vázquez",
		"Vega",
		"Vela",
		"Velasco",
		"Velásquez",
		"Velázquez",
		"Vélez",
		"Véliz",
		"Venegas",
		"Vera",
		"Verdugo",
		"Verduzco",
		"Vergara",
		"Viera",
		"Vigil",
		"Villa",
		"Villagómez",
		"Villalobos",
		"Villalpando",
		"Villanueva",
		"Villarreal",
		"Villaseñor",
		"Villegas",
		"Yáñez",
		"Ybarra",
		"Zambrano",
		"Zamora",
		"Zamudio",
		"Zapata",
		"Zaragoza",
		"Zarate",
		"Zavala",
		"Zayas",
		"Zelaya",
		"Zepeda",
		"Zúñiga"
		];
		return choice(data, this.rnd);
	}

	///
	override string personFirstName() {
		auto data = [
		"Adán",
		"Agustín",
		"Alberto",
		"Alejandro",
		"Alfonso",
		"Alfredo",
		"Andrés",
		"Antonio",
		"Armando",
		"Arturo",
		"Benito",
		"Benjamín",
		"Bernardo",
		"Carlos",
		"César",
		"Claudio",
		"Clemente",
		"Cristián",
		"Cristóbal",
		"Daniel",
		"David",
		"Diego",
		"Eduardo",
		"Emilio",
		"Enrique",
		"Ernesto",
		"Esteban",
		"Federico",
		"Felipe",
		"Fernando",
		"Francisco",
		"Gabriel",
		"Gerardo",
		"Germán",
		"Gilberto",
		"Gonzalo",
		"Gregorio",
		"Guillermo",
		"Gustavo",
		"Hernán",
		"Homero",
		"Horacio",
		"Hugo",
		"Ignacio",
		"Jacobo",
		"Jaime",
		"Javier",
		"Jerónimo",
		"Jesús",
		"Joaquín",
		"Jorge",
		"Jorge Luis",
		"José",
		"José Eduardo",
		"José Emilio",
		"José Luis",
		"José María",
		"Juan",
		"Juan Carlos",
		"Julio",
		"Julio César",
		"Lorenzo",
		"Lucas",
		"Luis",
		"Luis Miguel",
		"Manuel",
		"Marco Antonio",
		"Marcos",
		"Mariano",
		"Mario",
		"Martín",
		"Mateo",
		"Miguel",
		"Miguel Ángel",
		"Nicolás",
		"Octavio",
		"Óscar",
		"Pablo",
		"Patricio",
		"Pedro",
		"Rafael",
		"Ramiro",
		"Ramón",
		"Raúl",
		"Ricardo",
		"Roberto",
		"Rodrigo",
		"Rubén",
		"Salvador",
		"Samuel",
		"Sancho",
		"Santiago",
		"Sergio",
		"Teodoro",
		"Timoteo",
		"Tomás",
		"Vicente",
		"Víctor",
		"Adela",
		"Adriana",
		"Alejandra",
		"Alicia",
		"Amalia",
		"Ana",
		"Ana Luisa",
		"Ana María",
		"Andrea",
		"Anita",
		"Ángela",
		"Antonia",
		"Ariadna",
		"Barbara",
		"Beatriz",
		"Berta",
		"Blanca",
		"Caridad",
		"Carla",
		"Carlota",
		"Carmen",
		"Carolina",
		"Catalina",
		"Cecilia",
		"Clara",
		"Claudia",
		"Concepción",
		"Conchita",
		"Cristina",
		"Daniela",
		"Débora",
		"Diana",
		"Dolores",
		"Lola",
		"Dorotea",
		"Elena",
		"Elisa",
		"Eloisa",
		"Elsa",
		"Elvira",
		"Emilia",
		"Esperanza",
		"Estela",
		"Ester",
		"Eva",
		"Florencia",
		"Francisca",
		"Gabriela",
		"Gloria",
		"Graciela",
		"Guadalupe",
		"Guillermina",
		"Inés",
		"Irene",
		"Isabel",
		"Isabela",
		"Josefina",
		"Juana",
		"Julia",
		"Laura",
		"Leonor",
		"Leticia",
		"Lilia",
		"Lorena",
		"Lourdes",
		"Lucía",
		"Luisa",
		"Luz",
		"Magdalena",
		"Manuela",
		"Marcela",
		"Margarita",
		"María",
		"María del Carmen",
		"María de los Ángeles",
		"María Cristina",
		"María Elena",
		"María Eugenia",
		"María José",
		"María Luisa",
		"María Soledad",
		"María Teresa",
		"Mariana",
		"Maricarmen",
		"Marilú",
		"Marisol",
		"Marta",
		"Mayte",
		"Mercedes",
		"Micaela",
		"Mónica",
		"Natalia",
		"Norma",
		"Olivia",
		"Patricia",
		"Pilar",
		"Ramona",
		"Raquel",
		"Rebeca",
		"Reina",
		"Rocío",
		"Rosa",
		"Rosalia",
		"Rosario",
		"Sara",
		"Silvia",
		"Sofía",
		"Soledad",
		"Sonia",
		"Susana",
		"Teresa",
		"Verónica",
		"Victoria",
		"Virginia",
		"Yolanda"
		];
		return choice(data, this.rnd);
	}


	override string personTitle() {
		final switch(uniform(0, 88, this.rnd)) {
			case 0: return "descriptor: [";
			case 1: return "Jefe";
			case 2: return "Senior";
			case 3: return "Directo";
			case 4: return "Corporativo";
			case 5: return "Dinánmico";
			case 6: return "Futuro";
			case 7: return "Producto";
			case 8: return "Nacional";
			case 9: return "Regional";
			case 10: return "Distrito";
			case 11: return "Central";
			case 12: return "Global";
			case 13: return "Cliente";
			case 14: return "Inversor";
			case 15: return "International";
			case 16: return "Heredado";
			case 17: return "Adelante";
			case 18: return "Interno";
			case 19: return "Humano";
			case 20: return "Gerente";
			case 21: return "Director";
			case 22: return "]";
			case 23: return "level: [";
			case 24: return "Soluciones";
			case 25: return "Programa";
			case 26: return "Marca";
			case 27: return "Seguridada";
			case 28: return "Investigación";
			case 29: return "Marketing";
			case 30: return "Normas";
			case 31: return "Implementación";
			case 32: return "Integración";
			case 33: return "Funcionalidad";
			case 34: return "Respuesta";
			case 35: return "Paradigma";
			case 36: return "Tácticas";
			case 37: return "Identidad";
			case 38: return "Mercados";
			case 39: return "Grupo";
			case 40: return "División";
			case 41: return "Aplicaciones";
			case 42: return "Optimización";
			case 43: return "Operaciones";
			case 44: return "Infraestructura";
			case 45: return "Intranet";
			case 46: return "Comunicaciones";
			case 47: return "Web";
			case 48: return "Calidad";
			case 49: return "Seguro";
			case 50: return "Mobilidad";
			case 51: return "Cuentas";
			case 52: return "Datos";
			case 53: return "Creativo";
			case 54: return "Configuración";
			case 55: return "Contabilidad";
			case 56: return "Interacciones";
			case 57: return "Factores";
			case 58: return "Usabilidad";
			case 59: return "Métricas";
			case 60: return "]";
			case 61: return "job: [";
			case 62: return "Supervisor";
			case 63: return "Asociado";
			case 64: return "Ejecutivo";
			case 65: return "Relacciones";
			case 66: return "Oficial";
			case 67: return "Gerente";
			case 68: return "Ingeniero";
			case 69: return "Especialista";
			case 70: return "Director";
			case 71: return "Coordinador";
			case 72: return "Administrador";
			case 73: return "Arquitecto";
			case 74: return "Analista";
			case 75: return "Diseñador";
			case 76: return "Planificador";
			case 77: return "Técnico";
			case 78: return "Funcionario";
			case 79: return "Desarrollador";
			case 80: return "Productor";
			case 81: return "Consultor";
			case 82: return "Asistente";
			case 83: return "Facilitador";
			case 84: return "Agente";
			case 85: return "Representante";
			case 86: return "Estratega";
			case 87: return "]";
		}
	}


	override string personName() {
		final switch(uniform(0, 8, this.rnd)) {
			case 0: return "{";
			case 1: return "value: '" ~ personPrefix() ~ " " ~ personFirstName() ~ " " ~ personLastName();
			case 2: return "weight: 1";
			case 3: return "}";
			case 4: return "{";
			case 5: return "value: '" ~ personFirstName() ~ " " ~ personLastName();
			case 6: return "weight: 9";
			case 7: return "}";
		}
	}

	///
	override string personFemaleFirstName() {
		auto data = [
		"Marta",
		"Andrea",
		"Ana",
		"Anni",
		"Laura",
		"Maica",
		"Lorena",
		"Matilde",
		"Jennifer",
		"Roser",
		"María de los Ángeles"
		];
		return choice(data, this.rnd);
	}


	override string personLastNamePattern() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return "{";
			case 1: return "value: '" ~ personLastName() ~ " " ~ personLastName();
			case 2: return "weight: 1";
			case 3: return "}";
		}
	}

}
