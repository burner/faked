// generated by fakerjsgenerator
///
module faked.faker_ru;

import faked.base;


///
class Faker_ru : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string loremWords() {
		static enum data = [
		"а",
		"административных",
		"активизации",
		"активности",
		"активом",
		"актуальность",
		"анализа",
		"базы",
		"богатый",
		"в",
		"важную",
		"важные",
		"влечёт",
		"внедрения",
		"воздействия",
		"всего",
		"выбранный",
		"вызывает",
		"выполнять",
		"высокотехнологичная",
		"высшего",
		"гражданского",
		"дальнейшее",
		"дальнейших",
		"демократической",
		"деятельности",
		"для",
		"другой",
		"же",
		"за",
		"забывать",
		"зависит",
		"задания",
		"задач",
		"задача",
		"занимаемых",
		"значение",
		"значимость",
		"значительной",
		"и",
		"играет",
		"идейные",
		"изменений",
		"инновационный",
		"интересный",
		"информационно-пропогандистское",
		"кадров",
		"кадровой",
		"качества",
		"качественно",
		"количественный",
		"консультация",
		"концепция",
		"кругу",
		"курс",
		"массового",
		"материально-технической",
		"место",
		"мира",
		"модели",
		"модель",
		"модернизации",
		"на",
		"намеченных",
		"нами",
		"направлений",
		"напрямую",
		"нас",
		"настолько",
		"насущным",
		"национальный",
		"начало",
		"нашей",
		"не",
		"новая",
		"новых",
		"обеспечение",
		"обеспечивает",
		"образом",
		"обуславливает",
		"обучения",
		"общества",
		"общественной",
		"обществом",
		"однако",
		"определения",
		"опыт",
		"организации",
		"организационной",
		"особенности",
		"от",
		"отметить",
		"отношении",
		"оценить",
		"очевидна",
		"плановых",
		"по",
		"повседневная",
		"повседневной",
		"повышение",
		"повышению",
		"подготовке",
		"позволяет",
		"позиции",
		"показывает",
		"понимание",
		"порядка",
		"последовательного",
		"поставленных",
		"постоянное",
		"постоянный",
		"потребностям",
		"поэтапного",
		"правительством",
		"практика",
		"предложений",
		"предпосылки",
		"представляет",
		"прежде",
		"принимаемых",
		"принципов",
		"проблем",
		"проверки",
		"прогресса",
		"прогрессивного",
		"проект",
		"профессионального",
		"процесс",
		"путь",
		"работы",
		"равным",
		"развития",
		"различных",
		"разнообразный",
		"разработке",
		"рамки",
		"реализация",
		"ресурсосберегающих",
		"роль",
		"рост",
		"с",
		"систему",
		"системы",
		"следует",
		"сложившаяся",
		"собой",
		"современного",
		"создаёт",
		"создание",
		"сознания",
		"сомнений",
		"соображения",
		"соответствующей",
		"соответствующих",
		"социально-ориентированный",
		"социально-экономическое",
		"специалистов",
		"способствует",
		"степени",
		"стороны",
		"структура",
		"структуры",
		"существующий",
		"сущности",
		"сфера",
		"также",
		"таким",
		"технологий",
		"требует",
		"укрепления",
		"управление",
		"уровня",
		"условий",
		"уточнения",
		"участия",
		"участниками",
		"финансовых",
		"форм",
		"формировании",
		"формированию",
		"формирования",
		"целесообразности",
		"что",
		"шагов",
		"широким",
		"широкому",
		"экономической",
		"эксперимент",
		"этих"
		];
		return choice(data, this.rnd);
	}

	///
	override string companySuffix() {
		static enum data = [
		"Снаб",
		"Торг",
		"Пром",
		"Трейд",
		"Сбыт"
		];
		return choice(data, this.rnd);
	}

	///
	string companyPrefix() {
		static enum data = [
		"ИП",
		"ООО",
		"ЗАО",
		"ОАО",
		"ПАО",
		"НКО",
		"ТСЖ",
		"ОП"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyName() {
		switch(uniform(0, 8, this.rnd)) {
			case 0:
				return format!"%s %s"(companyPrefix(), nameFemaleFirstName());
			case 1:
				return format!"%s %s"(companyPrefix(), nameMaleFirstName());
			case 2:
				return format!"%s %s"(companyPrefix(), nameMaleLastName());
			case 3:
				return format!"%s %s%s"(companyPrefix(), companySuffix(), companySuffix());
			case 4:
				return format!"%s %s%s%s"(companyPrefix(), companySuffix(), companySuffix(), companySuffix());
			case 5:
				return format!"%s %s%s"(companyPrefix(), addressCityName(), companySuffix());
			case 6:
				return format!"%s %s%s%s"(companyPrefix(), addressCityName(), companySuffix(), companySuffix());
			case 7:
				return format!"%s %s%s%s%s"(companyPrefix(), addressCityName(), companySuffix(), companySuffix(), companySuffix());
			default: assert(false);
		}
	}

	///
	override string hackerIngverb() {
		static enum data = [
		"резервное копирование",
		"обход",
		"архивирование",
		"взлом",
		"шифрование",
		"переопределение",
		"сжатие",
		"скачивание",
		"копирование",
		"навигация",
		"индексирование",
		"соединение",
		"генерация",
		"определение количества",
		"вычисление",
		"синтез",
		"передача",
		"программирование",
		"разбор"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerAdjective() {
		static enum data = [
		"вспомогательный",
		"основной",
		"внутренний",
		"цифровой",
		"свободно-распростроняемый",
		"виртуальный",
		"кросс-платформенный",
		"излишний",
		"онлайн",
		"сенсорный",
		"многобайтный",
		"беспроводной",
		"1080-пиксельный",
		"нейронный",
		"оптический",
		"твердотельный",
		"мобильный"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerVerb() {
		static enum data = [
		"сохранить",
		"обойти",
		"взломать",
		"переопределить",
		"сжать",
		"зашифровать",
		"импортировать",
		"экспортировать",
		"копировать",
		"навигировать",
		"индексировать",
		"соединить",
		"генерировать",
		"распарсить",
		"квантифицировать",
		"вычислить",
		"синтезировать",
		"ввести",
		"передать",
		"запрограммировать",
		"перезагрузить",
		"разобрать"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerAbbreviation() {
		static enum data = [
		"БИОС",
		"Гб",
		"ИИ",
		"ОС",
		"ОЗУ",
		"ПО",
		"СУБД",
		"ХЗ",
		"ЭВМ",
		"HTTP",
		"SDD",
		"CSS",
		"SSL",
		"AGP",
		"FTP",
		"PCI",
		"ADP",
		"RSS",
		"XML",
		"EXE",
		"COM",
		"НМЖД",
		"ПЗУ",
		"SMTP",
		"SMS",
		"USB",
		"PNG",
		"SAS",
		"JSON",
		"XSS"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerNoun() {
		static enum data = [
		"драйвер",
		"протокол",
		"ограничитель",
		"интерфейс",
		"микрочип",
		"код",
		"парсер",
		"сокет",
		"кортеж",
		"порт",
		"ключ",
		"массив",
		"интерфейс",
		"объект",
		"сенсор",
		"брандмауэр",
		"винчестер",
		"пиксель",
		"механизм сигнализации",
		"поглотитель",
		"монитор",
		"продукт",
		"передатчик",
		"блок разведения",
		"канал",
		"конденсатор",
		"оператор"
		];
		return choice(data, this.rnd);
	}

	///
	string nameFemaleMiddleName() {
		static enum data = [
		"Александровна",
		"Алексеевна",
		"Альбертовна",
		"Анатольевна",
		"Андреевна",
		"Антоновна",
		"Аркадьевна",
		"Арсеньевна",
		"Артёмовна",
		"Борисовна",
		"Вадимовна",
		"Валентиновна",
		"Валерьевна",
		"Васильевна",
		"Викторовна",
		"Витальевна",
		"Владимировна",
		"Владиславовна",
		"Вячеславовна",
		"Геннадьевна",
		"Георгиевна",
		"Германовна",
		"Григорьевна",
		"Данииловна",
		"Денисовна",
		"Дмитриевна",
		"Евгеньевна",
		"Егоровна",
		"Ивановна",
		"Игнатьевна",
		"Игоревна",
		"Ильинична",
		"Константиновна",
		"Лаврентьевна",
		"Леонидовна",
		"Макаровна",
		"Максимовна",
		"Матвеевна",
		"Михайловна",
		"Никитична",
		"Николаевна",
		"Олеговна",
		"Романовна",
		"Семёновна",
		"Сергеевна",
		"Станиславовна",
		"Степановна",
		"Фёдоровна",
		"Эдуардовна",
		"Юрьевна",
		"Ярославовна"
		];
		return choice(data, this.rnd);
	}

	///
	string nameMaleMiddleName() {
		static enum data = [
		"Александрович",
		"Алексеевич",
		"Альбертович",
		"Анатольевич",
		"Андреевич",
		"Антонович",
		"Аркадьевич",
		"Арсеньевич",
		"Артёмович",
		"Борисович",
		"Вадимович",
		"Валентинович",
		"Валерьевич",
		"Васильевич",
		"Викторович",
		"Витальевич",
		"Владимирович",
		"Владиславович",
		"Вячеславович",
		"Геннадьевич",
		"Георгиевич",
		"Германович",
		"Григорьевич",
		"Даниилович",
		"Денисович",
		"Дмитриевич",
		"Евгеньевич",
		"Егорович",
		"Иванович",
		"Игнатьевич",
		"Игоревич",
		"Ильич",
		"Константинович",
		"Лаврентьевич",
		"Леонидович",
		"Лукич",
		"Макарович",
		"Максимович",
		"Матвеевич",
		"Михайлович",
		"Никитич",
		"Николаевич",
		"Олегович",
		"Романович",
		"Семёнович",
		"Сергеевич",
		"Станиславович",
		"Степанович",
		"Фёдорович",
		"Эдуардович",
		"Юрьевич",
		"Ярославович"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameMaleFirstName() {
		static enum data = [
		"Александр",
		"Алексей",
		"Альберт",
		"Анатолий",
		"Андрей",
		"Антон",
		"Аркадий",
		"Арсений",
		"Артём",
		"Борис",
		"Вадим",
		"Валентин",
		"Валерий",
		"Василий",
		"Виктор",
		"Виталий",
		"Владимир",
		"Владислав",
		"Вячеслав",
		"Геннадий",
		"Георгий",
		"Герман",
		"Григорий",
		"Даниил",
		"Денис",
		"Дмитрий",
		"Евгений",
		"Егор",
		"Иван",
		"Игнатий",
		"Игорь",
		"Илья",
		"Константин",
		"Лаврентий",
		"Леонид",
		"Лука",
		"Макар",
		"Максим",
		"Матвей",
		"Михаил",
		"Никита",
		"Николай",
		"Олег",
		"Роман",
		"Семён",
		"Сергей",
		"Станислав",
		"Степан",
		"Фёдор",
		"Эдуард",
		"Юрий",
		"Ярослав"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameTitleDescriptor() {
		static enum data = [
		"Ведущий",
		"Генеральный",
		"Главный",
		"Глобальный",
		"Международный",
		"Национальный",
		"Областной",
		"Районный",
		"Региональный",
		"Центральный"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameTitleJob() {
		static enum data = [
		"агент",
		"администратор",
		"аналитик",
		"архитектор",
		"дизайнер",
		"инженер",
		"консультант",
		"координатор",
		"менеджер",
		"планировщик",
		"помощник",
		"разработчик",
		"руководитель",
		"сотрудник",
		"специалист",
		"техник"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameTitleLevel() {
		static enum data = [
		"интеграционный",
		"логистический",
		"маркетинговый",
		"оптимизационный",
		"страховой",
		"функциональный",
		"коммуникационный",
		"операционный"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameFemaleFirstName() {
		static enum data = [
		"Анна",
		"Алёна",
		"Алевтина",
		"Александра",
		"Алина",
		"Алла",
		"Анастасия",
		"Ангелина",
		"Анжела",
		"Анжелика",
		"Антонида",
		"Антонина",
		"Анфиса",
		"Арина",
		"Валентина",
		"Валерия",
		"Варвара",
		"Василиса",
		"Вера",
		"Вероника",
		"Виктория",
		"Галина",
		"Дарья",
		"Евгения",
		"Екатерина",
		"Елена",
		"Елизавета",
		"Жанна",
		"Зинаида",
		"Зоя",
		"Ирина",
		"Кира",
		"Клавдия",
		"Ксения",
		"Лариса",
		"Лидия",
		"Любовь",
		"Людмила",
		"Маргарита",
		"Марина",
		"Мария",
		"Надежда",
		"Наталья",
		"Нина",
		"Оксана",
		"Ольга",
		"Раиса",
		"Регина",
		"Римма",
		"Светлана",
		"София",
		"Таисия",
		"Тамара",
		"Татьяна",
		"Ульяна",
		"Юлия"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameName() {
		switch(uniform(0, 8, this.rnd)) {
			case 0:
				return format!"%s %s"(nameMaleFirstName(), nameMaleLastName());
			case 1:
				return format!"%s %s"(nameMaleLastName(), nameMaleFirstName());
			case 2:
				return format!"%s %s %s"(nameMaleFirstName(), nameMaleMiddleName(), nameMaleLastName());
			case 3:
				return format!"%s %s %s"(nameMaleLastName(), nameMaleFirstName(), nameMaleMiddleName());
			case 4:
				return format!"%s %s"(nameFemaleFirstName(), nameFemaleLastName());
			case 5:
				return format!"%s %s"(nameFemaleLastName(), nameFemaleFirstName());
			case 6:
				return format!"%s %s %s"(nameFemaleFirstName(), nameFemaleMiddleName(), nameFemaleLastName());
			case 7:
				return format!"%s %s %s"(nameFemaleLastName(), nameFemaleFirstName(), nameFemaleMiddleName());
			default: assert(false);
		}
	}

	///
	string nameMaleLastName() {
		static enum data = [
		"Смирнов",
		"Иванов",
		"Кузнецов",
		"Попов",
		"Соколов",
		"Лебедев",
		"Козлов",
		"Новиков",
		"Морозов",
		"Петров",
		"Волков",
		"Соловьев",
		"Васильев",
		"Зайцев",
		"Павлов",
		"Семенов",
		"Голубев",
		"Виноградов",
		"Богданов",
		"Воробьев",
		"Федоров",
		"Михайлов",
		"Беляев",
		"Тарасов",
		"Белов",
		"Комаров",
		"Орлов",
		"Киселев",
		"Макаров",
		"Андреев",
		"Ковалев",
		"Ильин",
		"Гусев",
		"Титов",
		"Кузьмин",
		"Кудрявцев",
		"Баранов",
		"Куликов",
		"Алексеев",
		"Степанов",
		"Яковлев",
		"Сорокин",
		"Сергеев",
		"Романов",
		"Захаров",
		"Борисов",
		"Королев",
		"Герасимов",
		"Пономарев",
		"Григорьев",
		"Лазарев",
		"Медведев",
		"Ершов",
		"Никитин",
		"Соболев",
		"Рябов",
		"Поляков",
		"Цветков",
		"Данилов",
		"Жуков",
		"Фролов",
		"Журавлев",
		"Николаев",
		"Крылов",
		"Максимов",
		"Сидоров",
		"Осипов",
		"Белоусов",
		"Федотов",
		"Дорофеев",
		"Егоров",
		"Матвеев",
		"Бобров",
		"Дмитриев",
		"Калинин",
		"Анисимов",
		"Петухов",
		"Антонов",
		"Тимофеев",
		"Никифоров",
		"Веселов",
		"Филиппов",
		"Марков",
		"Большаков",
		"Суханов",
		"Миронов",
		"Ширяев",
		"Александров",
		"Коновалов",
		"Шестаков",
		"Казаков",
		"Ефимов",
		"Денисов",
		"Громов",
		"Фомин",
		"Давыдов",
		"Мельников",
		"Щербаков",
		"Блинов",
		"Колесников",
		"Карпов",
		"Афанасьев",
		"Власов",
		"Маслов",
		"Исаков",
		"Тихонов",
		"Аксенов",
		"Гаврилов",
		"Родионов",
		"Котов",
		"Горбунов",
		"Кудряшов",
		"Быков",
		"Зуев",
		"Третьяков",
		"Савельев",
		"Панов",
		"Рыбаков",
		"Суворов",
		"Абрамов",
		"Воронов",
		"Мухин",
		"Архипов",
		"Трофимов",
		"Мартынов",
		"Емельянов",
		"Горшков",
		"Чернов",
		"Овчинников",
		"Селезнев",
		"Панфилов",
		"Копылов",
		"Михеев",
		"Галкин",
		"Назаров",
		"Лобанов",
		"Лукин",
		"Беляков",
		"Потапов",
		"Некрасов",
		"Хохлов",
		"Жданов",
		"Наумов",
		"Шилов",
		"Воронцов",
		"Ермаков",
		"Дроздов",
		"Игнатьев",
		"Савин",
		"Логинов",
		"Сафонов",
		"Капустин",
		"Кириллов",
		"Моисеев",
		"Елисеев",
		"Кошелев",
		"Костин",
		"Горбачев",
		"Орехов",
		"Ефремов",
		"Исаев",
		"Евдокимов",
		"Калашников",
		"Кабанов",
		"Носков",
		"Юдин",
		"Кулагин",
		"Лапин",
		"Прохоров",
		"Нестеров",
		"Харитонов",
		"Агафонов",
		"Муравьев",
		"Ларионов",
		"Федосеев",
		"Зимин",
		"Пахомов",
		"Шубин",
		"Игнатов",
		"Филатов",
		"Крюков",
		"Рогов",
		"Кулаков",
		"Терентьев",
		"Молчанов",
		"Владимиров",
		"Артемьев",
		"Гурьев",
		"Зиновьев",
		"Гришин",
		"Кононов",
		"Дементьев",
		"Ситников",
		"Симонов",
		"Мишин",
		"Фадеев",
		"Комиссаров",
		"Мамонтов",
		"Носов",
		"Гуляев",
		"Шаров",
		"Устинов",
		"Вишняков",
		"Евсеев",
		"Лаврентьев",
		"Брагин",
		"Константинов",
		"Корнилов",
		"Авдеев",
		"Зыков",
		"Бирюков",
		"Шарапов",
		"Никонов",
		"Щукин",
		"Дьячков",
		"Одинцов",
		"Сазонов",
		"Якушев",
		"Красильников",
		"Гордеев",
		"Самойлов",
		"Князев",
		"Беспалов",
		"Уваров",
		"Шашков",
		"Бобылев",
		"Доронин",
		"Белозеров",
		"Рожков",
		"Самсонов",
		"Мясников",
		"Лихачев",
		"Буров",
		"Сысоев",
		"Фомичев",
		"Русаков",
		"Стрелков",
		"Гущин",
		"Тетерин",
		"Колобов",
		"Субботин",
		"Фокин",
		"Блохин",
		"Селиверстов",
		"Пестов",
		"Кондратьев",
		"Силин",
		"Меркушев",
		"Лыткин",
		"Туров"
		];
		return choice(data, this.rnd);
	}

	///
	string nameFemaleLastName() {
		static enum data = [
		"Смирнова",
		"Иванова",
		"Кузнецова",
		"Попова",
		"Соколова",
		"Лебедева",
		"Козлова",
		"Новикова",
		"Морозова",
		"Петрова",
		"Волкова",
		"Соловьева",
		"Васильева",
		"Зайцева",
		"Павлова",
		"Семенова",
		"Голубева",
		"Виноградова",
		"Богданова",
		"Воробьева",
		"Федорова",
		"Михайлова",
		"Беляева",
		"Тарасова",
		"Белова",
		"Комарова",
		"Орлова",
		"Киселева",
		"Макарова",
		"Андреева",
		"Ковалева",
		"Ильина",
		"Гусева",
		"Титова",
		"Кузьмина",
		"Кудрявцева",
		"Баранова",
		"Куликова",
		"Алексеева",
		"Степанова",
		"Яковлева",
		"Сорокина",
		"Сергеева",
		"Романова",
		"Захарова",
		"Борисова",
		"Королева",
		"Герасимова",
		"Пономарева",
		"Григорьева",
		"Лазарева",
		"Медведева",
		"Ершова",
		"Никитина",
		"Соболева",
		"Рябова",
		"Полякова",
		"Цветкова",
		"Данилова",
		"Жукова",
		"Фролова",
		"Журавлева",
		"Николаева",
		"Крылова",
		"Максимова",
		"Сидорова",
		"Осипова",
		"Белоусова",
		"Федотова",
		"Дорофеева",
		"Егорова",
		"Матвеева",
		"Боброва",
		"Дмитриева",
		"Калинина",
		"Анисимова",
		"Петухова",
		"Антонова",
		"Тимофеева",
		"Никифорова",
		"Веселова",
		"Филиппова",
		"Маркова",
		"Большакова",
		"Суханова",
		"Миронова",
		"Ширяева",
		"Александрова",
		"Коновалова",
		"Шестакова",
		"Казакова",
		"Ефимова",
		"Денисова",
		"Громова",
		"Фомина",
		"Давыдова",
		"Мельникова",
		"Щербакова",
		"Блинова",
		"Колесникова",
		"Карпова",
		"Афанасьева",
		"Власова",
		"Маслова",
		"Исакова",
		"Тихонова",
		"Аксенова",
		"Гаврилова",
		"Родионова",
		"Котова",
		"Горбунова",
		"Кудряшова",
		"Быкова",
		"Зуева",
		"Третьякова",
		"Савельева",
		"Панова",
		"Рыбакова",
		"Суворова",
		"Абрамова",
		"Воронова",
		"Мухина",
		"Архипова",
		"Трофимова",
		"Мартынова",
		"Емельянова",
		"Горшкова",
		"Чернова",
		"Овчинникова",
		"Селезнева",
		"Панфилова",
		"Копылова",
		"Михеева",
		"Галкина",
		"Назарова",
		"Лобанова",
		"Лукина",
		"Белякова",
		"Потапова",
		"Некрасова",
		"Хохлова",
		"Жданова",
		"Наумова",
		"Шилова",
		"Воронцова",
		"Ермакова",
		"Дроздова",
		"Игнатьева",
		"Савина",
		"Логинова",
		"Сафонова",
		"Капустина",
		"Кириллова",
		"Моисеева",
		"Елисеева",
		"Кошелева",
		"Костина",
		"Горбачева",
		"Орехова",
		"Ефремова",
		"Исаева",
		"Евдокимова",
		"Калашникова",
		"Кабанова",
		"Носкова",
		"Юдина",
		"Кулагина",
		"Лапина",
		"Прохорова",
		"Нестерова",
		"Харитонова",
		"Агафонова",
		"Муравьева",
		"Ларионова",
		"Федосеева",
		"Зимина",
		"Пахомова",
		"Шубина",
		"Игнатова",
		"Филатова",
		"Крюкова",
		"Рогова",
		"Кулакова",
		"Терентьева",
		"Молчанова",
		"Владимирова",
		"Артемьева",
		"Гурьева",
		"Зиновьева",
		"Гришина",
		"Кононова",
		"Дементьева",
		"Ситникова",
		"Симонова",
		"Мишина",
		"Фадеева",
		"Комиссарова",
		"Мамонтова",
		"Носова",
		"Гуляева",
		"Шарова",
		"Устинова",
		"Вишнякова",
		"Евсеева",
		"Лаврентьева",
		"Брагина",
		"Константинова",
		"Корнилова",
		"Авдеева",
		"Зыкова",
		"Бирюкова",
		"Шарапова",
		"Никонова",
		"Щукина",
		"Дьячкова",
		"Одинцова",
		"Сазонова",
		"Якушева",
		"Красильникова",
		"Гордеева",
		"Самойлова",
		"Князева",
		"Беспалова",
		"Уварова",
		"Шашкова",
		"Бобылева",
		"Доронина",
		"Белозерова",
		"Рожкова",
		"Самсонова",
		"Мясникова",
		"Лихачева",
		"Бурова",
		"Сысоева",
		"Фомичева",
		"Русакова",
		"Стрелкова",
		"Гущина",
		"Тетерина",
		"Колобова",
		"Субботина",
		"Фокина",
		"Блохина",
		"Селиверстова",
		"Пестова",
		"Кондратьева",
		"Силина",
		"Меркушева",
		"Лыткина",
		"Турова"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceColor() {
		static enum data = [
		"красный",
		"зеленый",
		"синий",
		"желтый",
		"багровый",
		"мятный",
		"зеленовато-голубой",
		"белый",
		"черный",
		"оранжевый",
		"розовый",
		"серый",
		"красно-коричневый",
		"фиолетовый",
		"бирюзовый",
		"желто-коричневый",
		"небесно голубой",
		"оранжево-розовый",
		"темно-фиолетовый",
		"орхидный",
		"оливковый",
		"пурпурный",
		"лимонный",
		"кремовый",
		"сине-фиолетовый",
		"золотой",
		"красно-пурпурный",
		"голубой",
		"лазурный",
		"лиловый",
		"серебряный"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceProductNameAdjective() {
		static enum data = [
		"Маленький",
		"Эргономичный",
		"Грубый",
		"Интеллектуальный",
		"Великолепный",
		"Невероятный",
		"Свободный",
		"Большой",
		"Фантастический",
		"Практичный",
		"Лоснящийся",
		"Потрясающий"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceProductNameMaterial() {
		static enum data = [
		"Стальной",
		"Деревянный",
		"Бетонный",
		"Пластиковый",
		"Хлопковый",
		"Гранитный",
		"Кожанный",
		"Неодимовый",
		"Меховой",
		"Натуральный",
		"Резиновый"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceProductNameProduct() {
		static enum data = [
		"Стул",
		"Автомобиль",
		"Компьютер",
		"Берет",
		"Кулон",
		"Стол",
		"Свитер",
		"Ремень",
		"Ножницы",
		"Носки",
		"Майка",
		"Кепка",
		"Куртка",
		"Плащ",
		"Сабо",
		"Шарф",
		"Клатч",
		"Кошелек",
		"Портмоне",
		"Ботинок"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceDepartment() {
		static enum data = [
		"Книги",
		"Фильмы",
		"музыка",
		"игры",
		"Электроника",
		"компьютеры",
		"Дом",
		"садинструмент",
		"Бакалея",
		"здоровье",
		"красота",
		"Игрушки",
		"детское",
		"для малышей",
		"Одежда",
		"обувь",
		"украшения",
		"Спорт",
		"туризм",
		"Автомобильное",
		"Галантерея",
		"Меха",
		"Пряжа",
		"промышленное"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCityName() {
		static enum data = [
		"Москва",
		"Владимир",
		"Санкт-Петербург",
		"Новосибирск",
		"Екатеринбург",
		"Нижний Новгород",
		"Самара",
		"Казань",
		"Омск",
		"Челябинск",
		"Ростов-на-Дону",
		"Уфа",
		"Волгоград",
		"Пермь",
		"Красноярск",
		"Воронеж",
		"Саратов",
		"Краснодар",
		"Тольятти",
		"Ижевск",
		"Барнаул",
		"Ульяновск",
		"Тюмень",
		"Иркутск",
		"Владивосток",
		"Ярославль",
		"Хабаровск",
		"Махачкала",
		"Оренбург",
		"Новокузнецк",
		"Томск",
		"Кемерово",
		"Рязань",
		"Астрахань",
		"Пенза",
		"Липецк",
		"Тула",
		"Киров",
		"Чебоксары",
		"Курск",
		"Брянск",
		"Магнитогорск",
		"Иваново",
		"Тверь",
		"Ставрополь",
		"Белгород",
		"Сочи"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressState() {
		static enum data = [
		"Республика Адыгея",
		"Республика Башкортостан",
		"Республика Бурятия",
		"Республика Алтай Республика Дагестан",
		"Республика Ингушетия",
		"Кабардино-Балкарская Республика",
		"Республика Калмыкия",
		"Республика Карачаево-Черкессия",
		"Республика Карелия",
		"Республика Коми",
		"Республика Марий Эл",
		"Республика Мордовия",
		"Республика Саха (Якутия)",
		"Республика Северная Осетия-Алания",
		"Республика Татарстан",
		"Республика Тыва",
		"Удмуртская Республика",
		"Республика Хакасия",
		"Чувашская Республика",
		"Алтайский край",
		"Краснодарский край",
		"Красноярский край",
		"Приморский край",
		"Ставропольский край",
		"Хабаровский край",
		"Амурская область",
		"Архангельская область",
		"Астраханская область",
		"Белгородская область",
		"Брянская область",
		"Владимирская область",
		"Волгоградская область",
		"Вологодская область",
		"Воронежская область",
		"Ивановская область",
		"Иркутская область",
		"Калиниградская область",
		"Калужская область",
		"Камчатская область",
		"Кемеровская область",
		"Кировская область",
		"Костромская область",
		"Курганская область",
		"Курская область",
		"Ленинградская область",
		"Липецкая область",
		"Магаданская область",
		"Московская область",
		"Мурманская область",
		"Нижегородская область",
		"Новгородская область",
		"Новосибирская область",
		"Омская область",
		"Оренбургская область",
		"Орловская область",
		"Пензенская область",
		"Пермская область",
		"Псковская область",
		"Ростовская область",
		"Рязанская область",
		"Самарская область",
		"Саратовская область",
		"Сахалинская область",
		"Свердловская область",
		"Смоленская область",
		"Тамбовская область",
		"Тверская область",
		"Томская область",
		"Тульская область",
		"Тюменская область",
		"Ульяновская область",
		"Челябинская область",
		"Читинская область",
		"Ярославская область",
		"Еврейская автономная область",
		"Агинский Бурятский авт. округ",
		"Коми-Пермяцкий автономный округ",
		"Корякский автономный округ",
		"Ненецкий автономный округ",
		"Таймырский (Долгано-Ненецкий) автономный округ",
		"Усть-Ордынский Бурятский автономный округ",
		"Ханты-Мансийский автономный округ",
		"Чукотский автономный округ",
		"Эвенкийский автономный округ",
		"Ямало-Ненецкий автономный округ",
		"Чеченская Республика"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCountry() {
		static enum data = [
		"Австралия",
		"Австрия",
		"Азербайджан",
		"Албания",
		"Алжир",
		"Американское Самоа (не признана)",
		"Ангилья",
		"Ангола",
		"Андорра",
		"Антарктика (не признана)",
		"Антигуа и Барбуда",
		"Антильские Острова (не признана)",
		"Аомынь (не признана)",
		"Аргентина",
		"Армения",
		"Афганистан",
		"Багамские Острова",
		"Бангладеш",
		"Барбадос",
		"Бахрейн",
		"Беларусь",
		"Белиз",
		"Бельгия",
		"Бенин",
		"Болгария",
		"Боливия",
		"Босния и Герцеговина",
		"Ботсвана",
		"Бразилия",
		"Бруней",
		"Буркина-Фасо",
		"Бурунди",
		"Бутан",
		"Вануату",
		"Ватикан",
		"Великобритания",
		"Венгрия",
		"Венесуэла",
		"Восточный Тимор",
		"Вьетнам",
		"Габон",
		"Гаити",
		"Гайана",
		"Гамбия",
		"Гана",
		"Гваделупа (не признана)",
		"Гватемала",
		"Гвиана (не признана)",
		"Гвинея",
		"Гвинея-Бисау",
		"Германия",
		"Гондурас",
		"Гренада",
		"Греция",
		"Грузия",
		"Дания",
		"Джибути",
		"Доминика",
		"Доминиканская Республика",
		"Египет",
		"Замбия",
		"Зимбабве",
		"Израиль",
		"Индия",
		"Индонезия",
		"Иордания",
		"Ирак",
		"Иран",
		"Ирландия",
		"Исландия",
		"Испания",
		"Италия",
		"Йемен",
		"Кабо-Верде",
		"Казахстан",
		"Камбоджа",
		"Камерун",
		"Канада",
		"Катар",
		"Кения",
		"Кипр",
		"Кирибати",
		"Китай",
		"Колумбия",
		"Коморские Острова",
		"Конго",
		"Демократическая Республика",
		"Корея (Северная)",
		"Корея (Южная)",
		"Косово",
		"Коста-Рика",
		"Кот-д'Ивуар",
		"Куба",
		"Кувейт",
		"Кука острова",
		"Кыргызстан",
		"Лаос",
		"Латвия",
		"Лесото",
		"Либерия",
		"Ливан",
		"Ливия",
		"Литва",
		"Лихтенштейн",
		"Люксембург",
		"Маврикий",
		"Мавритания",
		"Мадагаскар",
		"Македония",
		"Малави",
		"Малайзия",
		"Мали",
		"Мальдивы",
		"Мальта",
		"Маршалловы Острова",
		"Мексика",
		"Микронезия",
		"Мозамбик",
		"Молдова",
		"Монако",
		"Монголия",
		"Марокко",
		"Мьянма",
		"Намибия",
		"Науру",
		"Непал",
		"Нигер",
		"Нигерия",
		"Нидерланды",
		"Никарагуа",
		"Новая Зеландия",
		"Норвегия",
		"Объединенные Арабские Эмираты",
		"Оман",
		"Пакистан",
		"Палау",
		"Панама",
		"Папуа — Новая Гвинея",
		"Парагвай",
		"Перу",
		"Польша",
		"Португалия",
		"Республика Конго",
		"Россия",
		"Руанда",
		"Румыния",
		"Сальвадор",
		"Самоа",
		"Сан-Марино",
		"Сан-Томе и Принсипи",
		"Саудовская Аравия",
		"Свазиленд",
		"Сейшельские острова",
		"Сенегал",
		"Сент-Винсент и Гренадины",
		"Сент-Киттс и Невис",
		"Сент-Люсия",
		"Сербия",
		"Сингапур",
		"Сирия",
		"Словакия",
		"Словения",
		"Соединенные Штаты Америки",
		"Соломоновы Острова",
		"Сомали",
		"Судан",
		"Суринам",
		"Сьерра-Леоне",
		"Таджикистан",
		"Таиланд",
		"Тайвань (не признана)",
		"Тамил-Илам (не признана)",
		"Танзания",
		"Тёркс и Кайкос (не признана)",
		"Того",
		"Токелау (не признана)",
		"Тонга",
		"Тринидад и Тобаго",
		"Тувалу",
		"Тунис",
		"Турецкая Республика Северного Кипра (не признана)",
		"Туркменистан",
		"Турция",
		"Уганда",
		"Узбекистан",
		"Украина",
		"Уругвай",
		"Фарерские Острова (не признана)",
		"Фиджи",
		"Филиппины",
		"Финляндия",
		"Франция",
		"Французская Полинезия (не признана)",
		"Хорватия",
		"Центральноафриканская Республика",
		"Чад",
		"Черногория",
		"Чехия",
		"Чили",
		"Швейцария",
		"Швеция",
		"Шри-Ланка",
		"Эквадор",
		"Экваториальная Гвинея",
		"Эритрея",
		"Эстония",
		"Эфиопия",
		"Южно-Африканская Республика",
		"Ямайка",
		"Япония"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressDefaultCountry() {
		static enum data = [
		"Россия"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressStreetAddress() {
		return format!"%s, %s"(addressStreetName(), addressBuildingNumber());
	}

	///
	string addressStreetTitle() {
		static enum data = [
		"Советская",
		"Молодежная",
		"Центральная",
		"Школьная",
		"Новая",
		"Садовая",
		"Лесная",
		"Набережная",
		"Ленина",
		"Мира",
		"Октябрьская",
		"Зеленая",
		"Комсомольская",
		"Заречная",
		"Первомайская",
		"Гагарина",
		"Полевая",
		"Луговая",
		"Пионерская",
		"Кирова",
		"Юбилейная",
		"Северная",
		"Пролетарская",
		"Степная",
		"Пушкина",
		"Калинина",
		"Южная",
		"Колхозная",
		"Рабочая",
		"Солнечная",
		"Железнодорожная",
		"Восточная",
		"Заводская",
		"Чапаева",
		"Нагорная",
		"Строителей",
		"Береговая",
		"Победы",
		"Горького",
		"Кооперативная",
		"Красноармейская",
		"Совхозная",
		"Речная",
		"Школьный",
		"Спортивная",
		"Озерная",
		"Строительная",
		"Парковая",
		"Чкалова",
		"Мичурина",
		"Подгорная",
		"Дружбы",
		"Почтовая",
		"Партизанская",
		"Вокзальная",
		"Лермонтова",
		"Свободы",
		"Дорожная",
		"Дачная",
		"Маяковского",
		"Западная",
		"Фрунзе",
		"Дзержинского",
		"Московская",
		"Свердлова",
		"Некрасова",
		"Гоголя",
		"Красная",
		"Трудовая",
		"Шоссейная",
		"Чехова",
		"Коммунистическая",
		"Труда",
		"Комарова",
		"Матросова",
		"Островского",
		"Сосновая",
		"Клубная",
		"Куйбышева",
		"Крупской",
		"Березовая",
		"Карла Маркса",
		"8 Марта",
		"Больничная",
		"Садовый",
		"Интернациональная",
		"Суворова",
		"Цветочная",
		"Трактовая",
		"Ломоносова",
		"Горная",
		"Космонавтов",
		"Энергетиков",
		"Шевченко",
		"Весенняя",
		"Механизаторов",
		"Коммунальная",
		"Лесной",
		"40 лет Победы",
		"Майская"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressStreetName() {
		switch(uniform(0, 2, this.rnd)) {
			case 0:
				return format!"%s %s"(addressStreetSuffix(), addressStreetTitle());
			case 1:
				return format!"%s %s"(addressStreetTitle(), addressStreetSuffix());
			default: assert(false);
		}
	}

	///
	override string addressCity() {
		return format!"%s"(addressCityName());
	}

	///
	override string addressBuildingNumber() {
		static enum data = [
		"###"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressPostcode() {
		static enum data = [
		"######"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressSecondaryAddress() {
		static enum data = [
		"кв. ###"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressStreetSuffix() {
		static enum data = [
		"ул.",
		"улица",
		"проспект",
		"пр.",
		"площадь",
		"пл."
		];
		return choice(data, this.rnd);
	}

	///
	override string phoneNumberFormats() {
		static enum data = [
		"(9##)###-##-##"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string internetFreeEmail() {
		static enum data = [
		"yandex.ru",
		"ya.ru",
		"mail.ru",
		"gmail.com",
		"yahoo.com",
		"hotmail.com"
		];
		return choice(data, this.rnd);
	}

	///
	override string internetDomainSuffix() {
		static enum data = [
		"com",
		"ru",
		"info",
		"рф",
		"net",
		"org"
		];
		return choice(data, this.rnd);
	}

}
