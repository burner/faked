// generated by fakerjsgenerator
///
module faked.faker_de_ch;

import faked.base;


///
class Faker_de_ch : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string phoneNumberFormats() {
		static enum data = [
		"0800 ### ###",
		"0800 ## ## ##",
		"0## ### ## ##",
		"0## ### ## ##",
		"+41 ## ### ## ##",
		"0900 ### ###",
		"076 ### ## ##",
		"+4178 ### ## ##",
		"0041 79 ### ## ##"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressStateAbbr() {
		static enum data = [
		"AG",
		"AR",
		"AI",
		"BL",
		"BS",
		"BE",
		"FR",
		"GE",
		"GL",
		"GR",
		"JU",
		"LU",
		"NE",
		"NW",
		"OW",
		"SG",
		"SH",
		"SZ",
		"SO",
		"TI",
		"TG",
		"UR",
		"VD",
		"VS",
		"ZG",
		"ZH"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressState() {
		static enum data = [
		"Aargau",
		"Appenzell Ausserrhoden",
		"Appenzell Innerrhoden",
		"Basel-Land",
		"Basel-Stadt",
		"Bern",
		"Freiburg",
		"Genf",
		"Glarus",
		"Graubünden",
		"Jura",
		"Luzern",
		"Neuenburg",
		"Nidwalden",
		"Obwalden",
		"St. Gallen",
		"Schaffhausen",
		"Schwyz",
		"Solothurn",
		"Tessin",
		"Thurgau",
		"Uri",
		"Waadt",
		"Wallis",
		"Zug",
		"Zürich"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCityName() {
		static enum data = [
		"Aarau",
		"Adliswil",
		"Allschwil",
		"Arbon",
		"Baar",
		"Baden",
		"Basel",
		"Bellinzona",
		"Bern",
		"Biel/Bienne",
		"Binningen",
		"Brig-Glis",
		"Bulle",
		"Burgdorf",
		"Bülach",
		"Carouge",
		"Cham",
		"Chur",
		"Dietikon",
		"Dübendorf",
		"Einsiedeln",
		"Emmen",
		"Frauenfeld",
		"Freiburg",
		"Freienbach",
		"Genf",
		"Glarus Nord",
		"Gossau",
		"Grenchen",
		"Herisau",
		"Horgen",
		"Horw",
		"Illnau-Effretikon",
		"Kloten",
		"Kreuzlingen",
		"Kriens",
		"Köniz",
		"Küsnacht",
		"La Chaux-de-Fonds",
		"Lancy",
		"Langenthal",
		"Lausanne",
		"Liestal",
		"Locarno",
		"Lugano",
		"Luzern",
		"Lyss",
		"Martigny",
		"Meilen",
		"Mendrisio",
		"Meyrin",
		"Monthey",
		"Montreux",
		"Morges",
		"Muri bei Bern",
		"Muttenz",
		"Neuenburg",
		"Nyon",
		"Oftringen",
		"Olten",
		"Onex",
		"Opfikon",
		"Ostermundigen",
		"Pratteln",
		"Pully",
		"Rapperswil-Jona",
		"Regensdorf",
		"Reinach",
		"Renens",
		"Rheinfelden",
		"Richterswil",
		"Riehen",
		"Schaffhausen",
		"Schlieren",
		"Schwyz",
		"Siders",
		"Sitten",
		"Solothurn",
		"St. Gallen",
		"Steffisburg",
		"Stäfa",
		"Thalwil",
		"Thun",
		"Thônex",
		"Uster",
		"Val-de-Ruz",
		"Vernier",
		"Versoix",
		"Vevey",
		"Volketswil",
		"Wallisellen",
		"Wettingen",
		"Wetzikon",
		"Wil",
		"Winterthur",
		"Wohlen",
		"Wädenswil",
		"Yverdon-les-Bains",
		"Zug",
		"Zürich"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressDefaultCountry() {
		static enum data = [
		"Schweiz"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCity() {
		return format!"%s"(addressCityName());
	}

	///
	override string addressCountryCode() {
		static enum data = [
		"CH",
		"CH",
		"CH",
		"DE",
		"AT",
		"US",
		"LI",
		"US",
		"HK",
		"VN"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressPostcode() {
		static enum data = [
		"1###",
		"2###",
		"3###",
		"4###",
		"5###",
		"6###",
		"7###",
		"8###",
		"9###"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string companySuffix() {
		static enum data = [
		"AG",
		"GmbH",
		"und Söhne",
		"und Partner",
		"& Co.",
		"Gruppe",
		"LLC",
		"Inc."
		];
		return choice(data, this.rnd);
	}

	///
	override string companyName() {
		switch(uniform(0, 3, this.rnd)) {
			case 0:
				return format!"%s %s"(nameLastName(), companySuffix());
			case 1:
				return format!"%s-%s"(nameLastName(), nameLastName());
			case 2:
				return format!"%s, %s und %s"(nameLastName(), nameLastName(), nameLastName());
			default: assert(false);
		}
	}

	///
	override string internetDomainSuffix() {
		static enum data = [
		"com",
		"net",
		"biz",
		"ch",
		"de",
		"li",
		"at",
		"ch",
		"ch"
		];
		return choice(data, this.rnd);
	}

	///
	override string namePrefix() {
		static enum data = [
		"Hr.",
		"Fr.",
		"Dr."
		];
		return choice(data, this.rnd);
	}

	///
	override string nameFirstName() {
		static enum data = [
		"Adolf",
		"Adrian",
		"Agnes",
		"Alain",
		"Albert",
		"Alberto",
		"Aldo",
		"Alex",
		"Alexander",
		"Alexandre",
		"Alfons",
		"Alfred",
		"Alice",
		"Alois",
		"André",
		"Andrea",
		"Andreas",
		"Angela",
		"Angelo",
		"Anita",
		"Anna",
		"Anne",
		"Anne-Marie",
		"Annemarie",
		"Antoine",
		"Anton",
		"Antonio",
		"Armin",
		"Arnold",
		"Arthur",
		"Astrid",
		"Barbara",
		"Beat",
		"Beatrice",
		"Beatrix",
		"Bernadette",
		"Bernard",
		"Bernhard",
		"Bettina",
		"Brigitta",
		"Brigitte",
		"Bruno",
		"Carlo",
		"Carmen",
		"Caroline",
		"Catherine",
		"Chantal",
		"Charles",
		"Charlotte",
		"Christa",
		"Christian",
		"Christiane",
		"Christina",
		"Christine",
		"Christoph",
		"Christophe",
		"Claire",
		"Claude",
		"Claudia",
		"Claudine",
		"Claudio",
		"Corinne",
		"Cornelia",
		"Daniel",
		"Daniela",
		"Daniele",
		"Danielle",
		"David",
		"Denis",
		"Denise",
		"Didier",
		"Dieter",
		"Dominik",
		"Dominique",
		"Dora",
		"Doris",
		"Edgar",
		"Edith",
		"Eduard",
		"Edwin",
		"Eliane",
		"Elisabeth",
		"Elsa",
		"Elsbeth",
		"Emil",
		"Enrico",
		"Eric",
		"Erica",
		"Erich",
		"Erika",
		"Ernst",
		"Erwin",
		"Esther",
		"Eugen",
		"Eva",
		"Eveline",
		"Evelyne",
		"Fabienne",
		"Felix",
		"Ferdinand",
		"Florence",
		"Francesco",
		"Francis",
		"Franco",
		"François",
		"Françoise",
		"Frank",
		"Franz",
		"Franziska",
		"Frédéric",
		"Fredy",
		"Fridolin",
		"Friedrich",
		"Fritz",
		"Gabriel",
		"Gabriela",
		"Gabrielle",
		"Georg",
		"Georges",
		"Gérald",
		"Gérard",
		"Gerhard",
		"Gertrud",
		"Gianni",
		"Gilbert",
		"Giorgio",
		"Giovanni",
		"Gisela",
		"Giuseppe",
		"Gottfried",
		"Guido",
		"Guy",
		"Hanna",
		"Hans",
		"Hans-Peter",
		"Hans-Rudolf",
		"Hans-Ulrich",
		"Hansjörg",
		"Hanspeter",
		"Hansruedi",
		"Hansueli",
		"Harry",
		"Heidi",
		"Heinrich",
		"Heinz",
		"Helen",
		"Helena",
		"Helene",
		"Helmut",
		"Henri",
		"Herbert",
		"Hermann",
		"Hildegard",
		"Hubert",
		"Hugo",
		"Ingrid",
		"Irene",
		"Iris",
		"Isabelle",
		"Jacqueline",
		"Jacques",
		"Jakob",
		"Jan",
		"Janine",
		"Jean",
		"Jean-Claude",
		"Jean-Daniel",
		"Jean-François",
		"Jean-Jacques",
		"Jean-Louis",
		"Jean-Luc",
		"Jean-Marc",
		"Jean-Marie",
		"Jean-Paul",
		"Jean-Pierre",
		"Johann",
		"Johanna",
		"Johannes",
		"John",
		"Jolanda",
		"Jörg",
		"Josef",
		"Joseph",
		"Josette",
		"Josiane",
		"Judith",
		"Julia",
		"Jürg",
		"Karin",
		"Karl",
		"Katharina",
		"Klaus",
		"Konrad",
		"Kurt",
		"Laura",
		"Laurence",
		"Laurent",
		"Leo",
		"Liliane",
		"Liselotte",
		"Louis",
		"Luca",
		"Luigi",
		"Lukas",
		"Lydia",
		"Madeleine",
		"Maja",
		"Manfred",
		"Manuel",
		"Manuela",
		"Marc",
		"Marcel",
		"Marco",
		"Margrit",
		"Margrith",
		"Maria",
		"Marianne",
		"Mario",
		"Marion",
		"Markus",
		"Marlène",
		"Marlies",
		"Marlis",
		"Martha",
		"Martin",
		"Martina",
		"Martine",
		"Massimo",
		"Matthias",
		"Maurice",
		"Max",
		"Maya",
		"Michael",
		"Michel",
		"Michele",
		"Micheline",
		"Monica",
		"Monika",
		"Monique",
		"Myriam",
		"Nadia",
		"Nadja",
		"Nathalie",
		"Nelly",
		"Nicolas",
		"Nicole",
		"Niklaus",
		"Norbert",
		"Olivier",
		"Oskar",
		"Otto",
		"Paola",
		"Paolo",
		"Pascal",
		"Patricia",
		"Patrick",
		"Paul",
		"Peter",
		"Petra",
		"Philipp",
		"Philippe",
		"Pia",
		"Pierre",
		"Pierre-Alain",
		"Pierre-André",
		"Pius",
		"Priska",
		"Rainer",
		"Raymond",
		"Regina",
		"Regula",
		"Reinhard",
		"Remo",
		"Renata",
		"Renate",
		"Renato",
		"Rene",
		"René",
		"Reto",
		"Richard",
		"Rita",
		"Robert",
		"Roberto",
		"Roger",
		"Roland",
		"Rolf",
		"Roman",
		"Rosa",
		"Rosemarie",
		"Rosmarie",
		"Rudolf",
		"Ruedi",
		"Ruth",
		"Sabine",
		"Samuel",
		"Sandra",
		"Sandro",
		"Serge",
		"Silvia",
		"Silvio",
		"Simon",
		"Simone",
		"Sonia",
		"Sonja",
		"Stefan",
		"Stephan",
		"Stéphane",
		"Stéphanie",
		"Susanna",
		"Susanne",
		"Suzanne",
		"Sylvia",
		"Sylvie",
		"Theo",
		"Theodor",
		"Therese",
		"Thomas",
		"Toni",
		"Ueli",
		"Ulrich",
		"Urs",
		"Ursula",
		"Verena",
		"Véronique",
		"Victor",
		"Viktor",
		"Vreni",
		"Walter",
		"Werner",
		"Willi",
		"Willy",
		"Wolfgang",
		"Yolande",
		"Yves",
		"Yvette",
		"Yvonne"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameLastName() {
		static enum data = [
		"Ackermann",
		"Aebi",
		"Albrecht",
		"Ammann",
		"Amrein",
		"Arnold",
		"Bachmann",
		"Bader",
		"Bär",
		"Bättig",
		"Bauer",
		"Baumann",
		"Baumgartner",
		"Baur",
		"Beck",
		"Benz",
		"Berger",
		"Bernasconi",
		"Betschart",
		"Bianchi",
		"Bieri",
		"Blaser",
		"Blum",
		"Bolliger",
		"Bosshard",
		"Braun",
		"Brun",
		"Brunner",
		"Bucher",
		"Bühler",
		"Bühlmann",
		"Burri",
		"Christen",
		"Egger",
		"Egli",
		"Eichenberger",
		"Erni",
		"Ernst",
		"Eugster",
		"Fankhauser",
		"Favre",
		"Fehr",
		"Felber",
		"Felder",
		"Ferrari",
		"Fischer",
		"Flückiger",
		"Forster",
		"Frei",
		"Frey",
		"Frick",
		"Friedli",
		"Fuchs",
		"Furrer",
		"Gasser",
		"Geiger",
		"Gerber",
		"Gfeller",
		"Giger",
		"Gloor",
		"Graf",
		"Grob",
		"Gross",
		"Gut",
		"Haas",
		"Häfliger",
		"Hafner",
		"Hartmann",
		"Hasler",
		"Hauser",
		"Hermann",
		"Herzog",
		"Hess",
		"Hirt",
		"Hodel",
		"Hofer",
		"Hoffmann",
		"Hofmann",
		"Hofstetter",
		"Hotz",
		"Huber",
		"Hug",
		"Hunziker",
		"Hürlimann",
		"Imhof",
		"Isler",
		"Iten",
		"Jäggi",
		"Jenni",
		"Jost",
		"Kägi",
		"Kaiser",
		"Kälin",
		"Käser",
		"Kaufmann",
		"Keller",
		"Kern",
		"Kessler",
		"Knecht",
		"Koch",
		"Kohler",
		"Kuhn",
		"Küng",
		"Kunz",
		"Lang",
		"Lanz",
		"Lehmann",
		"Leu",
		"Leunberger",
		"Lüscher",
		"Lustenberger",
		"Lüthi",
		"Lutz",
		"Mäder",
		"Maier",
		"Marti",
		"Martin",
		"Maurer",
		"Mayer",
		"Meier",
		"Meili",
		"Meister",
		"Merz",
		"Mettler",
		"Meyer",
		"Michel",
		"Moser",
		"Müller",
		"Näf",
		"Ott",
		"Peter",
		"Pfister",
		"Portmann",
		"Probst",
		"Rey",
		"Ritter",
		"Roos",
		"Roth",
		"Rüegg",
		"Schäfer",
		"Schaller",
		"Schär",
		"Schärer",
		"Schaub",
		"Scheidegger",
		"Schenk",
		"Scherrer",
		"Schlatter",
		"Schmid",
		"Schmidt",
		"Schneider",
		"Schnyder",
		"Schoch",
		"Schuler",
		"Schumacher",
		"Schürch",
		"Schwab",
		"Schwarz",
		"Schweizer",
		"Seiler",
		"Senn",
		"Sidler",
		"Siegrist",
		"Sigrist",
		"Spörri",
		"Stadelmann",
		"Stalder",
		"Staub",
		"Stauffer",
		"Steffen",
		"Steiger",
		"Steiner",
		"Steinmann",
		"Stettler",
		"Stocker",
		"Stöckli",
		"Stucki",
		"Studer",
		"Stutz",
		"Suter",
		"Sutter",
		"Tanner",
		"Thommen",
		"Tobler",
		"Vogel",
		"Vogt",
		"Wagner",
		"Walder",
		"Walter",
		"Weber",
		"Wegmann",
		"Wehrli",
		"Weibel",
		"Wenger",
		"Wettstein",
		"Widmer",
		"Winkler",
		"Wirth",
		"Wirz",
		"Wolf",
		"Wüthrich",
		"Wyss",
		"Zbinden",
		"Zehnder",
		"Ziegler",
		"Zimmermann",
		"Zingg",
		"Zollinger",
		"Zürcher"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameName() {
		switch(uniform(0, 6, this.rnd)) {
			case 0:
				return format!"%s %s"(nameFirstName(), nameLastName());
			case 1:
				return format!"%s %s"(nameFirstName(), nameLastName());
			case 2:
				return format!"%s %s"(nameFirstName(), nameLastName());
			case 3:
				return format!"%s %s"(nameFirstName(), nameLastName());
			case 4:
				return format!"%s %s"(nameFirstName(), nameLastName());
			case 5:
				return format!"%s %s"(nameFirstName(), nameLastName());
			default: assert(false);
		}
	}

}
