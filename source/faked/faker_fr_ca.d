// generated by fakerjsgenerator
///
module faked.faker_fr_ca;

import faked.base;


///
class Faker_fr_ca : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"### ###-####",
		"1 ### ###-####",
		"### ###-####",
		"poste ###'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationStateAbbr() {
		auto data = [
		"AB",
		"BC",
		"MB",
		"NB",
		"NL",
		"NS",
		"NU",
		"NT",
		"ON",
		"PE",
		"QC",
		"SK",
		"YK"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationState() {
		auto data = [
		"Alberta",
		"Colombie-Britannique",
		"Manitoba",
		"Nouveau-Brunswick",
		"Terre-Neuve-et-Labrador",
		"Nouvelle-Écosse",
		"Territoires du Nord-Ouest",
		"Nunavut",
		"Ontario",
		"Île-du-Prince-Édouard",
		"Québec",
		"Saskatchewan",
		"Yukon"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationPostcode() {
		auto data = [
		"A#? #?#",
		"B#? #?#",
		"C#? #?#",
		"E#? #?#",
		"G#? #?#",
		"H#? #?#",
		"J#? #?#",
		"K#? #?#",
		"L#? #?#",
		"M#? #?#",
		"N#? #?#",
		"P#? #?#",
		"R#? #?#",
		"S#? #?#",
		"T#? #?#",
		"V#? #?#",
		"X#? #?#",
		"Y#? #?#"
		];
		return this.digitBuild(choice(data, this.rnd));
	}


	override string locationStreetPattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return personFirstName() ~ " " ~ locationStreetSuffix();
			case 1: return personLastName() ~ " " ~ locationStreetSuffix();
		}
	}

	///
	override string locationDefaultCountry() {
		auto data = [
		"Canada'"
		];
		return choice(data, this.rnd);
	}


	override string locationCityPattern() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return locationCityPrefix() ~ " " ~ personFirstName() ~ locationCitySuffix();
			case 1: return locationCityPrefix() ~ " " ~ personFirstName();
			case 2: return personFirstName() ~ locationCitySuffix();
			case 3: return personLastName() ~ locationCitySuffix();
		}
	}

	///
	override string internetFreeEmail() {
		auto data = [
		"gmail.com",
		"yahoo.ca",
		"hotmail.com'"
		];
		return choice(data, this.rnd);
	}

	///
	override string internetDomainSuffix() {
		auto data = [
		"qc.ca",
		"ca",
		"com",
		"biz",
		"info",
		"name",
		"net",
		"org'"
		];
		return choice(data, this.rnd);
	}


	override string personLastNamePattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "{ value: '" ~ personLastName();
			case 1: return "weight: 1 }";
		}
	}

}
