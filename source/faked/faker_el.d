// generated by fakerjsgenerator
///
module faked.faker_el;

import faked.base;


///
class Faker_el : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string locationCityName() {
		auto data = [
		"Αθήνα",
		"Θεσσαλονίκη",
		"Πειραιάς",
		"Πάτρα",
		"Ηράκλειο",
		"Λάρισα",
		"Βόλος",
		"Ιωάννινα",
		"Τρίκαλα",
		"Σέρρες",
		"Χαλκίδα",
		"Αλεξανδρούπολη",
		"Ξάνθη",
		"Κατερίνη",
		"Αγρίνιο",
		"Καλαμάτα",
		"Καβάλα",
		"Χανιά",
		"Λαμία",
		"Κομοτηνή",
		"Ρόδος",
		"Δράμα",
		"Βέροια",
		"Κοζάνη",
		"Καρδίτσα",
		"Ρέθυμνο",
		"Πτολεμαΐδα",
		"Τρίπολη",
		"Κόρινθος",
		"Γέρακας",
		"Γιαννιτσά",
		"Μυτιλήνη",
		"Χίος",
		"Σαλαμίνα",
		"Ελευσίνα",
		"Κέρκυρα",
		"Πύργος",
		"Μέγαρα",
		"Κιλκίς",
		"Θήβα",
		"Άργος",
		"Άρτα",
		"Άρτεμη",
		"Λιβαδειά",
		"Ωραιόκαστρο",
		"Αίγιο",
		"Κως",
		"Κορωπί",
		"Πρέβεζα",
		"Νάουσα",
		"Ορεστιάδα",
		"Έδεσσα",
		"Φλώρινα",
		"Αμαλιάδα",
		"Παλλήνη",
		"Σπάρτη",
		"Θέρμη",
		"Βάρη",
		"Νέα",
		"Αλεξάνδρεια",
		"Παιανία",
		"Καλύβια",
		"Ναύπλιο",
		"Ναύπακτος",
		"Καστοριά",
		"Γρεβενά",
		"Μεσολόγγι",
		"Γάζι",
		"Ιεράπετρα",
		"Κάλυμνος",
		"Ραφήνα",
		"Λουτράκι",
		"Άγιος",
		"Ερμούπολη",
		"Ιαλυσός",
		"Τύρναβος",
		"Γλυκά Νερά"
		];
		return choice(data, this.rnd);
	}


	override string locationStreetPattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return personFirstName() ~ " " ~ locationStreetSuffix();
			case 1: return personLastName() ~ " " ~ locationStreetSuffix();
		}
	}

	///
	override string locationDefaultCountry() {
		auto data = [
		"Ελλάδα'"
		];
		return choice(data, this.rnd);
	}


	override string locationCityPattern() {
		final switch(uniform(0, 1, this.rnd)) {
			case 0: return locationCityName() ~ "'";
		}
	}

	///
	override string loremWords() {
		auto data = [
		"alias",
		"consequatur",
		"aut",
		"perferendis",
		"sit",
		"voluptatem",
		"accusantium",
		"doloremque",
		"aperiam",
		"eaque",
		"ipsa",
		"quae",
		"ab",
		"illo",
		"inventore",
		"veritatis",
		"et",
		"quasi",
		"architecto",
		"beatae",
		"vitae",
		"dicta",
		"sunt",
		"explicabo",
		"aspernatur",
		"odit",
		"fugit",
		"sed",
		"quia",
		"consequuntur",
		"magni",
		"dolores",
		"eos",
		"qui",
		"ratione",
		"sequi",
		"nesciunt",
		"neque",
		"dolorem",
		"ipsum",
		"dolor",
		"amet",
		"consectetur",
		"adipisci",
		"velit",
		"non",
		"numquam",
		"eius",
		"modi",
		"tempora",
		"incidunt",
		"ut",
		"labore",
		"dolore",
		"magnam",
		"aliquam",
		"quaerat",
		"enim",
		"ad",
		"minima",
		"veniam",
		"quis",
		"nostrum",
		"exercitationem",
		"ullam",
		"corporis",
		"nemo",
		"ipsam",
		"voluptas",
		"suscipit",
		"laboriosam",
		"nisi",
		"aliquid",
		"ex",
		"ea",
		"commodi",
		"autem",
		"vel",
		"eum",
		"iure",
		"reprehenderit",
		"in",
		"voluptate",
		"esse",
		"quam",
		"nihil",
		"molestiae",
		"iusto",
		"odio",
		"dignissimos",
		"ducimus",
		"blanditiis",
		"praesentium",
		"laudantium",
		"totam",
		"rem",
		"voluptatum",
		"deleniti",
		"atque",
		"corrupti",
		"quos",
		"quas",
		"molestias",
		"excepturi",
		"sint",
		"occaecati",
		"cupiditate",
		"provident",
		"perspiciatis",
		"unde",
		"omnis",
		"iste",
		"natus",
		"error",
		"similique",
		"culpa",
		"officia",
		"deserunt",
		"mollitia",
		"animi",
		"id",
		"est",
		"laborum",
		"dolorum",
		"fuga",
		"harum",
		"quidem",
		"rerum",
		"facilis",
		"expedita",
		"distinctio",
		"nam",
		"libero",
		"tempore",
		"cum",
		"soluta",
		"nobis",
		"eligendi",
		"optio",
		"cumque",
		"impedit",
		"quo",
		"porro",
		"quisquam",
		"minus",
		"quod",
		"maxime",
		"placeat",
		"facere",
		"possimus",
		"assumenda",
		"repellendus",
		"temporibus",
		"quibusdam",
		"illum",
		"fugiat",
		"nulla",
		"pariatur",
		"at",
		"vero",
		"accusamus",
		"officiis",
		"debitis",
		"necessitatibus",
		"saepe",
		"eveniet",
		"voluptates",
		"repudiandae",
		"recusandae",
		"itaque",
		"earum",
		"hic",
		"tenetur",
		"a",
		"sapiente",
		"delectus",
		"reiciendis",
		"voluptatibus",
		"maiores",
		"doloribus",
		"asperiores",
		"repellat"
		];
		return choice(data, this.rnd);
	}

	///
	override string financeTransactionType() {
		auto data = [
		"κατάθεση",
		"ανάληψη",
		"πληρωμή",
		"τιμολόγιο'"
		];
		return choice(data, this.rnd);
	}

	///
	override Currency financeCurrency() {
		auto data = [
		Currency("Ευρώ", "EUR", "€")
		];
		return choice(data, this.rnd);
	}

	///
	override string financeAccountType() {
		auto data = [
		"Καταθετικός",
		"Μισθοδοσίας",
		"Δανειακός'"
		];
		return choice(data, this.rnd);
	}


	///
    override string financeCreditCardCVV() {
        string ret;
        for(int i = 0; i < 3; ++i) {
            ret ~= to!string(uniform(0, 3, this.rnd));
        }
        return ret;
    }

	///
    override string financeCreditCard() {
        switch(uniform(0, 3, this.rnd)) {
			case 0: 
				return financeCreditCardMastercard();
			case 1: 
				return financeCreditCardDiscover();
			case 2: 
				return financeCreditCardVisa();
			case 3: 
				return financeCreditCardAmericanExpress();

            default:
                assert(false);
        }
        assert(false);
    }

	///
	override string financeCreditCardMastercard() {
		auto data = [
		"/5[1-5]##-####-####-###L/",
		"/6771-89##-####-###L/'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string financeCreditCardDiscover() {
		auto data = [
		"/6011-####-####-###L/",
		"/65##-####-####-###L/",
		"/64[4-9]#-####-####-###L/",
		"/6011-62##-####-####-###L/",
		"/65##-62##-####-####-###L/",
		"/64[4-9]#-62##-####-####-###L/"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string financeCreditCardVisa() {
		auto data = [
		"/4###########L/",
		"/4###-####-####-###L/'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string financeCreditCardAmericanExpress() {
		auto data = [
		"/34##-######-####L/",
		"/37##-######-####L/'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string appVersion() {
		auto data = [
		"0.#.#",
		"0.##",
		"#.##",
		"#.#",
		"#.#.#'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}


	override string appAuthor() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return personName();
			case 1: return companyName() ~ "'";
		}
	}

	///
	override string appName() {
		auto data = [
		"ΤΡΑΠΕΖΑ ΤΗΣ ΕΛΛΑΔΟΣ",
		"ΕΜΠΟΡΙΚΗ ΤΡΑΠΕΖΑ ΤΗΣ ΕΛΛΑΔΟΣ Α.Ε.",
		"Η ΕΘΝΙΚΗ (ΕΛΛ. ΕΤΑΙΡΙΑ ΓΕΝ. ΑΣΦΑΛΕΙΩΝ)",
		"ΑΙΟΛΙΚΗ Α.Ε.Ε.Χ.",
		"ΚΑΖΙΝΟ ΠΟΡΤΟ ΚΑΡΡΑΣ Α.Ε.",
		"ΛΑΝΑΚΑΜ Α.Ε.",
		"ΠΛΑΣΤΙΚΑ ΘΡΑΚΗΣ Α.Β.Ε.Ε.",
		"ΤΙΤΑΝ ΑΝΩΝΥΜΗ ΕΤΑΙΡΙΑ ΤΣΙΜΕΝΤΩΝ",
		"S & B ΒΙΟΜΗΧΑΝΙΚΑ ΟΡΥΚΤΑ Α.Ε.",
		"Α. ΚΑΛΠΙΝΗΣ - Ν.ΣΙΜΟΣ Α.Ε.Β.Ε.",
		"Χ. ΡΟΚΑΣ Α.Β.Ε.Ε.",
		"ELBISCO A.E ΣΥΜΜΕΤΟΧΩΝ",
		"ΚΥΛΙΝΔΡΟΜΥΛΟΙ Κ. ΣΑΡΑΝΤΟΠΟΥΛΟΣ Α.Ε.",
		"ΑΛΥΣΙΔΑ Α.Β.Ε.Ε.",
		"ΕΜΠΟΡΙΚΟΣ ΔΕΣΜΟΣ Α.Ε.Β.Ε",
		"ΙΠΠΟΤΟΥΡ Α.Ε.",
		"ΣΠ. ΤΑΣΟΓΛΟΥ Α.Ε.- DELONGHI",
		"ΕΚΤΕΡ Α.Ε.",
		"ΙΜΠΕΡΙΟ Α.Ε.",
		"ΡΑΔΙΟ Α. ΚΟΡΑΣΙΔΗΣ Ε.Ε.Α.Ε.",
		"ΜΙΝΩΙΚΕΣ ΓΡΑΜΜΕΣ",
		"MEVACO ΜΕΤΑΛΛΟΥΡΓΙΚΗ Α.Β.Ε.Ε.",
		"Ε.ΥΔ.Α.Π. Α.Ε.",
		"ΒΟΓΙΑΤΖΟΓΛΟΥ SYSTEMS Α.Ε.",
		"ΑΓΡΟΤΙΚΗ ΤΡΑΠΕΖΑ ΤΗΣ ΕΛΛΑΔΟΣ Α.Ε.",
		"ΠΡΟΜΟΤΑ ΕΛΛΑΣ Α.Ε",
		"COMPUCON ΕΦΑΡΜΟΓΕΣ ΥΠΟΛΟΓΙΣΤΩΝ ΑΒΕΕ",
		"CENTRIC ΠΟΛΥΜΕΣΑ ΑΝΩΝΥΜΗ ΕΤΑΙΡΕΙΑ",
		"FASHION BOX ΕΛΛΑΣ ΑΕ",
		"Ι. ΚΛΟΥΚΙΝΑΣ - Ι. ΛΑΠΠΑΣ ΤΕΧΝΙΚΗ ΚΑΙ ΕΜΠΟΡΙΚΗ Α.Ε.",
		"ΕΛΙΝΟΙΛ ΕΛΛΗΝΙΚΗ ΕΤΑΙΡΙΑ ΠΕΤΡΕΛΑΙΩΝ ΑΝΩΝΥΜΗ ΕΤΑΙΡΙΑ",
		"ΔΕΛΤΑ ΜΗΧΑΝΟΛΟΓΙΚΟΣ ΕΞΟΠΛΙΣΜΟΣ & ΟΛΟΚΛΗΡΩΜΕΝΑ ΕΡΓΑ ΑΒΕΤΕ"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyDescriptor() {
		auto data = [
		"24 ώρες το 24ώρο",
		"24/7",
		"3η γενιά",
		"4η γενικά",
		"5η γενιά",
		"6η γενιά",
		"asymmetric",
		"ασύγχρονο",
		"συνεχής",
		"αφιερωμένο",
		"διαδακτικό",
		"διακριτό",
		"δυναμικό",
		"παγκόσμιο",
		"υβριδικό",
		"δριαδραστικό",
		"τοπικό",
		"πολυμεσικό",
		"διεθνές",
		"επόμενης γενιάς",
		"αντικειμενοστραφή",
		"ιδανικό",
		"πραγματικού χρόνου",
		"δευτερεύων",
		"σταθερό",
		"στατικό",
		"προστιθέμενης αξίας"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyNoun() {
		auto data = [
		"ικανότητα",
		"πρόσβαση",
		"αλγόριθμος",
		"αναλυτής",
		"εφαρμογή",
		"προσέγγιση",
		"αρχιτεκτονική",
		"αρχείο",
		"τεχνητή νοημοσύνη",
		"χωρητικότητα",
		"πρόκληση",
		"συνεργασία",
		"περιπλοκότητα",
		"πυρήνας",
		"βάση δεδομένων",
		"ορισμός",
		"συνάρτηση",
		"Διεπαφή Χρήστη",
		"υλικό",
		"υλοποίηση",
		"εγκατάσταση",
		"εγχειρίδιο χρήστη",
		"διεπαφή",
		"υπηρεσίες internet",
		"γνωσιακή βάση",
		"τοπικό δίκτυο",
		"μετρικές",
		"μεθοδολογία",
		"μοντέλο",
		"ανοιχτή αρχιτεκτονική",
		"ενορχήστρωση",
		"προϊόν",
		"παραγωγικότητα",
		"πρωτόκολο",
		"ασφαλής γραμμή",
		"λογισμικό",
		"στρατηγική",
		"επιτυχία",
		"υποστήρυξη"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyAdjective() {
		auto data = [
		"Για προχωρημένους",
		"Αυτοματοποιημένη",
		"Ισορροπημένη",
		"Συγκεντρωτική",
		"Κλωνοποιημένα",
		"Συμβατές",
		"Παραμετρικές",
		"Προσαρμόσιμα",
		"Αποκεντρωμένη",
		"Ψηφιακές",
		"Κατανεμημένα",
		"Διαφορετικές",
		"Ενισχυμένη",
		"Εργονομία",
		"Διευρυμένη",
		"Επέκταση",
		"Ειδικός",
		"Πρώτης γραμμής",
		"Πλήρως παραμετροποιήσιμο",
		"Θεμελιώδη",
		"Λαϊκά",
		"Οριζόντια",
		"Καινοτόμες",
		"ολοκληρωμένη",
		"Έξυπνο",
		"Αντιστροφή",
		"Υπεύθυνη για τη διαχείριση",
		"Υποχρεωτικά",
		"Πολυμερής",
		"Πολυεπίπεδη",
		"Δικτυωμένες",
		"Ανοιχτή πηγή",
		"Λειτουργικής",
		"Βελτιστοποιημένη",
		"Προαιρετικό",
		"Βιολογικά",
		"Οργανωμένες",
		"Μένοντας",
		"Επίμονη",
		"Σταδιακή",
		"Προληπτική",
		"Ριζική",
		"Προοδευτική",
		"Αντιδραστική",
		"Ευθυγραμμισμένο",
		"Μειωμένη",
		"Αντίστροφης μηχανικής",
		"Ανθεκτική",
		"Αδιάλειπτη",
		"Ασφαλής",
		"Κοινόχρηστο",
		"Βελτιωμένη",
		"Εναλλαγή",
		"Σύγχρονη",
		"Αναβαθμίσιμα",
		"Χρηστοκεντρικών",
		"Φιλική προς το χρήστη",
		"Ευέλικτο",
		"Εικονική",
		"Οραματιστής"
		];
		return choice(data, this.rnd);
	}

	///
	override string companySuffix() {
		auto data = [
		"Ε.Π.Ε.",
		"Α.Ε.",
		"και Υιοί",
		"Όμιλος'"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyBuzzVerb() {
		auto data = [
		"χρησιμοποιούν",
		"ενσωμάτωση",
		"βελτιστοποιήσουν",
		"εξελιχθεί",
		"μεταμορφώσει",
		"αγκαλιάζουν",
		"επιτρέψει",
		"ενορχηστρώσει",
		"επανεφεύρουμε",
		"ενισχύσουν",
		"διευκολύνουν",
		"αδράξουν",
		"συνεργούν",
		"μεγαλώνουν",
		"συνθέσει",
		"παραδώσει",
		"αναλάβουν",
		"επιταχύνει",
		"απεικονίσει",
		"επαναπροσδιορίσουν",
		"καινοτομία",
		"απελευθερώσουν",
		"επεκτείνει",
		"δημιουργούν",
		"εκμεταλλεύονται",
		"επαναλάβει",
		"καλλιεργούν",
		"επαναπροσδιορίσει"
		];
		return choice(data, this.rnd);
	}


	override string companyNamePattern() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return personLastName() ~ " " ~ companySuffix();
			case 1: return personLastName() ~ "-" ~ personLastName();
			case 2: return personLastName();
			case 3: return personLastName() ~ " and " ~ personLastName();
		}
	}

	///
	override string companyBuzzNoun() {
		auto data = [
		"συνέργειες",
		"παραδείγματα",
		"αγορές",
		"συνεργασίες",
		"υποδομές",
		"πλατφόρμες",
		"πρωτοβουλίες",
		"κανάλια",
		"μάτια",
		"κοινότητες",
		"λύσεις",
		"δράση-αντικείμενα",
		"πύλες",
		"θέσεις",
		"τεχνολογίες",
		"περιεχόμενο",
		"αλυσίδες προμηθειών",
		"σύγκλιση",
		"σχέσεις",
		"αρχιτεκτονικές",
		"διασυνδέσεις",
		"e-αγορές",
		"ηλεκτρονικό εμπόριο",
		"συστήματα",
		"μοντέλα",
		"παραδοτέα",
		"χρήστες",
		"σχήματα",
		"δίκτυα",
		"εφαρμογές",
		"μετρήσεις",
		"e-business",
		"λειτουργίες",
		"εμπειρίες",
		"διαδικτυακές υπηρεσίες",
		"μεθοδολογίες"
		];
		return choice(data, this.rnd);
	}

	///
	override string companyBuzzAdjective() {
		auto data = [
		"Προστιθέμενη αξία",
		"Κάθετη",
		"Προληπτική",
		"Εύρωστο",
		"Επαναστατικό",
		"Κλιμακούμενες",
		"Προβάδισμα",
		"Καινοτόμες",
		"Διαισθητική",
		"Στρατηγικών",
		"E-business",
		"Κρίσιμης σημασίας",
		"Κολλάει",
		"Ένα προς ένα",
		"24/7",
		"Παγκόσμια",
		"B2B",
		"B2C",
		"Κοκκώδη",
		"Τριβές",
		"Εικονική",
		"Ιογενείς",
		"Δυναμική",
		"24/365",
		"Δολοφόνος",
		"Μαγνητικά",
		"Διαδραστικό",
		"Σέξι",
		"Πραγματικός χρόνος",
		"Αποτελεσματικό",
		"Κατανεμημένες",
		"Επεκτάσιμο",
		"Κλειδί στο χέρι",
		"Παγκόσμιας κλάσης",
		"Ανοιχτή πηγή",
		"Συνεργιστική",
		"Επιχείρηση",
		"Ολοκληρωμένη",
		"Εύστοχος",
		"Ασύρματο",
		"Διαφανής",
		"Επόμενη γενιά",
		"Αιχμής",
		"Επίκεντρο τον χρήστη",
		"Οραματιστής",
		"Προσαρμοσμένη",
		"Πανταχού παρούσα",
		"Plug-and-play",
		"Συνεργατική",
		"Συναρπαστικό",
		"Ολιστική",
		"Πλούσια"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerAdjective() {
		auto data = [
		"οδηγός",
		"πρωτογενής",
		"ψηφιακή",
		"ανοιχτή πηγή",
		"εικονική",
		"ασύρματο",
		"1080p",
		"οπτική",
		"κινητό"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerVerb() {
		auto data = [
		"back up",
		"bypass",
		"hack",
		"προσπέραση",
		"συμπίεση",
		"αντιγραφή",
		"περιήγηση",
		"σύνδεση",
		"υπολογισμός",
		"είσοδος",
		"μεταφορά",
		"πρόγραμμα",
		"επανεκκίνηση",
		"προσπέλαση"
		];
		return choice(data, this.rnd);
	}

	///
	string hackerAbbreviation() {
		auto data = [
		"TCP",
		"HTTP",
		"SDD",
		"RAM",
		"GB",
		"CSS",
		"SSL",
		"AGP",
		"SQL",
		"FTP",
		"PCI",
		"AI",
		"ADP",
		"RSS",
		"XML",
		"EXE",
		"COM",
		"HDD",
		"THX",
		"SMTP",
		"SMS",
		"USB",
		"PNG",
		"SAS",
		"IB",
		"SCSI",
		"JSON",
		"XSS",
		"JBOD"
		];
		return choice(data, this.rnd);
	}

	///
	override string hackerNoun() {
		auto data = [
		"οδηγός",
		"πρωτόκολο",
		"ταχύτητα",
		"panel",
		"μικρότσιπ",
		"πρόγραμμα",
		"πόρτα",
		"κάρτα",
		"διεπαφή",
		"σύστημα",
		"σένσορας",
		"ασφάλεια",
		"σκληρός δίσκος",
		"feed",
		"οθόνη",
		"εφαρμογή",
		"δίαυλος",
		"διάγραμμα",
		"πυκνωτής",
		"πίνακας"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceDepartment() {
		auto data = [
		"Βιβλία",
		"Ταινίες",
		"Μουσική",
		"Παιχνίδια",
		"Ηλεκτρονικές Συσκευές",
		"Υπολογιστές",
		"Σπίτι",
		"Κήπος",
		"Εργαλεία",
		"Grocery",
		"Υγεία",
		"Ομορφιά",
		"Παιδί",
		"Μωρό",
		"Ρουχισμός",
		"Παπούτσια",
		"Κοσμήματα",
		"Sports",
		"Εξοχή",
		"Αυτοκίνητο",
		"Βιομηχανικά"
		];
		return choice(data, this.rnd);
	}

	///
	override string colorHuman() {
		auto data = [
		"κοκκικο",
		"πράσινο",
		"μπλε",
		"κίτρινο",
		"μωβ",
		"λευκό",
		"μαύρο",
		"πορτοκαλί",
		"ροζ",
		"γκρί",
		"βιολετί",
		"τρικουάζ",
		"λαδί",
		"χρυσό",
		"φουξια",
		"κυανό",
		"ασημί"
		];
		return choice(data, this.rnd);
	}

	///
	override string teamCreature() {
		auto data = [
		"μυρμήγκια",
		"νυχτερίδες",
		"αρκούδες",
		"μέλισσες",
		"πουλιά",
		"βουβάλια",
		"γάτες",
		"κοτόπουλα",
		"βοοειδή",
		"σκυλιά",
		"δελφίνια",
		"πάπιες",
		"ελέφαντες",
		"ψάρια",
		"αλεπούδες",
		"βατράχια",
		"χήνες",
		"ερίφια",
		"άλογα",
		"καγκουρό",
		"λιοντάρια",
		"μαϊμούδες",
		"κουκουβάγιες",
		"βόδια",
		"πιγκουίνοι",
		"Άνθρωποι",
		"γουρούνια",
		"κουνέλια",
		"πρόβατα",
		"τίγρεις",
		"φάλαινες",
		"λύκοι",
		"ζέβρες",
		"κοράκια",
		"μαύρεςγάτες",
		"χίμαιρες",
		"φαντάσματα",
		"συνωμότες",
		"δράκους",
		"νάνοι",
		"ξωτικά",
		"enchanters",
		"εξορκιστές",
		"γιοι",
		"εχθρούς",
		"γίγαντες",
		"στοιχειά",
		"γρύπες",
		"Νέμεσις",
		"δράκοι",
		"χρησμούς",
		"προφήτες",
		"αράχνες",
		"πνεύματα",
		"βαμπίρ",
		"warlocks",
		"Vixens",
		"λυκάνθρωποι",
		"μάγισσες",
		"προσκυνητές",
		"ζόμπι",
		"Δρυίδες"
		];
		return choice(data, this.rnd);
	}


	override string teamName() {
		final switch(uniform(0, 1, this.rnd)) {
			case 0: return locationState() ~ " " ~ teamCreature() ~ "'";
		}
	}

	///
	override string cellPhoneFormats() {
		auto data = [
		"697## ######",
		"698## ######",
		"699## ######",
		"692## ######'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"2310# #####",
		"2312# #####",
		"2313# #####",
		"222# ######",
		"223# ######",
		"227# ######",
		"224# ######",
		"226# ######",
		"225# ######",
		"232# ######",
		"229# ######",
		"228# ######",
		"233# ######",
		"234# ######",
		"235# ######",
		"237# ######",
		"238# ######",
		"239# ######",
		"241# ######",
		"242# ######",
		"243# ######",
		"244# ######",
		"246# ######",
		"249# ######",
		"251# ######",
		"252# ######",
		"253# ######",
		"254# ######",
		"255# ######",
		"259# ######",
		"261# ######",
		"262# ######",
		"263# ######",
		"264# ######",
		"265# ######",
		"266# ######",
		"267# ######",
		"268# ######",
		"269# ######",
		"271# ######",
		"272# ######",
		"273# ######",
		"274# ######",
		"275# ######",
		"276# ######",
		"279# ######",
		"281# ######",
		"282# ######",
		"283# ######",
		"284# ######",
		"289# ######",
		"0800 ######"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string internetFreeEmail() {
		auto data = [
		"gmail.com",
		"yahoo.com",
		"hotmail.com'"
		];
		return choice(data, this.rnd);
	}

	///
	override string internetDomainSuffix() {
		auto data = [
		"gr",
		"com",
		"biz",
		"info",
		"name'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personMalePrefix() {
		auto data = [
		"Κύριος",
		"Δόκτορ'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personFemalePrefix() {
		auto data = [
		"Κυρία",
		"Δόκτορ'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personMaleFirstName() {
		auto data = [
		"Γεώργιος",
		"Ιωάννης",
		"Κώστας",
		"Δημήτρης",
		"Νικόλαος",
		"Παναγιώτης",
		"Βασίλης",
		"Χρήστος",
		"Αθανάσιος",
		"Μιχαήλ",
		"Ευάγγελος",
		"Σπύρος",
		"Αντώνης",
		"Αναστάσιος",
		"Θεόδωρος",
		"Ανδρέας",
		"Χαράλαμπος",
		"Αλέξανδρος",
		"Εμμανουήλ",
		"Ηλίας",
		"Σταύρος",
		"Πέτρος",
		"Σωτήριος",
		"Στυλιανός",
		"Ελευθέριος",
		"Απόστολος",
		"Φώτιος",
		"Διονύσιος",
		"Γρηγόριος",
		"Άγγελος",
		"Στέφανος",
		"Ευστάθιος",
		"Παύλος",
		"Παρασκευάς",
		"Αριστείδης",
		"Λεωνίδας"
		];
		return choice(data, this.rnd);
	}

	///
	override string personLastName() {
		auto data = [
		"Αβραμίδης",
		"Αγγελίδης",
		"Αγγελίδου",
		"Αγγελόπουλος",
		"Αγγελοπούλου",
		"Αθανασιάδης",
		"Αθανασίου",
		"Ακρίδας",
		"Αλαβάνος",
		"Αλαφούζος",
		"Αλεβιζόπουλος",
		"Αλεβίζος",
		"Αλεξάκης",
		"Αλεξίου",
		"Αλεξόπουλος",
		"Αλεξανδρίδης",
		"Αλεξάνδρου",
		"Αλεξιάδης",
		"Αλιβιζάτος",
		"Αναγνωστάκης",
		"Αναγνώστου",
		"Αναστασιάδης",
		"Ανδρεάδης",
		"Ανδρέου",
		"Αντωνιάδης",
		"Αντωνόπουλος",
		"Αντωνοπούλου",
		"Αξιώτης",
		"Αποστόλου",
		"Αποστολίδης",
		"Αρβανίτης",
		"Αργυριάδης",
		"Ασπάσιος",
		"Αυγερινός",
		"Βάμβας",
		"Βαμβακάς",
		"Βαρνακιώτης",
		"Βαρουξής",
		"Βασιλόπουλος",
		"Βασιλείου",
		"Βασιλειάδης",
		"Βασιλικός",
		"Βενιζέλος",
		"Βέργας",
		"Βικελίδης",
		"Βιλαέτης",
		"Βιτάλη",
		"Βιτάλης",
		"Βλαβιανός",
		"Βλαστός",
		"Βλαχόπουλος",
		"Βούλγαρης",
		"Βονόρτας",
		"Βουγιουκλάκης",
		"Βουρδουμπάς",
		"Βυζάντιος",
		"Γαλάνη",
		"Γαλάνης",
		"Γεννάδιος",
		"Γερμανός",
		"Γερμανού",
		"Γεωργίου",
		"Γεωργιάδης",
		"Γιάγκος",
		"Γιαννόπουλος",
		"Γιαννακόπουλος",
		"Γιάνναρης",
		"Γκόφας",
		"Γλυκύς",
		"Γούναρης",
		"Γούσιος",
		"Δάβης",
		"Δαγκλής",
		"Δαμασκηνός",
		"Δασκαλόπουλος",
		"Δασκαλοπούλου",
		"Δελή",
		"Δεσποτόπουλος",
		"Δημαράς",
		"Δημητρίου",
		"Δημητρακόπουλος",
		"Διαμαντόπουλος",
		"Διδασκάλου",
		"Δοξαράς",
		"Δουμπιώτης",
		"Δουρέντης",
		"Δράκος",
		"Δραγούμης",
		"Δυοβουνιώτης",
		"Ελευθερόπουλος",
		"Ελευθεριάδης",
		"Ελευθερίου",
		"Ευταξίας",
		"Ζάνος",
		"Ζάππας",
		"Ζάρκος",
		"Ζάχος",
		"Ζέρβας",
		"Ζαΐμης",
		"Ζαφειρόπουλος",
		"Ζαχαρίου",
		"Ζερβός",
		"Ζυγομαλάς",
		"Ζωγράφος",
		"Ζωγράφου",
		"Ηλιόπουλος",
		"Θεοδοσίου",
		"Θεοδωρίδης",
		"Θεοτόκης",
		"Ιωαννίδης",
		"Ιωάννου",
		"Καζαντζής",
		"Κακριδής",
		"Καλάρης",
		"Καλύβας",
		"Καλαμογδάρτης",
		"Καλλιγάς",
		"Καλογιάννης",
		"Κανακάρης-Ρούφος",
		"Καραβίας",
		"Καραμήτσος",
		"Καραμανλής",
		"Καρράς",
		"Κασιδιάρης",
		"Καψής",
		"Κεδίκογλου",
		"Κούνδουρος",
		"Κολιάτσος",
		"Κομνηνός",
		"Κοντολέων",
		"Κοντόσταυλος",
		"Κόρακας",
		"Κορνάρος",
		"Κορομηλάς",
		"Κορωναίος",
		"Κοσμόπουλος",
		"Κοτζιάς",
		"Κουβέλης",
		"Κουντουριώτης",
		"Κουρμούλης",
		"Κουταλιανός",
		"Κρεστενίτης",
		"Κυπραίος",
		"Κωνσταντίνου",
		"Κωνσταντόπουλος",
		"Λόντος",
		"Λύτρας",
		"Λαγός",
		"Λαιμός",
		"Λαμέρας",
		"Λαμπρόπουλος",
		"Λειβαδάς",
		"Λιάπης",
		"Λιακόπουλος",
		"Λούλης",
		"Λούπης",
		"Λύκος",
		"Μάγκας",
		"Μήτζου",
		"Μαγγίνας",
		"Μακρή",
		"Μακρής",
		"Μαλαξός",
		"Μανιάκης",
		"Μανωλάς",
		"Μαρής",
		"Μαρκόπουλος",
		"Μαυρίδης",
		"Μαυρογένης",
		"Μελετόπουλος",
		"Μέλιοι",
		"Μεσσηνέζης",
		"Μεταξάς",
		"Μητσοτάκης",
		"Μιαούλης",
		"Μιχαηλίδης",
		"Μιχαλολιάκος",
		"Μοσχοβάκης",
		"Μπότσαρης",
		"Μπλέτσας",
		"Μπουκουβαλαίοι",
		"Νικολαΐδης",
		"Νικολάκος",
		"Οικονόμου",
		"Ουζουνίδης",
		"Πανταζής",
		"Παπαγεωργίου",
		"Παπάγος",
		"Παπαδάκης",
		"Παπαδόπουλος",
		"Παπάζογλου",
		"Παπακώστας",
		"Παπακωνσταντίνου",
		"Παπανδρέου",
		"Παπανικολάου",
		"Παπαντωνίου",
		"Παπαστεφάνου",
		"Παπαφιλίππου",
		"Παπαϊωάννου",
		"Παππάς"
		];
		return choice(data, this.rnd);
	}


	override string personTitle() {
		final switch(uniform(0, 59, this.rnd)) {
			case 0: return "descriptor: [";
			case 1: return "Senior";
			case 2: return "Εταιρείες";
			case 3: return "Πελάτης";
			case 4: return "Επενδυτής";
			case 5: return "Εσωτερικό";
			case 6: return "Κύριος";
			case 7: return "]";
			case 8: return "level: [";
			case 9: return "Λύσεις";
			case 10: return "Πρόγραμμα";
			case 11: return "Μάρκα";
			case 12: return "Ασφάλεια";
			case 13: return "Έρευνα";
			case 14: return "Μάρκετινγκ";
			case 15: return "Οδηγιών";
			case 16: return "Εφαρμογή";
			case 17: return "Ενσωμάτωση";
			case 18: return "Λειτουργικότητα";
			case 19: return "Τακτική";
			case 20: return "Ταυτότητα";
			case 21: return "Αγορές";
			case 22: return "Όμιλος";
			case 23: return "Εφαρμογές";
			case 24: return "Βελτιστοποίηση";
			case 25: return "Δραστηριότητες";
			case 26: return "Υποδομή";
			case 27: return "Intranet";
			case 28: return "Επικοινωνίες";
			case 29: return "Web";
			case 30: return "Branding";
			case 31: return "Ποιότητα";
			case 32: return "Διασφάλιση";
			case 33: return "Κινητικότητα";
			case 34: return "Λογαριασμοί";
			case 35: return "Δεδομένα";
			case 36: return "Δημιουργική";
			case 37: return "Διαμόρφωση";
			case 38: return "Μετρήσεις";
			case 39: return "]";
			case 40: return "job: [";
			case 41: return "Επόπτης";
			case 42: return "Συνεργάτης";
			case 43: return "Σύμβουλος";
			case 44: return "Διευθυντής";
			case 45: return "Μηχανικός";
			case 46: return "Ειδικός";
			case 47: return "Συντονιστή";
			case 48: return "Διαχειριστής";
			case 49: return "Αναλυτής";
			case 50: return "Designer";
			case 51: return "Τεχνικός";
			case 52: return "Προγραμματιστής";
			case 53: return "Παραγωγός";
			case 54: return "Βοηθός";
			case 55: return "Συντονιστής";
			case 56: return "Εκπρόσωπος";
			case 57: return "Αντιπρόσωπος";
			case 58: return "]";
		}
	}


	override string personName() {
		final switch(uniform(0, 10, this.rnd)) {
			case 0: return "{";
			case 1: return "value: '" ~ personPrefix() ~ " " ~ personFirstName() ~ " " ~ personLastName();
			case 2: return "weight: 1";
			case 3: return "}";
			case 4: return "{";
			case 5: return "value: '" ~ personFirstName() ~ " " ~ personLastName() ~ " " ~ personSuffix();
			case 6: return "weight: 1";
			case 7: return "}";
			case 8: return "{ value: '" ~ personFirstName() ~ " " ~ personLastName();
			case 9: return "weight: 8 }";
		}
	}

	///
	override string personFemaleFirstName() {
		auto data = [
		"Μαρια",
		"Ελενη",
		"Αικατερινη",
		"Ιωαννα",
		"Δημητρα",
		"Ευαγγελια",
		"Γεωργια",
		"Αναστασια",
		"Παναγιωτα",
		"Σοφια",
		"Κωνσταντινα",
		"Παρασκευη",
		"Αννα",
		"Χριστινα",
		"Αθανασια",
		"Δεσποινα",
		"Χρυσουλα",
		"Αλεξανδρα",
		"Σταυρουλα"
		];
		return choice(data, this.rnd);
	}


	override string personLastNamePattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "{ value: '" ~ personLastName();
			case 1: return "weight: 1 }";
		}
	}

}
