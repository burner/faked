// generated by fakerjsgenerator
///
module faked.faker_sv;

import faked.base;


///
class Faker_sv : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string companySuffix() {
		auto data = [
		"Gruppen",
		"AB",
		"HB",
		"Group",
		"Investment",
		"Kommanditbolag",
		"Aktiebolag"
		];
		return choice(data, this.rnd);
	}


	override string companyName() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return nameLastName() ~ " " ~ companySuffix();
			case 1: return nameLastName() ~ "-" ~ nameLastName();
			case 2: return nameLastName();
			case 3: return nameLastName() ~ " " ~ companySuffix();
		}
	}

	///
	override string nameMaleFirstName() {
		auto data = [
		"Lars",
		"Mikael",
		"Anders",
		"Johan",
		"Erik",
		"Per",
		"Peter",
		"Karl",
		"Thomas",
		"Jan",
		"Daniel",
		"Fredrik",
		"Andreas",
		"Hans",
		"Stefan",
		"Mohamed",
		"Mats",
		"Marcus",
		"Mattias",
		"Magnus",
		"Jonas",
		"Oskar",
		"Alexander",
		"Niklas",
		"Bengt",
		"Martin",
		"Bo",
		"Nils",
		"Viktor",
		"Patrik",
		"Björn",
		"David",
		"Leif",
		"Filip",
		"Henrik",
		"Joakim",
		"Emil",
		"Christer",
		"Ulf",
		"Sven",
		"Simon",
		"Christoffer",
		"Anton",
		"Gustav",
		"Robert",
		"Christian",
		"William",
		"Tommy",
		"Kjell",
		"Lucas",
		"Rickard",
		"Håkan",
		"Adam",
		"Göran",
		"Jakob",
		"Jonathan",
		"Rolf",
		"Lennart",
		"Robin",
		"Sebastian",
		"Elias",
		"Tobias",
		"John",
		"Stig",
		"Axel",
		"Linus",
		"Oliver",
		"Kent",
		"Hugo",
		"Isak",
		"Roger",
		"Jesper",
		"Claes",
		"Albin",
		"Ludvig",
		"Jörgen",
		"Rasmus",
		"Max",
		"Ali",
		"Jimmy",
		"Kenneth",
		"Joel",
		"Gunnar",
		"Dennis",
		"Josef",
		"Johnny",
		"Olle",
		"Liam",
		"Leo",
		"Olof",
		"Pontus",
		"Åke",
		"Kurt",
		"Kevin",
		"Samuel",
		"Edvin",
		"Gabriel",
		"Torbjörn",
		"Arvid",
		"Felix"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameLastName() {
		auto data = [
		"Andersson",
		"Johansson",
		"Karlsson",
		"Nilsson",
		"Eriksson",
		"Larsson",
		"Olsson",
		"Persson",
		"Svensson",
		"Gustafsson",
		"Pettersson",
		"Jonsson",
		"Jansson",
		"Hansson",
		"Bengtsson",
		"Jönsson",
		"Lindberg",
		"Jakobsson",
		"Magnusson",
		"Olofsson",
		"Lindström",
		"Lindqvist",
		"Lindgren",
		"Berg",
		"Axelsson",
		"Bergström",
		"Lundberg",
		"Lind",
		"Lundgren",
		"Lundqvist",
		"Mattsson",
		"Berglund",
		"Fredriksson",
		"Sandberg",
		"Henriksson",
		"Forsberg",
		"Sjöberg",
		"Ali",
		"Wallin",
		"Mohamed",
		"Engström",
		"Eklund",
		"Danielsson",
		"Lundin",
		"Håkansson",
		"Björk",
		"Bergman",
		"Gunnarsson",
		"Holm",
		"Wikström",
		"Samuelsson",
		"Isaksson",
		"Fransson",
		"Bergqvist",
		"Nyström",
		"Holmberg",
		"Arvidsson",
		"Löfgren",
		"Söderberg",
		"Nyberg",
		"Blomqvist",
		"Claesson",
		"Nordström",
		"Ahmed",
		"Mårtensson",
		"Lundström",
		"Hassan",
		"Viklund",
		"Björklund",
		"Eliasson",
		"Pålsson",
		"Berggren",
		"Sandström",
		"Lund",
		"Nordin",
		"Ström",
		"Åberg",
		"Falk",
		"Ekström",
		"Hermansson",
		"Holmgren",
		"Hellström",
		"Dahlberg",
		"Hedlund",
		"Sundberg",
		"Sjögren",
		"Ek",
		"Blom",
		"Abrahamsson",
		"Martinsson",
		"Öberg",
		"Andreasson",
		"Strömberg",
		"Månsson",
		"Hansen",
		"Åkesson",
		"Dahl",
		"Lindholm",
		"Norberg",
		"Holmqvist"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameFirstName() {
		auto data = [
		"Anna",
		"Eva",
		"Maria",
		"Karin",
		"Sara",
		"Kristina",
		"Lena",
		"Emma",
		"Kerstin",
		"Marie",
		"Malin",
		"Ingrid",
		"Jenny",
		"Hanna",
		"Linda",
		"Annika",
		"Susanne",
		"Elin",
		"Monica",
		"Birgitta",
		"Sofia",
		"Johanna",
		"Inger",
		"Carina",
		"Elisabeth",
		"Julia",
		"Ulla",
		"Katarina",
		"Linnéa",
		"Emelie",
		"Ida",
		"Helena",
		"Camilla",
		"Åsa",
		"Anette",
		"Sandra",
		"Gunilla",
		"Anita",
		"Maja",
		"Marianne",
		"Margareta",
		"Amanda",
		"Anneli",
		"Therese",
		"Ann",
		"Josefin",
		"Cecilia",
		"Jessica",
		"Helen",
		"Lisa",
		"Matilda",
		"Caroline",
		"Alice",
		"Frida",
		"Ulrika",
		"Elsa",
		"Barbro",
		"Siv",
		"Rebecca",
		"Madeleine",
		"Klara",
		"Ebba",
		"Sofie",
		"Isabelle",
		"Agneta",
		"Gun",
		"Wilma",
		"Lina",
		"Berit",
		"Pia",
		"Ella",
		"Ellen",
		"Yvonne",
		"Louise",
		"Astrid",
		"Moa",
		"Olivia",
		"Nathalie",
		"Mona",
		"Agnes",
		"Emilia",
		"Alexandra",
		"Alva",
		"Britt",
		"Erika",
		"Viktoria",
		"Ann-Christin",
		"Felicia",
		"Ann-Marie",
		"Sonja",
		"Britt-Marie",
		"Pernilla",
		"Lovisa",
		"Charlotte",
		"Linn",
		"Gunnel",
		"Nina",
		"Mikaela",
		"Karolina",
		"Lisbeth",
		"Lars",
		"Mikael",
		"Anders",
		"Johan",
		"Erik",
		"Per",
		"Peter",
		"Karl",
		"Thomas",
		"Jan",
		"Daniel",
		"Fredrik",
		"Andreas",
		"Hans",
		"Stefan",
		"Mohamed",
		"Mats",
		"Marcus",
		"Mattias",
		"Magnus",
		"Jonas",
		"Oskar",
		"Alexander",
		"Niklas",
		"Bengt",
		"Martin",
		"Bo",
		"Nils",
		"Viktor",
		"Patrik",
		"Björn",
		"David",
		"Leif",
		"Filip",
		"Henrik",
		"Joakim",
		"Emil",
		"Christer",
		"Ulf",
		"Sven",
		"Simon",
		"Christoffer",
		"Anton",
		"Gustav",
		"Robert",
		"Christian",
		"William",
		"Tommy",
		"Kjell",
		"Lucas",
		"Rickard",
		"Håkan",
		"Adam",
		"Göran",
		"Jakob",
		"Jonathan",
		"Rolf",
		"Lennart",
		"Robin",
		"Sebastian",
		"Elias",
		"Tobias",
		"John",
		"Stig",
		"Axel",
		"Linus",
		"Oliver",
		"Kent",
		"Hugo",
		"Isak",
		"Roger",
		"Jesper",
		"Claes",
		"Albin",
		"Ludvig",
		"Jörgen",
		"Rasmus",
		"Max",
		"Ali",
		"Jimmy",
		"Kenneth",
		"Joel",
		"Gunnar",
		"Dennis",
		"Josef",
		"Johnny",
		"Olle",
		"Liam",
		"Leo",
		"Olof",
		"Pontus",
		"Åke",
		"Kurt",
		"Kevin",
		"Samuel",
		"Edvin",
		"Gabriel",
		"Torbjörn",
		"Arvid",
		"Felix"
		];
		return choice(data, this.rnd);
	}


	override string nameName() {
		final switch(uniform(0, 7, this.rnd)) {
			case 0: return namePrefix() ~ " " ~ nameFirstName() ~ " " ~ nameLastName();
			case 1: return nameFirstName() ~ " " ~ nameLastName() ~ " " ~ nameSuffix();
			case 2: return nameFirstName() ~ " " ~ nameLastName();
			case 3: return nameFirstName() ~ " " ~ nameLastName();
			case 4: return nameFirstName() ~ " " ~ nameLastName() ~ " " ~ nameLastName();
			case 5: return nameMaleFirstName() ~ " " ~ nameLastName();
			case 6: return nameFemaleFirstName() ~ " " ~ nameLastName();
		}
	}

	///
	override string nameFemaleFirstName() {
		auto data = [
		"Anna",
		"Eva",
		"Maria",
		"Karin",
		"Sara",
		"Kristina",
		"Lena",
		"Emma",
		"Kerstin",
		"Marie",
		"Malin",
		"Ingrid",
		"Jenny",
		"Hanna",
		"Linda",
		"Annika",
		"Susanne",
		"Elin",
		"Monica",
		"Birgitta",
		"Sofia",
		"Johanna",
		"Inger",
		"Carina",
		"Elisabeth",
		"Julia",
		"Ulla",
		"Katarina",
		"Linnéa",
		"Emelie",
		"Ida",
		"Helena",
		"Camilla",
		"Åsa",
		"Anette",
		"Sandra",
		"Gunilla",
		"Anita",
		"Maja",
		"Marianne",
		"Margareta",
		"Amanda",
		"Anneli",
		"Therese",
		"Ann",
		"Josefin",
		"Cecilia",
		"Jessica",
		"Helen",
		"Lisa",
		"Matilda",
		"Caroline",
		"Alice",
		"Frida",
		"Ulrika",
		"Elsa",
		"Barbro",
		"Siv",
		"Rebecca",
		"Madeleine",
		"Klara",
		"Ebba",
		"Sofie",
		"Isabelle",
		"Agneta",
		"Gun",
		"Wilma",
		"Lina",
		"Berit",
		"Pia",
		"Ella",
		"Ellen",
		"Yvonne",
		"Louise",
		"Astrid",
		"Moa",
		"Olivia",
		"Nathalie",
		"Mona",
		"Agnes",
		"Emilia",
		"Alexandra",
		"Alva",
		"Britt",
		"Erika",
		"Viktoria",
		"Ann-Christin",
		"Felicia",
		"Ann-Marie",
		"Sonja",
		"Britt-Marie",
		"Pernilla",
		"Lovisa",
		"Charlotte",
		"Linn",
		"Gunnel",
		"Nina",
		"Mikaela",
		"Karolina",
		"Lisbeth"
		];
		return choice(data, this.rnd);
	}

	///
	override string namePrefix() {
		auto data = [
		"Dr.",
		"Prof.",
		"PhD.'"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceDepartment() {
		auto data = [
		"Böcker",
		"Filmer",
		"Musik",
		"Spel",
		"Elektronik",
		"Datorer",
		"Hem",
		"Trädgård",
		"Verktyg",
		"Livsmedel",
		"Hälsa",
		"Skönhet",
		"Leksaker",
		"Klädsel",
		"Skor",
		"Smycken",
		"Sport"
		];
		return choice(data, this.rnd);
	}

	///
	string addressCommonStreetSuffix() {
		auto data = [
		"s Väg",
		"s Gata'"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressState() {
		auto data = [
		"Blekinge",
		"Dalarna",
		"Gotland",
		"Gävleborg",
		"Göteborg",
		"Halland",
		"Jämtland",
		"Jönköping",
		"Kalmar",
		"Kronoberg",
		"Norrbotten",
		"Skaraborg",
		"Skåne",
		"Stockholm",
		"Södermanland",
		"Uppsala",
		"Värmland",
		"Västerbotten",
		"Västernorrland",
		"Västmanland",
		"Älvsborg",
		"Örebro",
		"Östergötland"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCountry() {
		auto data = [
		"Ryssland",
		"Kanada",
		"Kina",
		"USA",
		"Brasilien",
		"Australien",
		"Indien",
		"Argentina",
		"Kazakstan",
		"Algeriet",
		"DR Kongo",
		"Danmark",
		"Färöarna",
		"Grönland",
		"Saudiarabien",
		"Mexiko",
		"Indonesien",
		"Sudan",
		"Libyen",
		"Iran",
		"Mongoliet",
		"Peru",
		"Tchad",
		"Niger",
		"Angola",
		"Mali",
		"Sydafrika",
		"Colombia",
		"Etiopien",
		"Bolivia",
		"Mauretanien",
		"Egypten",
		"Tanzania",
		"Nigeria",
		"Venezuela",
		"Namibia",
		"Pakistan",
		"Moçambique",
		"Turkiet",
		"Chile",
		"Zambia",
		"Marocko",
		"Västsahara",
		"Burma",
		"Afghanistan",
		"Somalia",
		"Centralafrikanska republiken",
		"Sydsudan",
		"Ukraina",
		"Botswana",
		"Madagaskar",
		"Kenya",
		"Frankrike",
		"Franska Guyana",
		"Jemen",
		"Thailand",
		"Spanien",
		"Turkmenistan",
		"Kamerun",
		"Papua Nya Guinea",
		"Sverige",
		"Uzbekistan",
		"Irak",
		"Paraguay",
		"Zimbabwe",
		"Japan",
		"Tyskland",
		"Kongo",
		"Finland",
		"Malaysia",
		"Vietnam",
		"Norge",
		"Svalbard",
		"Jan Mayen",
		"Elfenbenskusten",
		"Polen",
		"Italien",
		"Filippinerna",
		"Ecuador",
		"Burkina Faso",
		"Nya Zeeland",
		"Gabon",
		"Guinea",
		"Storbritannien",
		"Ghana",
		"Rumänien",
		"Laos",
		"Uganda",
		"Guyana",
		"Oman",
		"Vitryssland",
		"Kirgizistan",
		"Senegal",
		"Syrien",
		"Kambodja",
		"Uruguay",
		"Tunisien",
		"Surinam",
		"Nepal",
		"Bangladesh",
		"Tadzjikistan",
		"Grekland",
		"Nicaragua",
		"Eritrea",
		"Nordkorea",
		"Malawi",
		"Benin",
		"Honduras",
		"Liberia",
		"Bulgarien",
		"Kuba",
		"Guatemala",
		"Island",
		"Sydkorea",
		"Ungern",
		"Portugal",
		"Jordanien",
		"Serbien",
		"Azerbajdzjan",
		"Österrike",
		"Förenade Arabemiraten",
		"Tjeckien",
		"Panama",
		"Sierra Leone",
		"Irland",
		"Georgien",
		"Sri Lanka",
		"Litauen",
		"Lettland",
		"Togo",
		"Kroatien",
		"Bosnien och Hercegovina",
		"Costa Rica",
		"Slovakien",
		"Dominikanska republiken",
		"Bhutan",
		"Estland",
		"Danmark",
		"Färöarna",
		"Grönland",
		"Nederländerna",
		"Schweiz",
		"Guinea-Bissau",
		"Taiwan",
		"Moldavien",
		"Belgien",
		"Lesotho",
		"Armenien",
		"Albanien",
		"Salomonöarna",
		"Ekvatorialguinea",
		"Burundi",
		"Haiti",
		"Rwanda",
		"Makedonien",
		"Djibouti",
		"Belize",
		"Israel",
		"El Salvador",
		"Slovenien",
		"Fiji",
		"Kuwait",
		"Swaziland",
		"Timor-Leste",
		"Montenegro",
		"Bahamas",
		"Vanuatu",
		"Qatar",
		"Gambia",
		"Jamaica",
		"Kosovo",
		"Libanon",
		"Cypern",
		"Brunei",
		"Trinidad och Tobago",
		"Kap Verde",
		"Samoa",
		"Luxemburg",
		"Komorerna",
		"Mauritius",
		"São Tomé och Príncipe",
		"Kiribati",
		"Dominica",
		"Tonga",
		"Mikronesiens federerade stater",
		"Singapore",
		"Bahrain",
		"Saint Lucia",
		"Andorra",
		"Palau",
		"Seychellerna",
		"Antigua och Barbuda",
		"Barbados",
		"Saint Vincent och Grenadinerna",
		"Grenada",
		"Malta",
		"Maldiverna",
		"Saint Kitts och Nevis",
		"Marshallöarna",
		"Liechtenstein",
		"San Marino",
		"Tuvalu",
		"Nauru",
		"Monaco",
		"Vatikanstaten"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressDefaultCountry() {
		auto data = [
		"Sverige'"
		];
		return choice(data, this.rnd);
	}


	override string addressStreetAddress() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "normal: '" ~ addressStreet() ~ " " ~ addressBuildingnumber();
			case 1: return "full: '" ~ addressStreet() ~ " " ~ addressBuildingnumber() ~ " " ~ addressSecondaryaddress();
		}
	}

	///
	string addressStreetPrefix() {
		auto data = [
		"Västra",
		"Östra",
		"Norra",
		"Södra",
		"Övre",
		"Undre'"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCitySuffix() {
		auto data = [
		"stad",
		"land",
		"sås",
		"ås",
		"holm",
		"tuna",
		"sta",
		"berg",
		"löv",
		"borg",
		"mora",
		"hamn",
		"fors",
		"köping",
		"by",
		"hult",
		"torp",
		"fred",
		"vik"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCityPrefix() {
		auto data = [
		"Söder",
		"Norr",
		"Väst",
		"Öster",
		"Aling",
		"Ar",
		"Av",
		"Bo",
		"Br",
		"Bå",
		"Ek",
		"En",
		"Esk",
		"Fal",
		"Gäv",
		"Göte",
		"Ha",
		"Helsing",
		"Karl",
		"Krist",
		"Kram",
		"Kung",
		"Kö",
		"Lyck",
		"Ny"
		];
		return choice(data, this.rnd);
	}


	override string addressStreet() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return addressStreetName() ~ addressStreetSuffix();
			case 1: return addressStreetPrefix() ~ " " ~ addressStreetName() ~ addressStreetSuffix();
			case 2: return nameFirstName() ~ addressCommonStreetSuffix();
			case 3: return nameLastName() ~ addressCommonStreetSuffix();
		}
	}

	///
	string addressStreetName() {
		auto data = [
		"Björk",
		"Järnvägs",
		"Ring",
		"Skol",
		"Skogs",
		"Ny",
		"Gran",
		"Idrotts",
		"Stor",
		"Kyrk",
		"Industri",
		"Park",
		"Strand",
		"Skol",
		"Trädgård",
		"Ängs",
		"Kyrko",
		"Villa",
		"Ek",
		"Kvarn",
		"Stations",
		"Back",
		"Furu",
		"Gen",
		"Fabriks",
		"Åker",
		"Bäck",
		"Asp"
		];
		return choice(data, this.rnd);
	}


	override string addressCity() {
		final switch(uniform(0, 1, this.rnd)) {
			case 0: return addressCityPrefix() ~ addressCitySuffix() ~ "'";
		}
	}

	///
	override string addressBuildingNumber() {
		auto data = [
		"###",
		"##",
		"#'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressPostcode() {
		auto data = [
		"#####'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressSecondaryAddress() {
		auto data = [
		"Lgh. ###",
		"Hus ###'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressStreetSuffix() {
		auto data = [
		"vägen",
		"gatan",
		"gränden",
		"gärdet",
		"allén'"
		];
		return choice(data, this.rnd);
	}

	///
	override string dateWeekday() {
		auto data = [
		"wide: ['söndag",
		"måndag",
		"tisdag",
		"onsdag",
		"torsdag",
		"fredag",
		"lördag']",
		"abbr: ['sön",
		"mån",
		"tis",
		"ons",
		"tor",
		"fre",
		"lör']"
		];
		return choice(data, this.rnd);
	}


	override string dateMonth() {
		final switch(uniform(0, 28, this.rnd)) {
			case 0: return "wide: [";
			case 1: return "januari";
			case 2: return "februari";
			case 3: return "mars";
			case 4: return "april";
			case 5: return "maj";
			case 6: return "juni";
			case 7: return "juli";
			case 8: return "augusti";
			case 9: return "september";
			case 10: return "oktober";
			case 11: return "november";
			case 12: return "december";
			case 13: return "]";
			case 14: return "abbr: [";
			case 15: return "jan";
			case 16: return "feb";
			case 17: return "mar";
			case 18: return "apr";
			case 19: return "maj";
			case 20: return "jun";
			case 21: return "jul";
			case 22: return "aug";
			case 23: return "sep";
			case 24: return "okt";
			case 25: return "nov";
			case 26: return "dec";
			case 27: return "]";
		}
	}

	///
	override string colorHuman() {
		auto data = [
		"vit",
		"silver",
		"grå",
		"svart",
		"röd",
		"grön",
		"blå",
		"gul",
		"lila",
		"indigo",
		"guld",
		"brun",
		"rosa",
		"purpur",
		"korall"
		];
		return choice(data, this.rnd);
	}

	///
	string teamSuffix() {
		auto data = [
		"IF",
		"FF",
		"BK",
		"HK",
		"AIF",
		"SK",
		"FC",
		"SK",
		"BoIS",
		"FK",
		"BIS",
		"FIF",
		"IK"
		];
		return choice(data, this.rnd);
	}


	override string teamName() {
		final switch(uniform(0, 1, this.rnd)) {
			case 0: return addressCity() ~ " " ~ teamSuffix() ~ "'";
		}
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"####-#####",
		"####-######'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string cellPhoneFormats() {
		auto data = [
		"{{cell_phone.common_cell_prefix}}-###-####'"
		];
		return choice(data, this.rnd);
	}

	///
	string cellPhoneCommonCellPrefix() {
		auto data = [
		"56",
		"62",
		"59"
		];
		return choice(data, this.rnd);
	}

	///
	override string internetDomainSuffix() {
		auto data = [
		"se",
		"nu",
		"info",
		"com",
		"org'"
		];
		return choice(data, this.rnd);
	}

}
