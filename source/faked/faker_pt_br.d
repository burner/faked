// generated by fakerjsgenerator
///
module faked.faker_pt_br;

import faked.base;


///
class Faker_pt_br : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string locationStateAbbr() {
		auto data = [
		"AC",
		"AL",
		"AP",
		"AM",
		"BA",
		"CE",
		"DF",
		"ES",
		"GO",
		"MA",
		"MT",
		"MS",
		"MG",
		"PA",
		"PB",
		"PR",
		"PE",
		"PI",
		"RJ",
		"RN",
		"RS",
		"RO",
		"RR",
		"SC",
		"SP",
		"SE",
		"TO"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationState() {
		auto data = [
		"Acre",
		"Alagoas",
		"Amapá",
		"Amazonas",
		"Bahia",
		"Ceará",
		"Distrito Federal",
		"Espírito Santo",
		"Goiás",
		"Maranhão",
		"Mato Grosso",
		"Mato Grosso do Sul",
		"Minas Gerais",
		"Pará",
		"Paraíba",
		"Paraná",
		"Pernambuco",
		"Piauí",
		"Rio de Janeiro",
		"Rio Grande do Norte",
		"Rio Grande do Sul",
		"Rondônia",
		"Roraima",
		"Santa Catarina",
		"São Paulo",
		"Sergipe",
		"Tocantins"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationCountry() {
		auto data = [
		"Afeganistão",
		"Albânia",
		"Algéria",
		"Samoa",
		"Andorra",
		"Angola",
		"Anguila",
		"Antigua and Barbada",
		"Argentina",
		"Armênia",
		"Aruba",
		"Austrália",
		"Áustria",
		"Azerbaijão",
		"Bahamas",
		"Barém",
		"Bangladesh",
		"Barbados",
		"Bélgica",
		"Belize",
		"Benin",
		"Bermuda",
		"Butão",
		"Bolívia",
		"Bôsnia",
		"Botsuana",
		"Ilha Bouvet",
		"Brasil",
		"Arquipélago de Chagos",
		"Ilhas Virgens",
		"Brunei",
		"Bulgária",
		"Burkina Faso",
		"Burundi",
		"Camboja",
		"Camarões",
		"Canadá",
		"Cabo Verde",
		"Ilhas Caiman",
		"República da África Central",
		"Chade",
		"Chile",
		"China",
		"Ilha do Natal",
		"Ilhas Cocos",
		"Colômbia",
		"Comores",
		"Congo",
		"Ilhas Cook",
		"Costa Rica",
		"Costa do Marfim",
		"Croácia",
		"Cuba",
		"Chipre",
		"República Tcheca",
		"Dinamarca",
		"Jibuti",
		"Dominica",
		"República Dominicana",
		"Equador",
		"Egito",
		"El Salvador",
		"Guiné Equatorial",
		"Eritreia",
		"Estônia",
		"Etiópia",
		"Ilhas Faroe",
		"Malvinas",
		"Fiji",
		"Finlândia",
		"França",
		"Guiné Francesa",
		"Polinésia Francesa",
		"Gabão",
		"Gâmbia",
		"Georgia",
		"Alemanha",
		"Gana",
		"Gibraltar",
		"Grécia",
		"Groelândia",
		"Granada",
		"Guadalupe",
		"Guatemala",
		"Guernesey",
		"Guiné",
		"Guiné-Bissau",
		"Guiana",
		"Haiti",
		"Ilhas Heard e McDonald",
		"Vaticano",
		"Honduras",
		"Hong Kong",
		"Hungria",
		"Islândia",
		"Índia",
		"Indonésia",
		"Irã",
		"Iraque",
		"Irlanda",
		"Ilha de Man",
		"Israel",
		"Itália",
		"Jamaica",
		"Japão",
		"Jersey",
		"Jordânia",
		"Cazaquistão",
		"Quênia",
		"Quiribati",
		"Coreia do Norte",
		"Coreia do Sul",
		"Kuwait",
		"Quirguistão",
		"Laos",
		"Latvia",
		"Líbano",
		"Lesoto",
		"Libéria",
		"Líbia",
		"Liechtenstein",
		"Lituânia",
		"Luxemburgo",
		"Macao",
		"Macedônia",
		"Madagascar",
		"Malawi",
		"Malásia",
		"Maldives",
		"Mali",
		"Malta",
		"Ilhas Marshall",
		"Martinica",
		"Mauritânia",
		"Maurícia",
		"Maiote",
		"México",
		"Micronésia",
		"Moldávia",
		"Mônaco",
		"Mongólia",
		"Montenegro",
		"Montserrat",
		"Marrocos",
		"Moçambique",
		"Myanmar",
		"Namibia",
		"Nauru",
		"Nepal",
		"Antilhas Holandesas",
		"Países Baixos",
		"Nova Caledonia",
		"Nova Zelândia",
		"Nicarágua",
		"Nigéria",
		"Niue",
		"Ilha Norfolk",
		"Marianas Setentrionais",
		"Noruega",
		"Omã",
		"Paquistão",
		"Palau",
		"Território da Palestina",
		"Panamá",
		"Papua-Nova Guiné",
		"Paraguai",
		"Peru",
		"Filipinas",
		"Polônia",
		"Portugal",
		"Porto Rico",
		"Qatar",
		"Romênia",
		"Rússia",
		"Ruanda",
		"São Bartolomeu",
		"Santa Helena",
		"Santa Lúcia",
		"São Martinho",
		"São Pedro e Miquelão",
		"São Vicente e Granadinas",
		"San Marino",
		"Sao Tomé e Príncipe",
		"Arábia Saudita",
		"Senegal",
		"Sérvia",
		"Seicheles",
		"Serra Leoa",
		"Singapura",
		"Eslováquia",
		"Eslovênia",
		"Ilhas Salomão",
		"Somália",
		"África do Sul",
		"Ilhas Geórgia do Sul e Sandwich do Sul",
		"Espanha",
		"Sri Lanka",
		"Sudão",
		"Suriname",
		"Ilhas Svalbard & Jan Mayen",
		"Suazilândia",
		"Suécia",
		"Suíça",
		"Síria",
		"Taiwan",
		"Tajiquistão",
		"Tanzânia",
		"Tailândia",
		"Timor-Leste",
		"Togo",
		"Toquelau",
		"Tonga",
		"Trinidad e Tobago",
		"Tunísia",
		"Turquia",
		"Turcomenistão",
		"Turcas e Caicos",
		"Tuvalu",
		"Uganda",
		"Ucrânia",
		"Emirados Árabes Unidos",
		"Reino Unido",
		"Estados Unidos da América",
		"Estados Unidos das Ilhas Virgens",
		"Uruguai",
		"Uzbequistão",
		"Vanuatu",
		"Venezuela",
		"Vietnã",
		"Wallis e Futuna",
		"Iêmen",
		"Zâmbia",
		"Zimbábue"
		];
		return choice(data, this.rnd);
	}


	override string locationStreetPattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return personFirstName() ~ " " ~ locationStreetSuffix();
			case 1: return personLastName() ~ " " ~ locationStreetSuffix();
		}
	}

	///
	override string locationDefaultCountry() {
		auto data = [
		"Brasil'"
		];
		return choice(data, this.rnd);
	}


	override string locationCityPattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return personFirstName() ~ locationCitySuffix();
			case 1: return personLastName() ~ locationCitySuffix();
		}
	}

	///
	override string locationCitySuffix() {
		auto data = [
		" do Descoberto",
		" de Nossa Senhora",
		" do Norte",
		"do Sul'"
		];
		return choice(data, this.rnd);
	}

	///
	override string locationBuildingNumber() {
		auto data = [
		"#####",
		"####",
		"###'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationSecondaryAddress() {
		auto data = [
		"Apto. ###",
		"Sobrado ##",
		"Casa #",
		"Lote ##",
		"Quadra ##'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationPostcode() {
		auto data = [
		"#####-###'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string locationStreetSuffix() {
		auto data = [
		"Rua",
		"Avenida",
		"Travessa",
		"Alameda",
		"Marginal",
		"Rodovia'"
		];
		return choice(data, this.rnd);
	}

	///
	override string loremWords() {
		auto data = [
		"alias",
		"consequatur",
		"aut",
		"perferendis",
		"sit",
		"voluptatem",
		"accusantium",
		"doloremque",
		"aperiam",
		"eaque",
		"ipsa",
		"quae",
		"ab",
		"illo",
		"inventore",
		"veritatis",
		"et",
		"quasi",
		"architecto",
		"beatae",
		"vitae",
		"dicta",
		"sunt",
		"explicabo",
		"aspernatur",
		"odit",
		"fugit",
		"sed",
		"quia",
		"consequuntur",
		"magni",
		"dolores",
		"eos",
		"qui",
		"ratione",
		"sequi",
		"nesciunt",
		"neque",
		"dolorem",
		"ipsum",
		"dolor",
		"amet",
		"consectetur",
		"adipisci",
		"velit",
		"non",
		"numquam",
		"eius",
		"modi",
		"tempora",
		"incidunt",
		"ut",
		"labore",
		"dolore",
		"magnam",
		"aliquam",
		"quaerat",
		"enim",
		"ad",
		"minima",
		"veniam",
		"quis",
		"nostrum",
		"exercitationem",
		"ullam",
		"corporis",
		"nemo",
		"ipsam",
		"voluptas",
		"suscipit",
		"laboriosam",
		"nisi",
		"aliquid",
		"ex",
		"ea",
		"commodi",
		"autem",
		"vel",
		"eum",
		"iure",
		"reprehenderit",
		"in",
		"voluptate",
		"esse",
		"quam",
		"nihil",
		"molestiae",
		"iusto",
		"odio",
		"dignissimos",
		"ducimus",
		"blanditiis",
		"praesentium",
		"laudantium",
		"totam",
		"rem",
		"voluptatum",
		"deleniti",
		"atque",
		"corrupti",
		"quos",
		"quas",
		"molestias",
		"excepturi",
		"sint",
		"occaecati",
		"cupiditate",
		"provident",
		"perspiciatis",
		"unde",
		"omnis",
		"iste",
		"natus",
		"error",
		"similique",
		"culpa",
		"officia",
		"deserunt",
		"mollitia",
		"animi",
		"id",
		"est",
		"laborum",
		"dolorum",
		"fuga",
		"harum",
		"quidem",
		"rerum",
		"facilis",
		"expedita",
		"distinctio",
		"nam",
		"libero",
		"tempore",
		"cum",
		"soluta",
		"nobis",
		"eligendi",
		"optio",
		"cumque",
		"impedit",
		"quo",
		"porro",
		"quisquam",
		"minus",
		"quod",
		"maxime",
		"placeat",
		"facere",
		"possimus",
		"assumenda",
		"repellendus",
		"temporibus",
		"quibusdam",
		"illum",
		"fugiat",
		"nulla",
		"pariatur",
		"at",
		"vero",
		"accusamus",
		"officiis",
		"debitis",
		"necessitatibus",
		"saepe",
		"eveniet",
		"voluptates",
		"repudiandae",
		"recusandae",
		"itaque",
		"earum",
		"hic",
		"tenetur",
		"a",
		"sapiente",
		"delectus",
		"reiciendis",
		"voluptatibus",
		"maiores",
		"doloribus",
		"asperiores",
		"repellat"
		];
		return choice(data, this.rnd);
	}

	///
	override string companySuffix() {
		auto data = [
		"S.A.",
		"LTDA",
		"EIRELI",
		"e Associados",
		"Comércio'"
		];
		return choice(data, this.rnd);
	}


	override string companyNamePattern() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return personLastName() ~ " " ~ companySuffix();
			case 1: return personLastName() ~ "-" ~ personLastName();
			case 2: return personLastName();
			case 3: return personLastName() ~ " e " ~ personLastName();
		}
	}

	///
	override string commerceDepartment() {
		auto data = [
		"Livros",
		"Filmes",
		"Música",
		"Jogos",
		"Eletrônicos",
		"Computadores",
		"Casa",
		"Jardim",
		"Ferramentas",
		"Mercearia",
		"Saúde",
		"Beleza",
		"Brinquedos",
		"Crianças",
		"Bebê",
		"Roupas",
		"Sapatos",
		"Jóias",
		"Esportes",
		"Turismo",
		"Automotivo",
		"Industrial"
		];
		return choice(data, this.rnd);
	}

	///
	override string colorHuman() {
		auto data = [
		"amarelo",
		"âmbar",
		"ametista",
		"azul",
		"azul celeste",
		"azul marinho",
		"azul petróleo",
		"açafrão",
		"bordô",
		"bronze",
		"caramelo",
		"castanho ",
		"cenoura",
		"cinza",
		"cobre",
		"coral",
		"dourado",
		"escarlate",
		"esmeralda",
		"ferrugem",
		"fuligem",
		"fúchsia",
		"grená",
		"índigo",
		"jade",
		"laranja",
		"lilás",
		"limão",
		"madeira",
		"magenta",
		"marrom",
		"ouro",
		"pele",
		"prata",
		"preto",
		"púrpura",
		"rosa",
		"roxo",
		"salmão",
		"turquesa",
		"verde",
		"verde lima",
		"verde-azulado",
		"vermelho",
		"violeta"
		];
		return choice(data, this.rnd);
	}

	///
	override string dateWeekday() {
		auto data = [
		"wide: ['Domingo",
		"Segunda",
		"Terça",
		"Quarta",
		"Quinta",
		"Sexta",
		"Sábado']",
		"abbr: ['Dom",
		"Seg",
		"Ter",
		"Qua",
		"Qui",
		"Sex",
		"Sáb']"
		];
		return choice(data, this.rnd);
	}


	override string dateMonth() {
		final switch(uniform(0, 28, this.rnd)) {
			case 0: return "wide: [";
			case 1: return "Janeiro";
			case 2: return "Fevereiro";
			case 3: return "Março";
			case 4: return "Abril";
			case 5: return "Maio";
			case 6: return "Junho";
			case 7: return "Julho";
			case 8: return "Agosto";
			case 9: return "Setembro";
			case 10: return "Outubro";
			case 11: return "Novembro";
			case 12: return "Dezembro";
			case 13: return "]";
			case 14: return "abbr: [";
			case 15: return "Jan";
			case 16: return "Fev";
			case 17: return "Mar";
			case 18: return "Abr";
			case 19: return "Mai";
			case 20: return "Jun";
			case 21: return "Jul";
			case 22: return "Ago";
			case 23: return "Set";
			case 24: return "Out";
			case 25: return "Nov";
			case 26: return "Dez";
			case 27: return "]";
		}
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"(##) ####-####",
		"+55 (##) ####-####",
		"(##) #####-####'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string internetFreeEmail() {
		auto data = [
		"gmail.com",
		"yahoo.com",
		"hotmail.com",
		"live.com",
		"bol.com.br"
		];
		return choice(data, this.rnd);
	}

	///
	override string internetDomainSuffix() {
		auto data = [
		"br",
		"com",
		"biz",
		"info",
		"name",
		"net",
		"org'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personMalePrefix() {
		auto data = [
		"Sr.",
		"Dr.'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personFemalePrefix() {
		auto data = [
		"Sra.",
		"Srta.",
		"Dra.'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personMaleFirstName() {
		auto data = [
		"Alessandro",
		"Alexandre",
		"Anthony",
		"Antônio",
		"Arthur",
		"Benjamin",
		"Benício",
		"Bernardo",
		"Breno",
		"Bryan",
		"Caio",
		"Calebe",
		"Carlos",
		"Cauã",
		"César",
		"Daniel",
		"Danilo",
		"Davi",
		"Davi Lucca",
		"Deneval",
		"Eduardo",
		"Elísio",
		"Emanuel",
		"Enzo",
		"Enzo Gabriel",
		"Fabiano",
		"Fabrício",
		"Feliciano",
		"Felipe",
		"Frederico",
		"Fábio",
		"Félix",
		"Gabriel",
		"Gael",
		"Guilherme",
		"Gustavo",
		"Gúbio",
		"Heitor",
		"Henrique",
		"Hugo",
		"Hélio",
		"Isaac",
		"Joaquim",
		"João",
		"João Lucas",
		"João Miguel",
		"João Pedro",
		"Júlio",
		"Júlio César",
		"Kléber",
		"Ladislau",
		"Leonardo",
		"Lorenzo",
		"Lucas",
		"Lucca",
		"Marcelo",
		"Marcos",
		"Matheus",
		"Miguel",
		"Murilo",
		"Nataniel",
		"Nicolas",
		"Noah",
		"Norberto",
		"Pablo",
		"Paulo",
		"Pedro",
		"Pedro Henrique",
		"Pietro",
		"Rafael",
		"Raul",
		"Ricardo",
		"Roberto",
		"Salvador",
		"Samuel",
		"Silas",
		"Sirineu",
		"Tertuliano",
		"Théo",
		"Vicente",
		"Vitor",
		"Víctor",
		"Warley",
		"Washington",
		"Yago",
		"Yango",
		"Yuri",
		"Ígor"
		];
		return choice(data, this.rnd);
	}

	///
	override string personWesternZodiacSign() {
		auto data = [
		"Aquário",
		"Peixes",
		"Áries",
		"Touro",
		"Gêmeos",
		"Câncer",
		"Leão",
		"Virgem",
		"Libra",
		"Escorpião",
		"Sagitário",
		"Capricórnio"
		];
		return choice(data, this.rnd);
	}

	///
	override string personSuffix() {
		auto data = [
		"Jr.",
		"Neto",
		"Filho'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personSex() {
		auto data = [
		"Feminino",
		"Masculino'"
		];
		return choice(data, this.rnd);
	}

	///
	override string personLastName() {
		auto data = [
		"Silva",
		"Souza",
		"Carvalho",
		"Santos",
		"Reis",
		"Xavier",
		"Franco",
		"Braga",
		"Macedo",
		"Batista",
		"Barros",
		"Moraes",
		"Costa",
		"Pereira",
		"Melo",
		"Saraiva",
		"Nogueira",
		"Oliveira",
		"Martins",
		"Moreira",
		"Albuquerque"
		];
		return choice(data, this.rnd);
	}


	override string personTitle() {
		final switch(uniform(0, 89, this.rnd)) {
			case 0: return "descriptor: [";
			case 1: return "Líder";
			case 2: return "Senior";
			case 3: return "Direto";
			case 4: return "Corporativo";
			case 5: return "Dinâmico";
			case 6: return "Futuro";
			case 7: return "Produto";
			case 8: return "Nacional";
			case 9: return "Regional";
			case 10: return "Distrito";
			case 11: return "Central";
			case 12: return "Global";
			case 13: return "Cliente";
			case 14: return "Investidor";
			case 15: return "International";
			case 16: return "Legado";
			case 17: return "Avançar";
			case 18: return "Interno";
			case 19: return "Humano";
			case 20: return "Chefe";
			case 21: return "Principal";
			case 22: return "]";
			case 23: return "level: [";
			case 24: return "Soluções";
			case 25: return "Programa";
			case 26: return "Marca";
			case 27: return "Segurança";
			case 28: return "Pesquisar";
			case 29: return "Marketing";
			case 30: return "Diretivas";
			case 31: return "Implementation";
			case 32: return "Implementação";
			case 33: return "Funcionalidade";
			case 34: return "Resposta";
			case 35: return "Paradigma";
			case 36: return "Táticas";
			case 37: return "Identidade";
			case 38: return "Mercados";
			case 39: return "Grupo";
			case 40: return "Divisão";
			case 41: return "Aplicações";
			case 42: return "Otimização";
			case 43: return "Operações";
			case 44: return "Infraestrutura";
			case 45: return "Intranet";
			case 46: return "Comunicações";
			case 47: return "Web";
			case 48: return "Branding";
			case 49: return "Qualidade";
			case 50: return "Assurance";
			case 51: return "Mobilidade";
			case 52: return "Contas";
			case 53: return "Dados";
			case 54: return "Criativo";
			case 55: return "Configuration";
			case 56: return "Prestação de contas";
			case 57: return "Interações";
			case 58: return "Fatores";
			case 59: return "Usabilidade";
			case 60: return "Métricas";
			case 61: return "]";
			case 62: return "job: [";
			case 63: return "Supervisor";
			case 64: return "Associado";
			case 65: return "Executivo";
			case 66: return "Atentende";
			case 67: return "Policial";
			case 68: return "Gerente";
			case 69: return "Engenheiro";
			case 70: return "Especialista";
			case 71: return "Diretor";
			case 72: return "Coordenador";
			case 73: return "Administrador";
			case 74: return "Arquiteto";
			case 75: return "Analista";
			case 76: return "Designer";
			case 77: return "Planejador";
			case 78: return "Orquestrador";
			case 79: return "Técnico";
			case 80: return "Desenvolvedor";
			case 81: return "Produtor";
			case 82: return "Consultor";
			case 83: return "Assistente";
			case 84: return "Facilitador";
			case 85: return "Agente";
			case 86: return "Representante";
			case 87: return "Estrategista";
			case 88: return "]";
		}
	}


	override string personName() {
		final switch(uniform(0, 10, this.rnd)) {
			case 0: return "{";
			case 1: return "value: '" ~ personPrefix() ~ " " ~ personFirstName() ~ " " ~ personLastName();
			case 2: return "weight: 1";
			case 3: return "}";
			case 4: return "{";
			case 5: return "value: '" ~ personFirstName() ~ " " ~ personLastName() ~ " " ~ personSuffix();
			case 6: return "weight: 1";
			case 7: return "}";
			case 8: return "{ value: '" ~ personFirstName() ~ " " ~ personLastName();
			case 9: return "weight: 8 }";
		}
	}

	///
	override string personFemaleFirstName() {
		auto data = [
		"Alessandra",
		"Alice",
		"Aline",
		"Alícia",
		"Ana Clara",
		"Ana Júlia",
		"Ana Laura",
		"Ana Luiza",
		"Antonella",
		"Beatriz",
		"Bruna",
		"Carla",
		"Cecília",
		"Clara",
		"Célia",
		"Dalila",
		"Eduarda",
		"Elisa",
		"Eloá",
		"Emanuelly",
		"Esther",
		"Fabrícia",
		"Felícia",
		"Giovanna",
		"Helena",
		"Heloísa",
		"Isabel",
		"Isabela",
		"Isabella",
		"Isabelly",
		"Isis",
		"Janaína",
		"Joana",
		"Júlia",
		"Karla",
		"Lara",
		"Larissa",
		"Laura",
		"Lavínia",
		"Liz",
		"Lorena",
		"Lorraine",
		"Luiza",
		"Lívia",
		"Maitê",
		"Manuela",
		"Marcela",
		"Margarida",
		"Maria",
		"Maria Alice",
		"Maria Cecília",
		"Maria Clara",
		"Maria Eduarda",
		"Maria Helena",
		"Maria Júlia",
		"Maria Luiza",
		"Mariana",
		"Marina",
		"Marli",
		"Meire",
		"Melissa",
		"Morgana",
		"Márcia",
		"Mércia",
		"Natália",
		"Núbia",
		"Ofélia",
		"Paula",
		"Rafaela",
		"Rebeca",
		"Roberta",
		"Sara",
		"Sarah",
		"Sophia",
		"Suélen",
		"Sílvia",
		"Talita",
		"Valentina",
		"Vitória",
		"Yasmin"
		];
		return choice(data, this.rnd);
	}

	///
	override string personFirstName() {
		auto data = [
		"Alessandra",
		"Alessandro",
		"Alexandre",
		"Alice",
		"Aline",
		"Alícia",
		"Ana Clara",
		"Ana Júlia",
		"Ana Laura",
		"Ana Luiza",
		"Anthony",
		"Antonella",
		"Antônio",
		"Arthur",
		"Beatriz",
		"Benjamin",
		"Benício",
		"Bernardo",
		"Breno",
		"Bruna",
		"Bryan",
		"Caio",
		"Calebe",
		"Carla",
		"Carlos",
		"Cauã",
		"Cecília",
		"Clara",
		"Célia",
		"César",
		"Dalila",
		"Daniel",
		"Danilo",
		"Davi",
		"Davi Lucca",
		"Deneval",
		"Eduarda",
		"Eduardo",
		"Elisa",
		"Eloá",
		"Elísio",
		"Emanuel",
		"Emanuelly",
		"Enzo",
		"Enzo Gabriel",
		"Esther",
		"Fabiano",
		"Fabrícia",
		"Fabrício",
		"Feliciano",
		"Felipe",
		"Felícia",
		"Frederico",
		"Fábio",
		"Félix",
		"Gabriel",
		"Gael",
		"Giovanna",
		"Guilherme",
		"Gustavo",
		"Gúbio",
		"Heitor",
		"Helena",
		"Heloísa",
		"Henrique",
		"Hugo",
		"Hélio",
		"Isaac",
		"Isabel",
		"Isabela",
		"Isabella",
		"Isabelly",
		"Isadora",
		"Isis",
		"Janaína",
		"Joana",
		"Joaquim",
		"João",
		"João Lucas",
		"João Miguel",
		"João Pedro",
		"Júlia",
		"Júlio",
		"Júlio César",
		"Karla",
		"Kléber",
		"Ladislau",
		"Lara",
		"Larissa",
		"Laura",
		"Lavínia",
		"Leonardo",
		"Liz",
		"Lorena",
		"Lorenzo",
		"Lorraine",
		"Lucas",
		"Lucca",
		"Luiza",
		"Lívia",
		"Maitê",
		"Manuela",
		"Marcela",
		"Marcelo",
		"Marcos",
		"Margarida",
		"Maria",
		"Maria Alice",
		"Maria Cecília",
		"Maria Clara",
		"Maria Eduarda",
		"Maria Helena",
		"Maria Júlia",
		"Maria Luiza",
		"Mariana",
		"Marina",
		"Marli",
		"Matheus",
		"Meire",
		"Melissa",
		"Miguel",
		"Morgana",
		"Murilo",
		"Márcia",
		"Mércia",
		"Nataniel",
		"Natália",
		"Nicolas",
		"Noah",
		"Norberto",
		"Núbia",
		"Ofélia",
		"Pablo",
		"Paula",
		"Paulo",
		"Pedro",
		"Pedro Henrique",
		"Pietro",
		"Rafael",
		"Rafaela",
		"Raul",
		"Rebeca",
		"Ricardo",
		"Roberta",
		"Roberto",
		"Salvador",
		"Samuel",
		"Sara",
		"Sarah",
		"Silas",
		"Sirineu",
		"Sophia",
		"Suélen",
		"Sílvia",
		"Talita",
		"Tertuliano",
		"Théo",
		"Valentina",
		"Vicente",
		"Vitor",
		"Vitória",
		"Víctor",
		"Warley",
		"Washington",
		"Yago",
		"Yango",
		"Yasmin",
		"Yuri",
		"Ígor"
		];
		return choice(data, this.rnd);
	}


	override string personLastNamePattern() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return "{ value: '" ~ personLastName();
			case 1: return "weight: 1 }";
		}
	}

}
