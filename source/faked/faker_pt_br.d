// generated by fakerjsgenerator
///
module faked.faker_pt_br;

import faked.base;


///
class Faker_pt_br : Faker {
@safe:
	import std.random;
	import std.array;
	import std.format;
	import std.conv : to;

	///
	this(int seed) {
        super(seed);
	}

	///
	override string loremWords() {
		auto data = [
		"alias",
		"consequatur",
		"aut",
		"perferendis",
		"sit",
		"voluptatem",
		"accusantium",
		"doloremque",
		"aperiam",
		"eaque",
		"ipsa",
		"quae",
		"ab",
		"illo",
		"inventore",
		"veritatis",
		"et",
		"quasi",
		"architecto",
		"beatae",
		"vitae",
		"dicta",
		"sunt",
		"explicabo",
		"aspernatur",
		"aut",
		"odit",
		"aut",
		"fugit",
		"sed",
		"quia",
		"consequuntur",
		"magni",
		"dolores",
		"eos",
		"qui",
		"ratione",
		"voluptatem",
		"sequi",
		"nesciunt",
		"neque",
		"dolorem",
		"ipsum",
		"quia",
		"dolor",
		"sit",
		"amet",
		"consectetur",
		"adipisci",
		"velit",
		"sed",
		"quia",
		"non",
		"numquam",
		"eius",
		"modi",
		"tempora",
		"incidunt",
		"ut",
		"labore",
		"et",
		"dolore",
		"magnam",
		"aliquam",
		"quaerat",
		"voluptatem",
		"ut",
		"enim",
		"ad",
		"minima",
		"veniam",
		"quis",
		"nostrum",
		"exercitationem",
		"ullam",
		"corporis",
		"nemo",
		"enim",
		"ipsam",
		"voluptatem",
		"quia",
		"voluptas",
		"sit",
		"suscipit",
		"laboriosam",
		"nisi",
		"ut",
		"aliquid",
		"ex",
		"ea",
		"commodi",
		"consequatur",
		"quis",
		"autem",
		"vel",
		"eum",
		"iure",
		"reprehenderit",
		"qui",
		"in",
		"ea",
		"voluptate",
		"velit",
		"esse",
		"quam",
		"nihil",
		"molestiae",
		"et",
		"iusto",
		"odio",
		"dignissimos",
		"ducimus",
		"qui",
		"blanditiis",
		"praesentium",
		"laudantium",
		"totam",
		"rem",
		"voluptatum",
		"deleniti",
		"atque",
		"corrupti",
		"quos",
		"dolores",
		"et",
		"quas",
		"molestias",
		"excepturi",
		"sint",
		"occaecati",
		"cupiditate",
		"non",
		"provident",
		"sed",
		"ut",
		"perspiciatis",
		"unde",
		"omnis",
		"iste",
		"natus",
		"error",
		"similique",
		"sunt",
		"in",
		"culpa",
		"qui",
		"officia",
		"deserunt",
		"mollitia",
		"animi",
		"id",
		"est",
		"laborum",
		"et",
		"dolorum",
		"fuga",
		"et",
		"harum",
		"quidem",
		"rerum",
		"facilis",
		"est",
		"et",
		"expedita",
		"distinctio",
		"nam",
		"libero",
		"tempore",
		"cum",
		"soluta",
		"nobis",
		"est",
		"eligendi",
		"optio",
		"cumque",
		"nihil",
		"impedit",
		"quo",
		"porro",
		"quisquam",
		"est",
		"qui",
		"minus",
		"id",
		"quod",
		"maxime",
		"placeat",
		"facere",
		"possimus",
		"omnis",
		"voluptas",
		"assumenda",
		"est",
		"omnis",
		"dolor",
		"repellendus",
		"temporibus",
		"autem",
		"quibusdam",
		"et",
		"aut",
		"consequatur",
		"vel",
		"illum",
		"qui",
		"dolorem",
		"eum",
		"fugiat",
		"quo",
		"voluptas",
		"nulla",
		"pariatur",
		"at",
		"vero",
		"eos",
		"et",
		"accusamus",
		"officiis",
		"debitis",
		"aut",
		"rerum",
		"necessitatibus",
		"saepe",
		"eveniet",
		"ut",
		"et",
		"voluptates",
		"repudiandae",
		"sint",
		"et",
		"molestiae",
		"non",
		"recusandae",
		"itaque",
		"earum",
		"rerum",
		"hic",
		"tenetur",
		"a",
		"sapiente",
		"delectus",
		"ut",
		"aut",
		"reiciendis",
		"voluptatibus",
		"maiores",
		"doloribus",
		"asperiores",
		"repellat"
		];
		return choice(data, this.rnd);
	}

	///
	override string companySuffix() {
		auto data = [
		"S.A.",
		"LTDA",
		"EIRELI",
		"e Associados",
		"Comércio'"
		];
		return choice(data, this.rnd);
	}


	override string companyName() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return nameLastName() ~ " " ~ companySuffix();
			case 1: return nameLastName() ~ "-" ~ nameLastName();
			case 2: return nameLastName();
			case 3: return nameLastName() ~ " e " ~ nameLastName();
		}
	}

	///
	override string nameMaleFirstName() {
		auto data = [
		"Alessandro",
		"Alexandre",
		"Anthony",
		"Antônio",
		"Arthur",
		"Benjamin",
		"Benício",
		"Bernardo",
		"Breno",
		"Bryan",
		"Caio",
		"Calebe",
		"Carlos",
		"Cauã",
		"César",
		"Daniel",
		"Danilo",
		"Davi",
		"Davi Lucca",
		"Deneval",
		"Eduardo",
		"Elísio",
		"Emanuel",
		"Enzo",
		"Enzo Gabriel",
		"Fabiano",
		"Fabrício",
		"Feliciano",
		"Felipe",
		"Frederico",
		"Fábio",
		"Félix",
		"Gabriel",
		"Gael",
		"Guilherme",
		"Gustavo",
		"Gúbio",
		"Heitor",
		"Henrique",
		"Hugo",
		"Hélio",
		"Isaac",
		"Joaquim",
		"João",
		"João Lucas",
		"João Miguel",
		"João Pedro",
		"Júlio",
		"Júlio César",
		"Kléber",
		"Ladislau",
		"Leonardo",
		"Lorenzo",
		"Lucas",
		"Lucca",
		"Marcelo",
		"Marcos",
		"Matheus",
		"Miguel",
		"Murilo",
		"Nataniel",
		"Nicolas",
		"Noah",
		"Norberto",
		"Pablo",
		"Paulo",
		"Pedro",
		"Pedro Henrique",
		"Pietro",
		"Rafael",
		"Raul",
		"Ricardo",
		"Roberto",
		"Salvador",
		"Samuel",
		"Silas",
		"Sirineu",
		"Tertuliano",
		"Théo",
		"Vicente",
		"Vitor",
		"Víctor",
		"Warley",
		"Washington",
		"Yago",
		"Yango",
		"Yuri",
		"Ígor"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameSuffix() {
		auto data = [
		"Jr.",
		"Neto",
		"Filho'"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameLastName() {
		auto data = [
		"Silva",
		"Souza",
		"Carvalho",
		"Santos",
		"Reis",
		"Xavier",
		"Franco",
		"Braga",
		"Macedo",
		"Batista",
		"Barros",
		"Moraes",
		"Costa",
		"Pereira",
		"Carvalho",
		"Melo",
		"Saraiva",
		"Nogueira",
		"Oliveira",
		"Martins",
		"Moreira",
		"Albuquerque"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameFirstName() {
		auto data = [
		"Alessandra",
		"Alessandro",
		"Alexandre",
		"Alice",
		"Aline",
		"Alícia",
		"Ana Clara",
		"Ana Júlia",
		"Ana Laura",
		"Ana Luiza",
		"Anthony",
		"Antonella",
		"Antônio",
		"Arthur",
		"Beatriz",
		"Benjamin",
		"Benício",
		"Bernardo",
		"Breno",
		"Bruna",
		"Bryan",
		"Caio",
		"Calebe",
		"Carla",
		"Carlos",
		"Cauã",
		"Cecília",
		"Clara",
		"Célia",
		"César",
		"Dalila",
		"Daniel",
		"Danilo",
		"Davi",
		"Davi Lucca",
		"Deneval",
		"Eduarda",
		"Eduardo",
		"Elisa",
		"Eloá",
		"Elísio",
		"Emanuel",
		"Emanuelly",
		"Enzo",
		"Enzo Gabriel",
		"Esther",
		"Fabiano",
		"Fabrícia",
		"Fabrício",
		"Feliciano",
		"Felipe",
		"Felícia",
		"Frederico",
		"Fábio",
		"Félix",
		"Gabriel",
		"Gael",
		"Giovanna",
		"Guilherme",
		"Gustavo",
		"Gúbio",
		"Heitor",
		"Helena",
		"Heloísa",
		"Henrique",
		"Hugo",
		"Hélio",
		"Isaac",
		"Isabel",
		"Isabela",
		"Isabella",
		"Isabelly",
		"Isadora",
		"Isis",
		"Janaína",
		"Joana",
		"Joaquim",
		"João",
		"João Lucas",
		"João Miguel",
		"João Pedro",
		"Júlia",
		"Júlio",
		"Júlio César",
		"Karla",
		"Kléber",
		"Ladislau",
		"Lara",
		"Larissa",
		"Laura",
		"Lavínia",
		"Leonardo",
		"Liz",
		"Lorena",
		"Lorenzo",
		"Lorraine",
		"Lucas",
		"Lucca",
		"Luiza",
		"Lívia",
		"Maitê",
		"Manuela",
		"Marcela",
		"Marcelo",
		"Marcos",
		"Margarida",
		"Maria",
		"Maria Alice",
		"Maria Cecília",
		"Maria Clara",
		"Maria Eduarda",
		"Maria Helena",
		"Maria Júlia",
		"Maria Luiza",
		"Mariana",
		"Marina",
		"Marli",
		"Matheus",
		"Meire",
		"Melissa",
		"Miguel",
		"Morgana",
		"Murilo",
		"Márcia",
		"Mércia",
		"Nataniel",
		"Natália",
		"Nicolas",
		"Noah",
		"Norberto",
		"Núbia",
		"Ofélia",
		"Pablo",
		"Paula",
		"Paulo",
		"Pedro",
		"Pedro Henrique",
		"Pietro",
		"Rafael",
		"Rafaela",
		"Raul",
		"Rebeca",
		"Ricardo",
		"Roberta",
		"Roberto",
		"Salvador",
		"Samuel",
		"Sara",
		"Sarah",
		"Silas",
		"Sirineu",
		"Sophia",
		"Suélen",
		"Sílvia",
		"Talita",
		"Tertuliano",
		"Théo",
		"Valentina",
		"Vicente",
		"Vitor",
		"Vitória",
		"Víctor",
		"Warley",
		"Washington",
		"Yago",
		"Yango",
		"Yasmin",
		"Yuri",
		"Ígor"
		];
		return choice(data, this.rnd);
	}


	override string nameName() {
		final switch(uniform(0, 6, this.rnd)) {
			case 0: return namePrefix() ~ " " ~ nameFirstName() ~ " " ~ nameLastName();
			case 1: return nameFirstName() ~ " " ~ nameLastName() ~ " " ~ nameSuffix();
			case 2: return nameFirstName() ~ " " ~ nameLastName();
			case 3: return nameFirstName() ~ " " ~ nameLastName();
			case 4: return nameMaleFirstName() ~ " " ~ nameLastName();
			case 5: return nameFemaleFirstName() ~ " " ~ nameLastName();
		}
	}

	///
	override string nameFemaleFirstName() {
		auto data = [
		"Alessandra",
		"Alice",
		"Aline",
		"Alícia",
		"Ana Clara",
		"Ana Júlia",
		"Ana Laura",
		"Ana Luiza",
		"Antonella",
		"Beatriz",
		"Bruna",
		"Carla",
		"Cecília",
		"Clara",
		"Célia",
		"Dalila",
		"Eduarda",
		"Elisa",
		"Eloá",
		"Emanuelly",
		"Esther",
		"Fabrícia",
		"Felícia",
		"Giovanna",
		"Helena",
		"Heloísa",
		"Isabel",
		"Isabela",
		"Isabella",
		"Isabelly",
		"Isis",
		"Janaína",
		"Joana",
		"Júlia",
		"Karla",
		"Lara",
		"Larissa",
		"Laura",
		"Lavínia",
		"Liz",
		"Lorena",
		"Lorraine",
		"Luiza",
		"Lívia",
		"Maitê",
		"Manuela",
		"Marcela",
		"Margarida",
		"Maria",
		"Maria Alice",
		"Maria Cecília",
		"Maria Clara",
		"Maria Eduarda",
		"Maria Helena",
		"Maria Júlia",
		"Maria Luiza",
		"Mariana",
		"Marina",
		"Marli",
		"Meire",
		"Melissa",
		"Morgana",
		"Márcia",
		"Mércia",
		"Natália",
		"Núbia",
		"Ofélia",
		"Paula",
		"Rafaela",
		"Rebeca",
		"Roberta",
		"Sara",
		"Sarah",
		"Sophia",
		"Suélen",
		"Sílvia",
		"Talita",
		"Valentina",
		"Vitória",
		"Yasmin"
		];
		return choice(data, this.rnd);
	}

	///
	override string nameBinaryGender() {
		auto data = [
		"Feminino",
		"Masculino'"
		];
		return choice(data, this.rnd);
	}

	///
	override string namePrefix() {
		auto data = [
		"Sr.",
		"Sra.",
		"Srta.",
		"Dr.",
		"Dra.'"
		];
		return choice(data, this.rnd);
	}

	///
	override string commerceDepartment() {
		auto data = [
		"Livros",
		"Filmes",
		"Música",
		"Jogos",
		"Eletrônicos",
		"Computadores",
		"Casa",
		"Jardim",
		"Ferramentas",
		"Mercearia",
		"Saúde",
		"Beleza",
		"Brinquedos",
		"Crianças",
		"Bebê",
		"Roupas",
		"Sapatos",
		"Jóias",
		"Esportes",
		"Turismo",
		"Automotivo",
		"Industrial"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressStateAbbr() {
		auto data = [
		"AC",
		"AL",
		"AP",
		"AM",
		"BA",
		"CE",
		"DF",
		"ES",
		"GO",
		"MA",
		"MT",
		"MS",
		"MG",
		"PA",
		"PB",
		"PR",
		"PE",
		"PI",
		"RJ",
		"RN",
		"RS",
		"RO",
		"RR",
		"SC",
		"SP",
		"SE",
		"TO"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressState() {
		auto data = [
		"Acre",
		"Alagoas",
		"Amapá",
		"Amazonas",
		"Bahia",
		"Ceará",
		"Distrito Federal",
		"Espírito Santo",
		"Goiás",
		"Maranhão",
		"Mato Grosso",
		"Mato Grosso do Sul",
		"Minas Gerais",
		"Pará",
		"Paraíba",
		"Paraná",
		"Pernambuco",
		"Piauí",
		"Rio de Janeiro",
		"Rio Grande do Norte",
		"Rio Grande do Sul",
		"Rondônia",
		"Roraima",
		"Santa Catarina",
		"São Paulo",
		"Sergipe",
		"Tocantins"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCountry() {
		auto data = [
		"Afeganistão",
		"Albânia",
		"Algéria",
		"Samoa",
		"Andorra",
		"Angola",
		"Anguila",
		"Antigua and Barbada",
		"Argentina",
		"Armênia",
		"Aruba",
		"Austrália",
		"Áustria",
		"Azerbaijão",
		"Bahamas",
		"Barém",
		"Bangladesh",
		"Barbados",
		"Bélgica",
		"Belize",
		"Benin",
		"Bermuda",
		"Butão",
		"Bolívia",
		"Bôsnia",
		"Botsuana",
		"Ilha Bouvet",
		"Brasil",
		"Arquipélago de Chagos",
		"Ilhas Virgens",
		"Brunei",
		"Bulgária",
		"Burkina Faso",
		"Burundi",
		"Camboja",
		"Camarões",
		"Canadá",
		"Cabo Verde",
		"Ilhas Caiman",
		"República da África Central",
		"Chade",
		"Chile",
		"China",
		"Ilha do Natal",
		"Ilhas Cocos",
		"Colômbia",
		"Comores",
		"Congo",
		"Ilhas Cook",
		"Costa Rica",
		"Costa do Marfim",
		"Croácia",
		"Cuba",
		"Chipre",
		"República Tcheca",
		"Dinamarca",
		"Jibuti",
		"Dominica",
		"República Dominicana",
		"Equador",
		"Egito",
		"El Salvador",
		"Guiné Equatorial",
		"Eritreia",
		"Estônia",
		"Etiópia",
		"Ilhas Faroe",
		"Malvinas",
		"Fiji",
		"Finlândia",
		"França",
		"Guiné Francesa",
		"Polinésia Francesa",
		"Gabão",
		"Gâmbia",
		"Georgia",
		"Alemanha",
		"Gana",
		"Gibraltar",
		"Grécia",
		"Groelândia",
		"Granada",
		"Guadalupe",
		"Guatemala",
		"Guernesey",
		"Guiné",
		"Guiné-Bissau",
		"Guiana",
		"Haiti",
		"Ilhas Heard e McDonald",
		"Vaticano",
		"Honduras",
		"Hong Kong",
		"Hungria",
		"Islândia",
		"Índia",
		"Indonésia",
		"Irã",
		"Iraque",
		"Irlanda",
		"Ilha de Man",
		"Israel",
		"Itália",
		"Jamaica",
		"Japão",
		"Jersey",
		"Jordânia",
		"Cazaquistão",
		"Quênia",
		"Quiribati",
		"Coreia do Norte",
		"Coreia do Sul",
		"Kuwait",
		"Quirguistão",
		"Laos",
		"Latvia",
		"Líbano",
		"Lesoto",
		"Libéria",
		"Líbia",
		"Liechtenstein",
		"Lituânia",
		"Luxemburgo",
		"Macao",
		"Macedônia",
		"Madagascar",
		"Malawi",
		"Malásia",
		"Maldives",
		"Mali",
		"Malta",
		"Ilhas Marshall",
		"Martinica",
		"Mauritânia",
		"Maurícia",
		"Maiote",
		"México",
		"Micronésia",
		"Moldávia",
		"Mônaco",
		"Mongólia",
		"Montenegro",
		"Montserrat",
		"Marrocos",
		"Moçambique",
		"Myanmar",
		"Namibia",
		"Nauru",
		"Nepal",
		"Antilhas Holandesas",
		"Holanda",
		"Nova Caledonia",
		"Nova Zelândia",
		"Nicarágua",
		"Nigéria",
		"Niue",
		"Ilha Norfolk",
		"Marianas Setentrionais",
		"Noruega",
		"Omã",
		"Paquistão",
		"Palau",
		"Território da Palestina",
		"Panamá",
		"Papua-Nova Guiné",
		"Paraguai",
		"Peru",
		"Filipinas",
		"Polônia",
		"Portugal",
		"Porto Rico",
		"Qatar",
		"Romênia",
		"Rússia",
		"Ruanda",
		"São Bartolomeu",
		"Santa Helena",
		"Santa Lúcia",
		"São Martinho",
		"São Pedro e Miquelão",
		"São Vicente e Granadinas",
		"Samoa",
		"San Marino",
		"Sao Tomé e Príncipe",
		"Arábia Saudita",
		"Senegal",
		"Sérvia",
		"Seicheles",
		"Serra Leoa",
		"Singapura",
		"Eslováquia",
		"Eslovênia",
		"Ilhas Salomão",
		"Somália",
		"África do Sul",
		"Ilhas Geórgia do Sul e Sandwich do Sul",
		"Espanha",
		"Sri Lanka",
		"Sudão",
		"Suriname",
		"Ilhas Svalbard & Jan Mayen",
		"Suazilândia",
		"Suécia",
		"Suíça",
		"Síria",
		"Taiwan",
		"Tajiquistão",
		"Tanzânia",
		"Tailândia",
		"Timor-Leste",
		"Togo",
		"Toquelau",
		"Tonga",
		"Trinidad e Tobago",
		"Tunísia",
		"Turquia",
		"Turcomenistão",
		"Turcas e Caicos",
		"Tuvalu",
		"Uganda",
		"Ucrânia",
		"Emirados Árabes Unidos",
		"Reino Unido",
		"Estados Unidos da América",
		"Estados Unidos das Ilhas Virgens",
		"Uruguai",
		"Uzbequistão",
		"Vanuatu",
		"Venezuela",
		"Vietnã",
		"Wallis e Futuna",
		"Iêmen",
		"Zâmbia",
		"Zimbábue"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressDefaultCountry() {
		auto data = [
		"Brasil'"
		];
		return choice(data, this.rnd);
	}

	///
	override string addressCitySuffix() {
		auto data = [
		" do Descoberto",
		" de Nossa Senhora",
		" do Norte",
		"do Sul'"
		];
		return choice(data, this.rnd);
	}


	override string addressCityPrefix() {
		final switch(uniform(0, 0, this.rnd)) {
		}
	}


	override string addressStreet() {
		final switch(uniform(0, 2, this.rnd)) {
			case 0: return nameFirstname() ~ " " ~ addressStreetSuffix();
			case 1: return nameLastname() ~ " " ~ addressStreetSuffix();
		}
	}


	override string addressCity() {
		final switch(uniform(0, 4, this.rnd)) {
			case 0: return addressCityPrefix() ~ " " ~ nameFirstname() ~ addressCitySuffix();
			case 1: return addressCityPrefix() ~ " " ~ nameFirstname();
			case 2: return nameFirstname() ~ addressCitySuffix();
			case 3: return nameLastname() ~ addressCitySuffix();
		}
	}

	///
	override string addressBuildingNumber() {
		auto data = [
		"#####",
		"####",
		"###'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressPostcode() {
		auto data = [
		"#####-###'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressSecondaryAddress() {
		auto data = [
		"Apto. ###",
		"Sobrado ##",
		"Casa #",
		"Lote ##",
		"Quadra ##'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string addressStreetSuffix() {
		auto data = [
		"Rua",
		"Avenida",
		"Travessa",
		"Alameda",
		"Marginal",
		"Rodovia'"
		];
		return choice(data, this.rnd);
	}


	override string dateWeekday() {
		final switch(uniform(0, 34, this.rnd)) {
			case 0: return "wide: ['Domingo";
			case 1: return "Segunda";
			case 2: return "Terça";
			case 3: return "Quarta";
			case 4: return "Quinta";
			case 5: return "Sexta";
			case 6: return "Sábado']";
			case 7: return "if not set then \"wide\" will be used instead";
			case 8: return "which may differ from a stand-alone word";
			case 9: return "wide_context: [";
			case 10: return "Domingo";
			case 11: return "Segunda";
			case 12: return "Terça";
			case 13: return "Quarta";
			case 14: return "Quinta";
			case 15: return "Sexta";
			case 16: return "Sábado";
			case 17: return "]";
			case 18: return "abbr: ['Dom";
			case 19: return "Seg";
			case 20: return "Ter";
			case 21: return "Qua";
			case 22: return "Qui";
			case 23: return "Sex";
			case 24: return "Sáb']";
			case 25: return "if not set then \"abbr\" will be used instead";
			case 26: return "which may differ from a stand-alone word";
			case 27: return "abbr_context: ['Dom";
			case 28: return "Seg";
			case 29: return "Ter";
			case 30: return "Qua";
			case 31: return "Qui";
			case 32: return "Sex";
			case 33: return "Sáb']";
		}
	}


	override string dateMonth() {
		final switch(uniform(0, 60, this.rnd)) {
			case 0: return "wide: [";
			case 1: return "Janeiro";
			case 2: return "Fevereiro";
			case 3: return "Março";
			case 4: return "Abril";
			case 5: return "Maio";
			case 6: return "Junho";
			case 7: return "Julho";
			case 8: return "Agosto";
			case 9: return "Setembro";
			case 10: return "Outubro";
			case 11: return "Novembro";
			case 12: return "Dezembro";
			case 13: return "]";
			case 14: return "if not set then \"wide\" will be used instead";
			case 15: return "which may differ from a stand-alone word";
			case 16: return "wide_context: [";
			case 17: return "Janeiro";
			case 18: return "Fevereiro";
			case 19: return "Março";
			case 20: return "Abril";
			case 21: return "Maio";
			case 22: return "Junho";
			case 23: return "Julho";
			case 24: return "Agosto";
			case 25: return "Setembro";
			case 26: return "Outubro";
			case 27: return "Novembro";
			case 28: return "Dezembro";
			case 29: return "]";
			case 30: return "abbr: [";
			case 31: return "Jan";
			case 32: return "Fev";
			case 33: return "Mar";
			case 34: return "Abr";
			case 35: return "Mai";
			case 36: return "Jun";
			case 37: return "Jul";
			case 38: return "Ago";
			case 39: return "Set";
			case 40: return "Out";
			case 41: return "Nov";
			case 42: return "Dez";
			case 43: return "]";
			case 44: return "if not set then \"abbr\" will be used instead";
			case 45: return "which may differ from a stand-alone word";
			case 46: return "abbr_context: [";
			case 47: return "Jan";
			case 48: return "Fev";
			case 49: return "Mar";
			case 50: return "Abr";
			case 51: return "Mai";
			case 52: return "Jun";
			case 53: return "Jul";
			case 54: return "Ago";
			case 55: return "Set";
			case 56: return "Out";
			case 57: return "Nov";
			case 58: return "Dez";
			case 59: return "]";
		}
	}

	///
	override string colorHuman() {
		auto data = [
		"amarelo",
		"âmbar",
		"ametista",
		"azul",
		"azul celeste",
		"azul marinho",
		"azul petróleo",
		"açafrão",
		"bordô",
		"bronze",
		"caramelo",
		"castanho ",
		"cenoura",
		"cinza",
		"cobre",
		"coral",
		"dourado",
		"escarlate",
		"esmeralda",
		"ferrugem",
		"fuligem",
		"fúchsia",
		"grená",
		"índigo",
		"jade",
		"laranja",
		"lilás",
		"limão",
		"madeira",
		"magenta",
		"marrom",
		"ouro",
		"pele",
		"prata",
		"preto",
		"púrpura",
		"rosa",
		"roxo",
		"salmão",
		"turquesa",
		"verde",
		"verde lima",
		"verde-azulado",
		"vermelho",
		"violeta"
		];
		return choice(data, this.rnd);
	}

	///
	override string phoneNumberFormats() {
		auto data = [
		"(##) ####-####",
		"+55 (##) ####-####",
		"(##) #####-####'"
		];
		return this.digitBuild(choice(data, this.rnd));
	}

	///
	override string internetFreeEmail() {
		auto data = [
		"gmail.com",
		"yahoo.com",
		"hotmail.com",
		"live.com",
		"bol.com.br"
		];
		return choice(data, this.rnd);
	}

	///
	override string internetDomainSuffix() {
		auto data = [
		"br",
		"com",
		"biz",
		"info",
		"name",
		"net",
		"org'"
		];
		return choice(data, this.rnd);
	}

}
