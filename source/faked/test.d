// generated by fakerjsgenerator
module faked.test;

import std.array : empty;
import std.format : format;

unittest {
	import faked.faker_af_za;
    auto faker = new Faker_af_za(1);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCity().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCityName().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCountry().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("af_za 1$s %d", i));
		assert(!faker.addressCounty().empty, format("af_za 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("af_za 1$s %d", i));
		assert(!faker.addressDirection().empty, format("af_za 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("af_za 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("af_za 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("af_za 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("af_za 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("af_za 1$s %d", i));
		assert(!faker.addressState().empty, format("af_za 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("af_za 1$s %d", i));
		assert(!faker.addressStreet().empty, format("af_za 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("af_za 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("af_za 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("af_za 1$s %d", i));
		assert(!faker.animalBear().empty, format("af_za 1$s %d", i));
		assert(!faker.animalBird().empty, format("af_za 1$s %d", i));
		assert(!faker.animalCat().empty, format("af_za 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("af_za 1$s %d", i));
		assert(!faker.animalCow().empty, format("af_za 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("af_za 1$s %d", i));
		assert(!faker.animalDog().empty, format("af_za 1$s %d", i));
		assert(!faker.animalFish().empty, format("af_za 1$s %d", i));
		assert(!faker.animalHorse().empty, format("af_za 1$s %d", i));
		assert(!faker.animalInsect().empty, format("af_za 1$s %d", i));
		assert(!faker.animalLion().empty, format("af_za 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("af_za 1$s %d", i));
		assert(!faker.animalRodent().empty, format("af_za 1$s %d", i));
		assert(!faker.animalSnake().empty, format("af_za 1$s %d", i));
		assert(!faker.animalType().empty, format("af_za 1$s %d", i));
		assert(!faker.appAuthor().empty, format("af_za 1$s %d", i));
		assert(!faker.appName().empty, format("af_za 1$s %d", i));
		assert(!faker.appVersion().empty, format("af_za 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("af_za 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("af_za 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("af_za 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("af_za 1$s %d", i));
		assert(!faker.colorHuman().empty, format("af_za 1$s %d", i));
		assert(!faker.colorSpace().empty, format("af_za 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("af_za 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("af_za 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("af_za 1$s %d", i));
		assert(!faker.companyBs().empty, format("af_za 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("af_za 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("af_za 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("af_za 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("af_za 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("af_za 1$s %d", i));
		assert(!faker.companyName().empty, format("af_za 1$s %d", i));
		assert(!faker.companyNoun().empty, format("af_za 1$s %d", i));
		assert(!faker.companySuffix().empty, format("af_za 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("af_za 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("af_za 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("af_za 1$s %d", i));
		assert(!faker.databaseType().empty, format("af_za 1$s %d", i));
		assert(!faker.dateMonth().empty, format("af_za 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("af_za 1$s %d", i));
		assert(!faker.financeAccount().empty, format("af_za 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("af_za 1$s %d", i));
		assert(!faker.financeBIC().empty, format("af_za 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("af_za 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("af_za 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("af_za 1$s %d", i));
		assert(!faker.financeMask().empty, format("af_za 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("af_za 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("af_za 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("af_za 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("af_za 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("af_za 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("af_za 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("af_za 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("af_za 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("af_za 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("af_za 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("af_za 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("af_za 1$s %d", i));
		assert(!faker.internetColor().empty, format("af_za 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("af_za 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("af_za 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("af_za 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("af_za 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("af_za 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("af_za 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("af_za 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("af_za 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("af_za 1$s %d", i));
		assert(!faker.internetPassword().empty, format("af_za 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("af_za 1$s %d", i));
		assert(!faker.internetUrl().empty, format("af_za 1$s %d", i));
		assert(!faker.internetUserName().empty, format("af_za 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("af_za 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("af_za 1$s %d", i));
		assert(!faker.loremSentance().empty, format("af_za 1$s %d", i));
		assert(!faker.loremSentances().empty, format("af_za 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("af_za 1$s %d", i));
		assert(!faker.loremText().empty, format("af_za 1$s %d", i));
		assert(!faker.loremWords().empty, format("af_za 1$s %d", i));
		assert(!faker.musicGenre().empty, format("af_za 1$s %d", i));
		assert(!faker.musicSongName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("af_za 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameGender().empty, format("af_za 1$s %d", i));
		assert(!faker.nameLastName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("af_za 1$s %d", i));
		assert(!faker.nameName().empty, format("af_za 1$s %d", i));
		assert(!faker.namePrefix().empty, format("af_za 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("af_za 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("af_za 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("af_za 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("af_za 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("af_za 1$s %d", i));
		assert(!faker.teamCreature().empty, format("af_za 1$s %d", i));
		assert(!faker.teamName().empty, format("af_za 1$s %d", i));
		assert(!faker.vehicle().empty, format("af_za 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("af_za 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("af_za 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("af_za 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("af_za 1$s %d", i));
		assert(!faker.vehicleType().empty, format("af_za 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("af_za 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("af_za 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("af_za 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("af_za 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("af_za 1$s %d", i));
		assert(!faker.wordNoun().empty, format("af_za 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("af_za 1$s %d", i));
		assert(!faker.wordVerb().empty, format("af_za 1$s %d", i));

	}
}

unittest {
	import faked.faker_az;
    auto faker = new Faker_az(2);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("az 1$s %d", i));
		assert(!faker.addressCity().empty, format("az 1$s %d", i));
		assert(!faker.addressCityName().empty, format("az 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("az 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("az 1$s %d", i));
		assert(!faker.addressCountry().empty, format("az 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("az 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("az 1$s %d", i));
		assert(!faker.addressCounty().empty, format("az 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("az 1$s %d", i));
		assert(!faker.addressDirection().empty, format("az 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("az 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("az 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("az 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("az 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("az 1$s %d", i));
		assert(!faker.addressState().empty, format("az 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("az 1$s %d", i));
		assert(!faker.addressStreet().empty, format("az 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("az 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("az 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("az 1$s %d", i));
		assert(!faker.animalBear().empty, format("az 1$s %d", i));
		assert(!faker.animalBird().empty, format("az 1$s %d", i));
		assert(!faker.animalCat().empty, format("az 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("az 1$s %d", i));
		assert(!faker.animalCow().empty, format("az 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("az 1$s %d", i));
		assert(!faker.animalDog().empty, format("az 1$s %d", i));
		assert(!faker.animalFish().empty, format("az 1$s %d", i));
		assert(!faker.animalHorse().empty, format("az 1$s %d", i));
		assert(!faker.animalInsect().empty, format("az 1$s %d", i));
		assert(!faker.animalLion().empty, format("az 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("az 1$s %d", i));
		assert(!faker.animalRodent().empty, format("az 1$s %d", i));
		assert(!faker.animalSnake().empty, format("az 1$s %d", i));
		assert(!faker.animalType().empty, format("az 1$s %d", i));
		assert(!faker.appAuthor().empty, format("az 1$s %d", i));
		assert(!faker.appName().empty, format("az 1$s %d", i));
		assert(!faker.appVersion().empty, format("az 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("az 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("az 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("az 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("az 1$s %d", i));
		assert(!faker.colorHuman().empty, format("az 1$s %d", i));
		assert(!faker.colorSpace().empty, format("az 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("az 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("az 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("az 1$s %d", i));
		assert(!faker.companyBs().empty, format("az 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("az 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("az 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("az 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("az 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("az 1$s %d", i));
		assert(!faker.companyName().empty, format("az 1$s %d", i));
		assert(!faker.companyNoun().empty, format("az 1$s %d", i));
		assert(!faker.companySuffix().empty, format("az 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("az 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("az 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("az 1$s %d", i));
		assert(!faker.databaseType().empty, format("az 1$s %d", i));
		assert(!faker.dateMonth().empty, format("az 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("az 1$s %d", i));
		assert(!faker.financeAccount().empty, format("az 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("az 1$s %d", i));
		assert(!faker.financeBIC().empty, format("az 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("az 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("az 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("az 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("az 1$s %d", i));
		assert(!faker.financeMask().empty, format("az 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("az 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("az 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("az 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("az 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("az 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("az 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("az 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("az 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("az 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("az 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("az 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("az 1$s %d", i));
		assert(!faker.internetColor().empty, format("az 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("az 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("az 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("az 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("az 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("az 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("az 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("az 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("az 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("az 1$s %d", i));
		assert(!faker.internetPassword().empty, format("az 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("az 1$s %d", i));
		assert(!faker.internetUrl().empty, format("az 1$s %d", i));
		assert(!faker.internetUserName().empty, format("az 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("az 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("az 1$s %d", i));
		assert(!faker.loremSentance().empty, format("az 1$s %d", i));
		assert(!faker.loremSentances().empty, format("az 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("az 1$s %d", i));
		assert(!faker.loremText().empty, format("az 1$s %d", i));
		assert(!faker.loremWords().empty, format("az 1$s %d", i));
		assert(!faker.musicGenre().empty, format("az 1$s %d", i));
		assert(!faker.musicSongName().empty, format("az 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("az 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("az 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("az 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("az 1$s %d", i));
		assert(!faker.nameGender().empty, format("az 1$s %d", i));
		assert(!faker.nameLastName().empty, format("az 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("az 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("az 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("az 1$s %d", i));
		assert(!faker.nameName().empty, format("az 1$s %d", i));
		assert(!faker.namePrefix().empty, format("az 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("az 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("az 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("az 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("az 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("az 1$s %d", i));
		assert(!faker.teamCreature().empty, format("az 1$s %d", i));
		assert(!faker.teamName().empty, format("az 1$s %d", i));
		assert(!faker.vehicle().empty, format("az 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("az 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("az 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("az 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("az 1$s %d", i));
		assert(!faker.vehicleType().empty, format("az 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("az 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("az 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("az 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("az 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("az 1$s %d", i));
		assert(!faker.wordNoun().empty, format("az 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("az 1$s %d", i));
		assert(!faker.wordVerb().empty, format("az 1$s %d", i));

	}
}

unittest {
	import faked.faker_cz;
    auto faker = new Faker_cz(3);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("cz 1$s %d", i));
		assert(!faker.addressCity().empty, format("cz 1$s %d", i));
		assert(!faker.addressCityName().empty, format("cz 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("cz 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("cz 1$s %d", i));
		assert(!faker.addressCountry().empty, format("cz 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("cz 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("cz 1$s %d", i));
		assert(!faker.addressCounty().empty, format("cz 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("cz 1$s %d", i));
		assert(!faker.addressDirection().empty, format("cz 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("cz 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("cz 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("cz 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("cz 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("cz 1$s %d", i));
		assert(!faker.addressState().empty, format("cz 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("cz 1$s %d", i));
		assert(!faker.addressStreet().empty, format("cz 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("cz 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("cz 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("cz 1$s %d", i));
		assert(!faker.animalBear().empty, format("cz 1$s %d", i));
		assert(!faker.animalBird().empty, format("cz 1$s %d", i));
		assert(!faker.animalCat().empty, format("cz 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("cz 1$s %d", i));
		assert(!faker.animalCow().empty, format("cz 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("cz 1$s %d", i));
		assert(!faker.animalDog().empty, format("cz 1$s %d", i));
		assert(!faker.animalFish().empty, format("cz 1$s %d", i));
		assert(!faker.animalHorse().empty, format("cz 1$s %d", i));
		assert(!faker.animalInsect().empty, format("cz 1$s %d", i));
		assert(!faker.animalLion().empty, format("cz 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("cz 1$s %d", i));
		assert(!faker.animalRodent().empty, format("cz 1$s %d", i));
		assert(!faker.animalSnake().empty, format("cz 1$s %d", i));
		assert(!faker.animalType().empty, format("cz 1$s %d", i));
		assert(!faker.appAuthor().empty, format("cz 1$s %d", i));
		assert(!faker.appName().empty, format("cz 1$s %d", i));
		assert(!faker.appVersion().empty, format("cz 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("cz 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("cz 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("cz 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("cz 1$s %d", i));
		assert(!faker.colorHuman().empty, format("cz 1$s %d", i));
		assert(!faker.colorSpace().empty, format("cz 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("cz 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("cz 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("cz 1$s %d", i));
		assert(!faker.companyBs().empty, format("cz 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("cz 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("cz 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("cz 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("cz 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("cz 1$s %d", i));
		assert(!faker.companyName().empty, format("cz 1$s %d", i));
		assert(!faker.companyNoun().empty, format("cz 1$s %d", i));
		assert(!faker.companySuffix().empty, format("cz 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("cz 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("cz 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("cz 1$s %d", i));
		assert(!faker.databaseType().empty, format("cz 1$s %d", i));
		assert(!faker.dateMonth().empty, format("cz 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("cz 1$s %d", i));
		assert(!faker.financeAccount().empty, format("cz 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("cz 1$s %d", i));
		assert(!faker.financeBIC().empty, format("cz 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("cz 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("cz 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("cz 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("cz 1$s %d", i));
		assert(!faker.financeMask().empty, format("cz 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("cz 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("cz 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("cz 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("cz 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("cz 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("cz 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("cz 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("cz 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("cz 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("cz 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("cz 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("cz 1$s %d", i));
		assert(!faker.internetColor().empty, format("cz 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("cz 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("cz 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("cz 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("cz 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("cz 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("cz 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("cz 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("cz 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("cz 1$s %d", i));
		assert(!faker.internetPassword().empty, format("cz 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("cz 1$s %d", i));
		assert(!faker.internetUrl().empty, format("cz 1$s %d", i));
		assert(!faker.internetUserName().empty, format("cz 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("cz 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("cz 1$s %d", i));
		assert(!faker.loremSentance().empty, format("cz 1$s %d", i));
		assert(!faker.loremSentances().empty, format("cz 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("cz 1$s %d", i));
		assert(!faker.loremText().empty, format("cz 1$s %d", i));
		assert(!faker.loremWords().empty, format("cz 1$s %d", i));
		assert(!faker.musicGenre().empty, format("cz 1$s %d", i));
		assert(!faker.musicSongName().empty, format("cz 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("cz 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("cz 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("cz 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("cz 1$s %d", i));
		assert(!faker.nameGender().empty, format("cz 1$s %d", i));
		assert(!faker.nameLastName().empty, format("cz 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("cz 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("cz 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("cz 1$s %d", i));
		assert(!faker.nameName().empty, format("cz 1$s %d", i));
		assert(!faker.namePrefix().empty, format("cz 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("cz 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("cz 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("cz 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("cz 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("cz 1$s %d", i));
		assert(!faker.teamCreature().empty, format("cz 1$s %d", i));
		assert(!faker.teamName().empty, format("cz 1$s %d", i));
		assert(!faker.vehicle().empty, format("cz 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("cz 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("cz 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("cz 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("cz 1$s %d", i));
		assert(!faker.vehicleType().empty, format("cz 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("cz 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("cz 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("cz 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("cz 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("cz 1$s %d", i));
		assert(!faker.wordNoun().empty, format("cz 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("cz 1$s %d", i));
		assert(!faker.wordVerb().empty, format("cz 1$s %d", i));

	}
}

unittest {
	import faked.faker_de;
    auto faker = new Faker_de(4);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("de 1$s %d", i));
		assert(!faker.addressCity().empty, format("de 1$s %d", i));
		assert(!faker.addressCityName().empty, format("de 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("de 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("de 1$s %d", i));
		assert(!faker.addressCountry().empty, format("de 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("de 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("de 1$s %d", i));
		assert(!faker.addressCounty().empty, format("de 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("de 1$s %d", i));
		assert(!faker.addressDirection().empty, format("de 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("de 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("de 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("de 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("de 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("de 1$s %d", i));
		assert(!faker.addressState().empty, format("de 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("de 1$s %d", i));
		assert(!faker.addressStreet().empty, format("de 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("de 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("de 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("de 1$s %d", i));
		assert(!faker.animalBear().empty, format("de 1$s %d", i));
		assert(!faker.animalBird().empty, format("de 1$s %d", i));
		assert(!faker.animalCat().empty, format("de 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("de 1$s %d", i));
		assert(!faker.animalCow().empty, format("de 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("de 1$s %d", i));
		assert(!faker.animalDog().empty, format("de 1$s %d", i));
		assert(!faker.animalFish().empty, format("de 1$s %d", i));
		assert(!faker.animalHorse().empty, format("de 1$s %d", i));
		assert(!faker.animalInsect().empty, format("de 1$s %d", i));
		assert(!faker.animalLion().empty, format("de 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("de 1$s %d", i));
		assert(!faker.animalRodent().empty, format("de 1$s %d", i));
		assert(!faker.animalSnake().empty, format("de 1$s %d", i));
		assert(!faker.animalType().empty, format("de 1$s %d", i));
		assert(!faker.appAuthor().empty, format("de 1$s %d", i));
		assert(!faker.appName().empty, format("de 1$s %d", i));
		assert(!faker.appVersion().empty, format("de 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("de 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("de 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("de 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("de 1$s %d", i));
		assert(!faker.colorHuman().empty, format("de 1$s %d", i));
		assert(!faker.colorSpace().empty, format("de 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("de 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("de 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("de 1$s %d", i));
		assert(!faker.companyBs().empty, format("de 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("de 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("de 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("de 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("de 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("de 1$s %d", i));
		assert(!faker.companyName().empty, format("de 1$s %d", i));
		assert(!faker.companyNoun().empty, format("de 1$s %d", i));
		assert(!faker.companySuffix().empty, format("de 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("de 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("de 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("de 1$s %d", i));
		assert(!faker.databaseType().empty, format("de 1$s %d", i));
		assert(!faker.dateMonth().empty, format("de 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("de 1$s %d", i));
		assert(!faker.financeAccount().empty, format("de 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("de 1$s %d", i));
		assert(!faker.financeBIC().empty, format("de 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("de 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("de 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("de 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("de 1$s %d", i));
		assert(!faker.financeMask().empty, format("de 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("de 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("de 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("de 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("de 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("de 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("de 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("de 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("de 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("de 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("de 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("de 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("de 1$s %d", i));
		assert(!faker.internetColor().empty, format("de 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("de 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("de 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("de 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("de 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("de 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("de 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("de 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("de 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("de 1$s %d", i));
		assert(!faker.internetPassword().empty, format("de 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("de 1$s %d", i));
		assert(!faker.internetUrl().empty, format("de 1$s %d", i));
		assert(!faker.internetUserName().empty, format("de 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("de 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("de 1$s %d", i));
		assert(!faker.loremSentance().empty, format("de 1$s %d", i));
		assert(!faker.loremSentances().empty, format("de 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("de 1$s %d", i));
		assert(!faker.loremText().empty, format("de 1$s %d", i));
		assert(!faker.loremWords().empty, format("de 1$s %d", i));
		assert(!faker.musicGenre().empty, format("de 1$s %d", i));
		assert(!faker.musicSongName().empty, format("de 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("de 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("de 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("de 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("de 1$s %d", i));
		assert(!faker.nameGender().empty, format("de 1$s %d", i));
		assert(!faker.nameLastName().empty, format("de 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("de 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("de 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("de 1$s %d", i));
		assert(!faker.nameName().empty, format("de 1$s %d", i));
		assert(!faker.namePrefix().empty, format("de 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("de 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("de 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("de 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("de 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("de 1$s %d", i));
		assert(!faker.teamCreature().empty, format("de 1$s %d", i));
		assert(!faker.teamName().empty, format("de 1$s %d", i));
		assert(!faker.vehicle().empty, format("de 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("de 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("de 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("de 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("de 1$s %d", i));
		assert(!faker.vehicleType().empty, format("de 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("de 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("de 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("de 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("de 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("de 1$s %d", i));
		assert(!faker.wordNoun().empty, format("de 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("de 1$s %d", i));
		assert(!faker.wordVerb().empty, format("de 1$s %d", i));

	}
}

unittest {
	import faked.faker_de_at;
    auto faker = new Faker_de_at(5);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCity().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCityName().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCountry().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("de_at 1$s %d", i));
		assert(!faker.addressCounty().empty, format("de_at 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("de_at 1$s %d", i));
		assert(!faker.addressDirection().empty, format("de_at 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("de_at 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("de_at 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("de_at 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("de_at 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("de_at 1$s %d", i));
		assert(!faker.addressState().empty, format("de_at 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("de_at 1$s %d", i));
		assert(!faker.addressStreet().empty, format("de_at 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("de_at 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("de_at 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("de_at 1$s %d", i));
		assert(!faker.animalBear().empty, format("de_at 1$s %d", i));
		assert(!faker.animalBird().empty, format("de_at 1$s %d", i));
		assert(!faker.animalCat().empty, format("de_at 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("de_at 1$s %d", i));
		assert(!faker.animalCow().empty, format("de_at 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("de_at 1$s %d", i));
		assert(!faker.animalDog().empty, format("de_at 1$s %d", i));
		assert(!faker.animalFish().empty, format("de_at 1$s %d", i));
		assert(!faker.animalHorse().empty, format("de_at 1$s %d", i));
		assert(!faker.animalInsect().empty, format("de_at 1$s %d", i));
		assert(!faker.animalLion().empty, format("de_at 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("de_at 1$s %d", i));
		assert(!faker.animalRodent().empty, format("de_at 1$s %d", i));
		assert(!faker.animalSnake().empty, format("de_at 1$s %d", i));
		assert(!faker.animalType().empty, format("de_at 1$s %d", i));
		assert(!faker.appAuthor().empty, format("de_at 1$s %d", i));
		assert(!faker.appName().empty, format("de_at 1$s %d", i));
		assert(!faker.appVersion().empty, format("de_at 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("de_at 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("de_at 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("de_at 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("de_at 1$s %d", i));
		assert(!faker.colorHuman().empty, format("de_at 1$s %d", i));
		assert(!faker.colorSpace().empty, format("de_at 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("de_at 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("de_at 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("de_at 1$s %d", i));
		assert(!faker.companyBs().empty, format("de_at 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("de_at 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("de_at 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("de_at 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("de_at 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("de_at 1$s %d", i));
		assert(!faker.companyName().empty, format("de_at 1$s %d", i));
		assert(!faker.companyNoun().empty, format("de_at 1$s %d", i));
		assert(!faker.companySuffix().empty, format("de_at 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("de_at 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("de_at 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("de_at 1$s %d", i));
		assert(!faker.databaseType().empty, format("de_at 1$s %d", i));
		assert(!faker.dateMonth().empty, format("de_at 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("de_at 1$s %d", i));
		assert(!faker.financeAccount().empty, format("de_at 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("de_at 1$s %d", i));
		assert(!faker.financeBIC().empty, format("de_at 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("de_at 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("de_at 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("de_at 1$s %d", i));
		assert(!faker.financeMask().empty, format("de_at 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("de_at 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("de_at 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("de_at 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("de_at 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("de_at 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("de_at 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("de_at 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("de_at 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("de_at 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("de_at 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("de_at 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("de_at 1$s %d", i));
		assert(!faker.internetColor().empty, format("de_at 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("de_at 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("de_at 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("de_at 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("de_at 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("de_at 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("de_at 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("de_at 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("de_at 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("de_at 1$s %d", i));
		assert(!faker.internetPassword().empty, format("de_at 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("de_at 1$s %d", i));
		assert(!faker.internetUrl().empty, format("de_at 1$s %d", i));
		assert(!faker.internetUserName().empty, format("de_at 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("de_at 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("de_at 1$s %d", i));
		assert(!faker.loremSentance().empty, format("de_at 1$s %d", i));
		assert(!faker.loremSentances().empty, format("de_at 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("de_at 1$s %d", i));
		assert(!faker.loremText().empty, format("de_at 1$s %d", i));
		assert(!faker.loremWords().empty, format("de_at 1$s %d", i));
		assert(!faker.musicGenre().empty, format("de_at 1$s %d", i));
		assert(!faker.musicSongName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("de_at 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameGender().empty, format("de_at 1$s %d", i));
		assert(!faker.nameLastName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("de_at 1$s %d", i));
		assert(!faker.nameName().empty, format("de_at 1$s %d", i));
		assert(!faker.namePrefix().empty, format("de_at 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("de_at 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("de_at 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("de_at 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("de_at 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("de_at 1$s %d", i));
		assert(!faker.teamCreature().empty, format("de_at 1$s %d", i));
		assert(!faker.teamName().empty, format("de_at 1$s %d", i));
		assert(!faker.vehicle().empty, format("de_at 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("de_at 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("de_at 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("de_at 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("de_at 1$s %d", i));
		assert(!faker.vehicleType().empty, format("de_at 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("de_at 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("de_at 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("de_at 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("de_at 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("de_at 1$s %d", i));
		assert(!faker.wordNoun().empty, format("de_at 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("de_at 1$s %d", i));
		assert(!faker.wordVerb().empty, format("de_at 1$s %d", i));

	}
}

unittest {
	import faked.faker_de_ch;
    auto faker = new Faker_de_ch(6);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCity().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCityName().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCountry().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressCounty().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressDirection().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressState().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressStreet().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("de_ch 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalBear().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalBird().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalCat().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalCow().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalDog().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalFish().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalHorse().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalInsect().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalLion().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalRodent().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalSnake().empty, format("de_ch 1$s %d", i));
		assert(!faker.animalType().empty, format("de_ch 1$s %d", i));
		assert(!faker.appAuthor().empty, format("de_ch 1$s %d", i));
		assert(!faker.appName().empty, format("de_ch 1$s %d", i));
		assert(!faker.appVersion().empty, format("de_ch 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("de_ch 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("de_ch 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("de_ch 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("de_ch 1$s %d", i));
		assert(!faker.colorHuman().empty, format("de_ch 1$s %d", i));
		assert(!faker.colorSpace().empty, format("de_ch 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("de_ch 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyBs().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyName().empty, format("de_ch 1$s %d", i));
		assert(!faker.companyNoun().empty, format("de_ch 1$s %d", i));
		assert(!faker.companySuffix().empty, format("de_ch 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("de_ch 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("de_ch 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("de_ch 1$s %d", i));
		assert(!faker.databaseType().empty, format("de_ch 1$s %d", i));
		assert(!faker.dateMonth().empty, format("de_ch 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeAccount().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeBIC().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeMask().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("de_ch 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("de_ch 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("de_ch 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("de_ch 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("de_ch 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("de_ch 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("de_ch 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("de_ch 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("de_ch 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("de_ch 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetColor().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetPassword().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetUrl().empty, format("de_ch 1$s %d", i));
		assert(!faker.internetUserName().empty, format("de_ch 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("de_ch 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("de_ch 1$s %d", i));
		assert(!faker.loremSentance().empty, format("de_ch 1$s %d", i));
		assert(!faker.loremSentances().empty, format("de_ch 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("de_ch 1$s %d", i));
		assert(!faker.loremText().empty, format("de_ch 1$s %d", i));
		assert(!faker.loremWords().empty, format("de_ch 1$s %d", i));
		assert(!faker.musicGenre().empty, format("de_ch 1$s %d", i));
		assert(!faker.musicSongName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameGender().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameLastName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameName().empty, format("de_ch 1$s %d", i));
		assert(!faker.namePrefix().empty, format("de_ch 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("de_ch 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("de_ch 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("de_ch 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("de_ch 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("de_ch 1$s %d", i));
		assert(!faker.teamCreature().empty, format("de_ch 1$s %d", i));
		assert(!faker.teamName().empty, format("de_ch 1$s %d", i));
		assert(!faker.vehicle().empty, format("de_ch 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("de_ch 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("de_ch 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("de_ch 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("de_ch 1$s %d", i));
		assert(!faker.vehicleType().empty, format("de_ch 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("de_ch 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("de_ch 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("de_ch 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("de_ch 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("de_ch 1$s %d", i));
		assert(!faker.wordNoun().empty, format("de_ch 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("de_ch 1$s %d", i));
		assert(!faker.wordVerb().empty, format("de_ch 1$s %d", i));

	}
}

unittest {
	import faked.faker_el;
    auto faker = new Faker_el(7);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("el 1$s %d", i));
		assert(!faker.addressCity().empty, format("el 1$s %d", i));
		assert(!faker.addressCityName().empty, format("el 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("el 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("el 1$s %d", i));
		assert(!faker.addressCountry().empty, format("el 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("el 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("el 1$s %d", i));
		assert(!faker.addressCounty().empty, format("el 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("el 1$s %d", i));
		assert(!faker.addressDirection().empty, format("el 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("el 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("el 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("el 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("el 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("el 1$s %d", i));
		assert(!faker.addressState().empty, format("el 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("el 1$s %d", i));
		assert(!faker.addressStreet().empty, format("el 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("el 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("el 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("el 1$s %d", i));
		assert(!faker.animalBear().empty, format("el 1$s %d", i));
		assert(!faker.animalBird().empty, format("el 1$s %d", i));
		assert(!faker.animalCat().empty, format("el 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("el 1$s %d", i));
		assert(!faker.animalCow().empty, format("el 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("el 1$s %d", i));
		assert(!faker.animalDog().empty, format("el 1$s %d", i));
		assert(!faker.animalFish().empty, format("el 1$s %d", i));
		assert(!faker.animalHorse().empty, format("el 1$s %d", i));
		assert(!faker.animalInsect().empty, format("el 1$s %d", i));
		assert(!faker.animalLion().empty, format("el 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("el 1$s %d", i));
		assert(!faker.animalRodent().empty, format("el 1$s %d", i));
		assert(!faker.animalSnake().empty, format("el 1$s %d", i));
		assert(!faker.animalType().empty, format("el 1$s %d", i));
		assert(!faker.appAuthor().empty, format("el 1$s %d", i));
		assert(!faker.appName().empty, format("el 1$s %d", i));
		assert(!faker.appVersion().empty, format("el 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("el 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("el 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("el 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("el 1$s %d", i));
		assert(!faker.colorHuman().empty, format("el 1$s %d", i));
		assert(!faker.colorSpace().empty, format("el 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("el 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("el 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("el 1$s %d", i));
		assert(!faker.companyBs().empty, format("el 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("el 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("el 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("el 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("el 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("el 1$s %d", i));
		assert(!faker.companyName().empty, format("el 1$s %d", i));
		assert(!faker.companyNoun().empty, format("el 1$s %d", i));
		assert(!faker.companySuffix().empty, format("el 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("el 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("el 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("el 1$s %d", i));
		assert(!faker.databaseType().empty, format("el 1$s %d", i));
		assert(!faker.dateMonth().empty, format("el 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("el 1$s %d", i));
		assert(!faker.financeAccount().empty, format("el 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("el 1$s %d", i));
		assert(!faker.financeBIC().empty, format("el 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("el 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("el 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("el 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("el 1$s %d", i));
		assert(!faker.financeMask().empty, format("el 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("el 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("el 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("el 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("el 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("el 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("el 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("el 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("el 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("el 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("el 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("el 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("el 1$s %d", i));
		assert(!faker.internetColor().empty, format("el 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("el 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("el 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("el 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("el 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("el 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("el 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("el 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("el 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("el 1$s %d", i));
		assert(!faker.internetPassword().empty, format("el 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("el 1$s %d", i));
		assert(!faker.internetUrl().empty, format("el 1$s %d", i));
		assert(!faker.internetUserName().empty, format("el 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("el 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("el 1$s %d", i));
		assert(!faker.loremSentance().empty, format("el 1$s %d", i));
		assert(!faker.loremSentances().empty, format("el 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("el 1$s %d", i));
		assert(!faker.loremText().empty, format("el 1$s %d", i));
		assert(!faker.loremWords().empty, format("el 1$s %d", i));
		assert(!faker.musicGenre().empty, format("el 1$s %d", i));
		assert(!faker.musicSongName().empty, format("el 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("el 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("el 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("el 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("el 1$s %d", i));
		assert(!faker.nameGender().empty, format("el 1$s %d", i));
		assert(!faker.nameLastName().empty, format("el 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("el 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("el 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("el 1$s %d", i));
		assert(!faker.nameName().empty, format("el 1$s %d", i));
		assert(!faker.namePrefix().empty, format("el 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("el 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("el 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("el 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("el 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("el 1$s %d", i));
		assert(!faker.teamCreature().empty, format("el 1$s %d", i));
		assert(!faker.teamName().empty, format("el 1$s %d", i));
		assert(!faker.vehicle().empty, format("el 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("el 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("el 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("el 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("el 1$s %d", i));
		assert(!faker.vehicleType().empty, format("el 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("el 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("el 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("el 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("el 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("el 1$s %d", i));
		assert(!faker.wordNoun().empty, format("el 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("el 1$s %d", i));
		assert(!faker.wordVerb().empty, format("el 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_au;
    auto faker = new Faker_en_au(8);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_au 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_au 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_au 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_au 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_au 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_au 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_au 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_au 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_au 1$s %d", i));
		assert(!faker.addressState().empty, format("en_au 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_au 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_au 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_au 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_au 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_au 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_au 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_au 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_au 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_au 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_au 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_au 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_au 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_au 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_au 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_au 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_au 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_au 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_au 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_au 1$s %d", i));
		assert(!faker.animalType().empty, format("en_au 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_au 1$s %d", i));
		assert(!faker.appName().empty, format("en_au 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_au 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_au 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_au 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_au 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_au 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_au 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_au 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_au 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_au 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_au 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_au 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_au 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_au 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_au 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_au 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_au 1$s %d", i));
		assert(!faker.companyName().empty, format("en_au 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_au 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_au 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_au 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_au 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_au 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_au 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_au 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_au 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_au 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_au 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_au 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_au 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_au 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_au 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_au 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_au 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_au 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_au 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_au 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_au 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_au 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_au 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_au 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_au 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_au 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_au 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_au 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_au 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_au 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_au 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_au 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_au 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_au 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_au 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_au 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_au 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_au 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_au 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_au 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_au 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_au 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_au 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_au 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_au 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_au 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_au 1$s %d", i));
		assert(!faker.loremText().empty, format("en_au 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_au 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_au 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_au 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_au 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_au 1$s %d", i));
		assert(!faker.nameName().empty, format("en_au 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_au 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_au 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_au 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_au 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_au 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_au 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_au 1$s %d", i));
		assert(!faker.teamName().empty, format("en_au 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_au 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_au 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_au 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_au 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_au 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_au 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_au 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_au 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_au 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_au 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_au 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_au 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_au 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_au 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_au_ocker;
    auto faker = new Faker_en_au_ocker(9);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressState().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.animalType().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.appName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.loremText().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.teamName().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_au_ocker 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_au_ocker 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_bork;
    auto faker = new Faker_en_bork(10);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressState().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_bork 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_bork 1$s %d", i));
		assert(!faker.animalType().empty, format("en_bork 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_bork 1$s %d", i));
		assert(!faker.appName().empty, format("en_bork 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_bork 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_bork 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_bork 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_bork 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_bork 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_bork 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_bork 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_bork 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyName().empty, format("en_bork 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_bork 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_bork 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_bork 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_bork 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_bork 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_bork 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_bork 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_bork 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_bork 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_bork 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_bork 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_bork 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_bork 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_bork 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_bork 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_bork 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_bork 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_bork 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_bork 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_bork 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_bork 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_bork 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_bork 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_bork 1$s %d", i));
		assert(!faker.loremText().empty, format("en_bork 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_bork 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_bork 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameName().empty, format("en_bork 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_bork 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_bork 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_bork 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_bork 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_bork 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_bork 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_bork 1$s %d", i));
		assert(!faker.teamName().empty, format("en_bork 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_bork 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_bork 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_bork 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_bork 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_bork 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_bork 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_bork 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_bork 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_bork 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_bork 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_bork 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_bork 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_bork 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_bork 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_ca;
    auto faker = new Faker_en_ca(11);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressState().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_ca 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_ca 1$s %d", i));
		assert(!faker.animalType().empty, format("en_ca 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_ca 1$s %d", i));
		assert(!faker.appName().empty, format("en_ca 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_ca 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_ca 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_ca 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_ca 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_ca 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_ca 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_ca 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_ca 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyName().empty, format("en_ca 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_ca 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_ca 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_ca 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_ca 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_ca 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_ca 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_ca 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_ca 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_ca 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_ca 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_ca 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_ca 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_ca 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_ca 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_ca 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_ca 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_ca 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_ca 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_ca 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_ca 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_ca 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_ca 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_ca 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_ca 1$s %d", i));
		assert(!faker.loremText().empty, format("en_ca 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_ca 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_ca 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameName().empty, format("en_ca 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_ca 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_ca 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_ca 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_ca 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_ca 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_ca 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_ca 1$s %d", i));
		assert(!faker.teamName().empty, format("en_ca 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_ca 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_ca 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_ca 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_ca 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_ca 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_ca 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_ca 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_ca 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_ca 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_ca 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_ca 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_ca 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_ca 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_ca 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_gb;
    auto faker = new Faker_en_gb(12);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressState().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_gb 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_gb 1$s %d", i));
		assert(!faker.animalType().empty, format("en_gb 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_gb 1$s %d", i));
		assert(!faker.appName().empty, format("en_gb 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_gb 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_gb 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_gb 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_gb 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_gb 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_gb 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_gb 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_gb 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyName().empty, format("en_gb 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_gb 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_gb 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_gb 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_gb 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_gb 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_gb 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_gb 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_gb 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_gb 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_gb 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_gb 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_gb 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_gb 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_gb 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_gb 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_gb 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_gb 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_gb 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_gb 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_gb 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_gb 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_gb 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_gb 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_gb 1$s %d", i));
		assert(!faker.loremText().empty, format("en_gb 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_gb 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_gb 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameName().empty, format("en_gb 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_gb 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_gb 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_gb 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_gb 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_gb 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_gb 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_gb 1$s %d", i));
		assert(!faker.teamName().empty, format("en_gb 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_gb 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_gb 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_gb 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_gb 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_gb 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_gb 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_gb 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_gb 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_gb 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_gb 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_gb 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_gb 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_gb 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_gb 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_gh;
    auto faker = new Faker_en_gh(13);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressState().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_gh 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_gh 1$s %d", i));
		assert(!faker.animalType().empty, format("en_gh 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_gh 1$s %d", i));
		assert(!faker.appName().empty, format("en_gh 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_gh 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_gh 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_gh 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_gh 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_gh 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_gh 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_gh 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_gh 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyName().empty, format("en_gh 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_gh 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_gh 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_gh 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_gh 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_gh 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_gh 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_gh 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_gh 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_gh 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_gh 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_gh 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_gh 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_gh 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_gh 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_gh 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_gh 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_gh 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_gh 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_gh 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_gh 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_gh 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_gh 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_gh 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_gh 1$s %d", i));
		assert(!faker.loremText().empty, format("en_gh 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_gh 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_gh 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameName().empty, format("en_gh 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_gh 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_gh 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_gh 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_gh 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_gh 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_gh 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_gh 1$s %d", i));
		assert(!faker.teamName().empty, format("en_gh 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_gh 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_gh 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_gh 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_gh 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_gh 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_gh 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_gh 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_gh 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_gh 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_gh 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_gh 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_gh 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_gh 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_gh 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_ie;
    auto faker = new Faker_en_ie(14);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressState().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_ie 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_ie 1$s %d", i));
		assert(!faker.animalType().empty, format("en_ie 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_ie 1$s %d", i));
		assert(!faker.appName().empty, format("en_ie 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_ie 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_ie 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_ie 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_ie 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_ie 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_ie 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_ie 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_ie 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyName().empty, format("en_ie 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_ie 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_ie 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_ie 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_ie 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_ie 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_ie 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_ie 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_ie 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_ie 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_ie 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_ie 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_ie 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_ie 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_ie 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_ie 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_ie 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_ie 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_ie 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_ie 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_ie 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_ie 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_ie 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_ie 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_ie 1$s %d", i));
		assert(!faker.loremText().empty, format("en_ie 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_ie 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_ie 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameName().empty, format("en_ie 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_ie 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_ie 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_ie 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_ie 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_ie 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_ie 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_ie 1$s %d", i));
		assert(!faker.teamName().empty, format("en_ie 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_ie 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_ie 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_ie 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_ie 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_ie 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_ie 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_ie 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_ie 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_ie 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_ie 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_ie 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_ie 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_ie 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_ie 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_ind;
    auto faker = new Faker_en_ind(15);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressState().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_ind 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_ind 1$s %d", i));
		assert(!faker.animalType().empty, format("en_ind 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_ind 1$s %d", i));
		assert(!faker.appName().empty, format("en_ind 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_ind 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_ind 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_ind 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_ind 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_ind 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_ind 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_ind 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_ind 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyName().empty, format("en_ind 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_ind 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_ind 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_ind 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_ind 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_ind 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_ind 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_ind 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_ind 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_ind 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_ind 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_ind 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_ind 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_ind 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_ind 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_ind 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_ind 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_ind 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_ind 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_ind 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_ind 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_ind 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_ind 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_ind 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_ind 1$s %d", i));
		assert(!faker.loremText().empty, format("en_ind 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_ind 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_ind 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameName().empty, format("en_ind 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_ind 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_ind 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_ind 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_ind 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_ind 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_ind 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_ind 1$s %d", i));
		assert(!faker.teamName().empty, format("en_ind 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_ind 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_ind 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_ind 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_ind 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_ind 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_ind 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_ind 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_ind 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_ind 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_ind 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_ind 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_ind 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_ind 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_ind 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_ng;
    auto faker = new Faker_en_ng(16);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressState().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_ng 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_ng 1$s %d", i));
		assert(!faker.animalType().empty, format("en_ng 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_ng 1$s %d", i));
		assert(!faker.appName().empty, format("en_ng 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_ng 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_ng 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_ng 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_ng 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_ng 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_ng 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_ng 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_ng 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyName().empty, format("en_ng 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_ng 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_ng 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_ng 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_ng 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_ng 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_ng 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_ng 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_ng 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_ng 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_ng 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_ng 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_ng 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_ng 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_ng 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_ng 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_ng 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_ng 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_ng 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_ng 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_ng 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_ng 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_ng 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_ng 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_ng 1$s %d", i));
		assert(!faker.loremText().empty, format("en_ng 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_ng 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_ng 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameName().empty, format("en_ng 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_ng 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_ng 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_ng 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_ng 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_ng 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_ng 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_ng 1$s %d", i));
		assert(!faker.teamName().empty, format("en_ng 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_ng 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_ng 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_ng 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_ng 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_ng 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_ng 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_ng 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_ng 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_ng 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_ng 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_ng 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_ng 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_ng 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_ng 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_us;
    auto faker = new Faker_en_us(17);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_us 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_us 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_us 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_us 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_us 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_us 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_us 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_us 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_us 1$s %d", i));
		assert(!faker.addressState().empty, format("en_us 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_us 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_us 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_us 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_us 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_us 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_us 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_us 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_us 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_us 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_us 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_us 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_us 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_us 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_us 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_us 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_us 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_us 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_us 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_us 1$s %d", i));
		assert(!faker.animalType().empty, format("en_us 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_us 1$s %d", i));
		assert(!faker.appName().empty, format("en_us 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_us 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_us 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_us 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_us 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_us 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_us 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_us 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_us 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_us 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_us 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_us 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_us 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_us 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_us 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_us 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_us 1$s %d", i));
		assert(!faker.companyName().empty, format("en_us 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_us 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_us 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_us 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_us 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_us 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_us 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_us 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_us 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_us 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_us 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_us 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_us 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_us 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_us 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_us 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_us 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_us 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_us 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_us 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_us 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_us 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_us 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_us 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_us 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_us 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_us 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_us 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_us 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_us 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_us 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_us 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_us 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_us 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_us 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_us 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_us 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_us 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_us 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_us 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_us 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_us 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_us 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_us 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_us 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_us 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_us 1$s %d", i));
		assert(!faker.loremText().empty, format("en_us 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_us 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_us 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_us 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_us 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_us 1$s %d", i));
		assert(!faker.nameName().empty, format("en_us 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_us 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_us 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_us 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_us 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_us 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_us 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_us 1$s %d", i));
		assert(!faker.teamName().empty, format("en_us 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_us 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_us 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_us 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_us 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_us 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_us 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_us 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_us 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_us 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_us 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_us 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_us 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_us 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_us 1$s %d", i));

	}
}

unittest {
	import faked.faker_en_za;
    auto faker = new Faker_en_za(18);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCity().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en_za 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en_za 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en_za 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en_za 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en_za 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en_za 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en_za 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en_za 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en_za 1$s %d", i));
		assert(!faker.addressState().empty, format("en_za 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en_za 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en_za 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en_za 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en_za 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en_za 1$s %d", i));
		assert(!faker.animalBear().empty, format("en_za 1$s %d", i));
		assert(!faker.animalBird().empty, format("en_za 1$s %d", i));
		assert(!faker.animalCat().empty, format("en_za 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en_za 1$s %d", i));
		assert(!faker.animalCow().empty, format("en_za 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en_za 1$s %d", i));
		assert(!faker.animalDog().empty, format("en_za 1$s %d", i));
		assert(!faker.animalFish().empty, format("en_za 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en_za 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en_za 1$s %d", i));
		assert(!faker.animalLion().empty, format("en_za 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en_za 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en_za 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en_za 1$s %d", i));
		assert(!faker.animalType().empty, format("en_za 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en_za 1$s %d", i));
		assert(!faker.appName().empty, format("en_za 1$s %d", i));
		assert(!faker.appVersion().empty, format("en_za 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en_za 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en_za 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en_za 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en_za 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en_za 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en_za 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en_za 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en_za 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en_za 1$s %d", i));
		assert(!faker.companyBs().empty, format("en_za 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en_za 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en_za 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en_za 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en_za 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en_za 1$s %d", i));
		assert(!faker.companyName().empty, format("en_za 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en_za 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en_za 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en_za 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en_za 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en_za 1$s %d", i));
		assert(!faker.databaseType().empty, format("en_za 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en_za 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en_za 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en_za 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en_za 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en_za 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en_za 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en_za 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en_za 1$s %d", i));
		assert(!faker.financeMask().empty, format("en_za 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en_za 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en_za 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en_za 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en_za 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en_za 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en_za 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en_za 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en_za 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en_za 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en_za 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en_za 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en_za 1$s %d", i));
		assert(!faker.internetColor().empty, format("en_za 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en_za 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en_za 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en_za 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en_za 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en_za 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en_za 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en_za 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en_za 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en_za 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en_za 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en_za 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en_za 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en_za 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en_za 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en_za 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en_za 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en_za 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en_za 1$s %d", i));
		assert(!faker.loremText().empty, format("en_za 1$s %d", i));
		assert(!faker.loremWords().empty, format("en_za 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en_za 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en_za 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameGender().empty, format("en_za 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en_za 1$s %d", i));
		assert(!faker.nameName().empty, format("en_za 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en_za 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en_za 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en_za 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en_za 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en_za 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en_za 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en_za 1$s %d", i));
		assert(!faker.teamName().empty, format("en_za 1$s %d", i));
		assert(!faker.vehicle().empty, format("en_za 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en_za 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en_za 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en_za 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en_za 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en_za 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en_za 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en_za 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en_za 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en_za 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en_za 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en_za 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en_za 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en_za 1$s %d", i));

	}
}

unittest {
	import faked.faker_es;
    auto faker = new Faker_es(19);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("es 1$s %d", i));
		assert(!faker.addressCity().empty, format("es 1$s %d", i));
		assert(!faker.addressCityName().empty, format("es 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("es 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("es 1$s %d", i));
		assert(!faker.addressCountry().empty, format("es 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("es 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("es 1$s %d", i));
		assert(!faker.addressCounty().empty, format("es 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("es 1$s %d", i));
		assert(!faker.addressDirection().empty, format("es 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("es 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("es 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("es 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("es 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("es 1$s %d", i));
		assert(!faker.addressState().empty, format("es 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("es 1$s %d", i));
		assert(!faker.addressStreet().empty, format("es 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("es 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("es 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("es 1$s %d", i));
		assert(!faker.animalBear().empty, format("es 1$s %d", i));
		assert(!faker.animalBird().empty, format("es 1$s %d", i));
		assert(!faker.animalCat().empty, format("es 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("es 1$s %d", i));
		assert(!faker.animalCow().empty, format("es 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("es 1$s %d", i));
		assert(!faker.animalDog().empty, format("es 1$s %d", i));
		assert(!faker.animalFish().empty, format("es 1$s %d", i));
		assert(!faker.animalHorse().empty, format("es 1$s %d", i));
		assert(!faker.animalInsect().empty, format("es 1$s %d", i));
		assert(!faker.animalLion().empty, format("es 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("es 1$s %d", i));
		assert(!faker.animalRodent().empty, format("es 1$s %d", i));
		assert(!faker.animalSnake().empty, format("es 1$s %d", i));
		assert(!faker.animalType().empty, format("es 1$s %d", i));
		assert(!faker.appAuthor().empty, format("es 1$s %d", i));
		assert(!faker.appName().empty, format("es 1$s %d", i));
		assert(!faker.appVersion().empty, format("es 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("es 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("es 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("es 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("es 1$s %d", i));
		assert(!faker.colorHuman().empty, format("es 1$s %d", i));
		assert(!faker.colorSpace().empty, format("es 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("es 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("es 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("es 1$s %d", i));
		assert(!faker.companyBs().empty, format("es 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("es 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("es 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("es 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("es 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("es 1$s %d", i));
		assert(!faker.companyName().empty, format("es 1$s %d", i));
		assert(!faker.companyNoun().empty, format("es 1$s %d", i));
		assert(!faker.companySuffix().empty, format("es 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("es 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("es 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("es 1$s %d", i));
		assert(!faker.databaseType().empty, format("es 1$s %d", i));
		assert(!faker.dateMonth().empty, format("es 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("es 1$s %d", i));
		assert(!faker.financeAccount().empty, format("es 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("es 1$s %d", i));
		assert(!faker.financeBIC().empty, format("es 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("es 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("es 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("es 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("es 1$s %d", i));
		assert(!faker.financeMask().empty, format("es 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("es 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("es 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("es 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("es 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("es 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("es 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("es 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("es 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("es 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("es 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("es 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("es 1$s %d", i));
		assert(!faker.internetColor().empty, format("es 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("es 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("es 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("es 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("es 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("es 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("es 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("es 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("es 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("es 1$s %d", i));
		assert(!faker.internetPassword().empty, format("es 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("es 1$s %d", i));
		assert(!faker.internetUrl().empty, format("es 1$s %d", i));
		assert(!faker.internetUserName().empty, format("es 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("es 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("es 1$s %d", i));
		assert(!faker.loremSentance().empty, format("es 1$s %d", i));
		assert(!faker.loremSentances().empty, format("es 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("es 1$s %d", i));
		assert(!faker.loremText().empty, format("es 1$s %d", i));
		assert(!faker.loremWords().empty, format("es 1$s %d", i));
		assert(!faker.musicGenre().empty, format("es 1$s %d", i));
		assert(!faker.musicSongName().empty, format("es 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("es 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("es 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("es 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("es 1$s %d", i));
		assert(!faker.nameGender().empty, format("es 1$s %d", i));
		assert(!faker.nameLastName().empty, format("es 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("es 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("es 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("es 1$s %d", i));
		assert(!faker.nameName().empty, format("es 1$s %d", i));
		assert(!faker.namePrefix().empty, format("es 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("es 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("es 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("es 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("es 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("es 1$s %d", i));
		assert(!faker.teamCreature().empty, format("es 1$s %d", i));
		assert(!faker.teamName().empty, format("es 1$s %d", i));
		assert(!faker.vehicle().empty, format("es 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("es 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("es 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("es 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("es 1$s %d", i));
		assert(!faker.vehicleType().empty, format("es 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("es 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("es 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("es 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("es 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("es 1$s %d", i));
		assert(!faker.wordNoun().empty, format("es 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("es 1$s %d", i));
		assert(!faker.wordVerb().empty, format("es 1$s %d", i));

	}
}

unittest {
	import faked.faker_es_mx;
    auto faker = new Faker_es_mx(20);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCity().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCityName().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCountry().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressCounty().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressDirection().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressState().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressStreet().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("es_mx 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalBear().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalBird().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalCat().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalCow().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalDog().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalFish().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalHorse().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalInsect().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalLion().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalRodent().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalSnake().empty, format("es_mx 1$s %d", i));
		assert(!faker.animalType().empty, format("es_mx 1$s %d", i));
		assert(!faker.appAuthor().empty, format("es_mx 1$s %d", i));
		assert(!faker.appName().empty, format("es_mx 1$s %d", i));
		assert(!faker.appVersion().empty, format("es_mx 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("es_mx 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("es_mx 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("es_mx 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("es_mx 1$s %d", i));
		assert(!faker.colorHuman().empty, format("es_mx 1$s %d", i));
		assert(!faker.colorSpace().empty, format("es_mx 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("es_mx 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyBs().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyName().empty, format("es_mx 1$s %d", i));
		assert(!faker.companyNoun().empty, format("es_mx 1$s %d", i));
		assert(!faker.companySuffix().empty, format("es_mx 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("es_mx 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("es_mx 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("es_mx 1$s %d", i));
		assert(!faker.databaseType().empty, format("es_mx 1$s %d", i));
		assert(!faker.dateMonth().empty, format("es_mx 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeAccount().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeBIC().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeMask().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("es_mx 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("es_mx 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("es_mx 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("es_mx 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("es_mx 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("es_mx 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("es_mx 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("es_mx 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("es_mx 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("es_mx 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetColor().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetPassword().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetUrl().empty, format("es_mx 1$s %d", i));
		assert(!faker.internetUserName().empty, format("es_mx 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("es_mx 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("es_mx 1$s %d", i));
		assert(!faker.loremSentance().empty, format("es_mx 1$s %d", i));
		assert(!faker.loremSentances().empty, format("es_mx 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("es_mx 1$s %d", i));
		assert(!faker.loremText().empty, format("es_mx 1$s %d", i));
		assert(!faker.loremWords().empty, format("es_mx 1$s %d", i));
		assert(!faker.musicGenre().empty, format("es_mx 1$s %d", i));
		assert(!faker.musicSongName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameGender().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameLastName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameName().empty, format("es_mx 1$s %d", i));
		assert(!faker.namePrefix().empty, format("es_mx 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("es_mx 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("es_mx 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("es_mx 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("es_mx 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("es_mx 1$s %d", i));
		assert(!faker.teamCreature().empty, format("es_mx 1$s %d", i));
		assert(!faker.teamName().empty, format("es_mx 1$s %d", i));
		assert(!faker.vehicle().empty, format("es_mx 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("es_mx 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("es_mx 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("es_mx 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("es_mx 1$s %d", i));
		assert(!faker.vehicleType().empty, format("es_mx 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("es_mx 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("es_mx 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("es_mx 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("es_mx 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("es_mx 1$s %d", i));
		assert(!faker.wordNoun().empty, format("es_mx 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("es_mx 1$s %d", i));
		assert(!faker.wordVerb().empty, format("es_mx 1$s %d", i));

	}
}

unittest {
	import faked.faker_fi;
    auto faker = new Faker_fi(21);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("fi 1$s %d", i));
		assert(!faker.addressCity().empty, format("fi 1$s %d", i));
		assert(!faker.addressCityName().empty, format("fi 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("fi 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("fi 1$s %d", i));
		assert(!faker.addressCountry().empty, format("fi 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("fi 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("fi 1$s %d", i));
		assert(!faker.addressCounty().empty, format("fi 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("fi 1$s %d", i));
		assert(!faker.addressDirection().empty, format("fi 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("fi 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("fi 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("fi 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("fi 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("fi 1$s %d", i));
		assert(!faker.addressState().empty, format("fi 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("fi 1$s %d", i));
		assert(!faker.addressStreet().empty, format("fi 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("fi 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("fi 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("fi 1$s %d", i));
		assert(!faker.animalBear().empty, format("fi 1$s %d", i));
		assert(!faker.animalBird().empty, format("fi 1$s %d", i));
		assert(!faker.animalCat().empty, format("fi 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("fi 1$s %d", i));
		assert(!faker.animalCow().empty, format("fi 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("fi 1$s %d", i));
		assert(!faker.animalDog().empty, format("fi 1$s %d", i));
		assert(!faker.animalFish().empty, format("fi 1$s %d", i));
		assert(!faker.animalHorse().empty, format("fi 1$s %d", i));
		assert(!faker.animalInsect().empty, format("fi 1$s %d", i));
		assert(!faker.animalLion().empty, format("fi 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("fi 1$s %d", i));
		assert(!faker.animalRodent().empty, format("fi 1$s %d", i));
		assert(!faker.animalSnake().empty, format("fi 1$s %d", i));
		assert(!faker.animalType().empty, format("fi 1$s %d", i));
		assert(!faker.appAuthor().empty, format("fi 1$s %d", i));
		assert(!faker.appName().empty, format("fi 1$s %d", i));
		assert(!faker.appVersion().empty, format("fi 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("fi 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("fi 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("fi 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("fi 1$s %d", i));
		assert(!faker.colorHuman().empty, format("fi 1$s %d", i));
		assert(!faker.colorSpace().empty, format("fi 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("fi 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("fi 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("fi 1$s %d", i));
		assert(!faker.companyBs().empty, format("fi 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("fi 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("fi 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("fi 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("fi 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("fi 1$s %d", i));
		assert(!faker.companyName().empty, format("fi 1$s %d", i));
		assert(!faker.companyNoun().empty, format("fi 1$s %d", i));
		assert(!faker.companySuffix().empty, format("fi 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("fi 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("fi 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("fi 1$s %d", i));
		assert(!faker.databaseType().empty, format("fi 1$s %d", i));
		assert(!faker.dateMonth().empty, format("fi 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("fi 1$s %d", i));
		assert(!faker.financeAccount().empty, format("fi 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("fi 1$s %d", i));
		assert(!faker.financeBIC().empty, format("fi 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("fi 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("fi 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("fi 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("fi 1$s %d", i));
		assert(!faker.financeMask().empty, format("fi 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("fi 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("fi 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("fi 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("fi 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("fi 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("fi 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("fi 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("fi 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("fi 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("fi 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("fi 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("fi 1$s %d", i));
		assert(!faker.internetColor().empty, format("fi 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("fi 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("fi 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("fi 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("fi 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("fi 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("fi 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("fi 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("fi 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("fi 1$s %d", i));
		assert(!faker.internetPassword().empty, format("fi 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("fi 1$s %d", i));
		assert(!faker.internetUrl().empty, format("fi 1$s %d", i));
		assert(!faker.internetUserName().empty, format("fi 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("fi 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("fi 1$s %d", i));
		assert(!faker.loremSentance().empty, format("fi 1$s %d", i));
		assert(!faker.loremSentances().empty, format("fi 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("fi 1$s %d", i));
		assert(!faker.loremText().empty, format("fi 1$s %d", i));
		assert(!faker.loremWords().empty, format("fi 1$s %d", i));
		assert(!faker.musicGenre().empty, format("fi 1$s %d", i));
		assert(!faker.musicSongName().empty, format("fi 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("fi 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("fi 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("fi 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("fi 1$s %d", i));
		assert(!faker.nameGender().empty, format("fi 1$s %d", i));
		assert(!faker.nameLastName().empty, format("fi 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("fi 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("fi 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("fi 1$s %d", i));
		assert(!faker.nameName().empty, format("fi 1$s %d", i));
		assert(!faker.namePrefix().empty, format("fi 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("fi 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("fi 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("fi 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("fi 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("fi 1$s %d", i));
		assert(!faker.teamCreature().empty, format("fi 1$s %d", i));
		assert(!faker.teamName().empty, format("fi 1$s %d", i));
		assert(!faker.vehicle().empty, format("fi 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("fi 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("fi 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("fi 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("fi 1$s %d", i));
		assert(!faker.vehicleType().empty, format("fi 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("fi 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("fi 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("fi 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("fi 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("fi 1$s %d", i));
		assert(!faker.wordNoun().empty, format("fi 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("fi 1$s %d", i));
		assert(!faker.wordVerb().empty, format("fi 1$s %d", i));

	}
}

unittest {
	import faked.faker_fr;
    auto faker = new Faker_fr(22);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("fr 1$s %d", i));
		assert(!faker.addressCity().empty, format("fr 1$s %d", i));
		assert(!faker.addressCityName().empty, format("fr 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("fr 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("fr 1$s %d", i));
		assert(!faker.addressCountry().empty, format("fr 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("fr 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("fr 1$s %d", i));
		assert(!faker.addressCounty().empty, format("fr 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("fr 1$s %d", i));
		assert(!faker.addressDirection().empty, format("fr 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("fr 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("fr 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("fr 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("fr 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("fr 1$s %d", i));
		assert(!faker.addressState().empty, format("fr 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("fr 1$s %d", i));
		assert(!faker.addressStreet().empty, format("fr 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("fr 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("fr 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("fr 1$s %d", i));
		assert(!faker.animalBear().empty, format("fr 1$s %d", i));
		assert(!faker.animalBird().empty, format("fr 1$s %d", i));
		assert(!faker.animalCat().empty, format("fr 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("fr 1$s %d", i));
		assert(!faker.animalCow().empty, format("fr 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("fr 1$s %d", i));
		assert(!faker.animalDog().empty, format("fr 1$s %d", i));
		assert(!faker.animalFish().empty, format("fr 1$s %d", i));
		assert(!faker.animalHorse().empty, format("fr 1$s %d", i));
		assert(!faker.animalInsect().empty, format("fr 1$s %d", i));
		assert(!faker.animalLion().empty, format("fr 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("fr 1$s %d", i));
		assert(!faker.animalRodent().empty, format("fr 1$s %d", i));
		assert(!faker.animalSnake().empty, format("fr 1$s %d", i));
		assert(!faker.animalType().empty, format("fr 1$s %d", i));
		assert(!faker.appAuthor().empty, format("fr 1$s %d", i));
		assert(!faker.appName().empty, format("fr 1$s %d", i));
		assert(!faker.appVersion().empty, format("fr 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("fr 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("fr 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("fr 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("fr 1$s %d", i));
		assert(!faker.colorHuman().empty, format("fr 1$s %d", i));
		assert(!faker.colorSpace().empty, format("fr 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("fr 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("fr 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("fr 1$s %d", i));
		assert(!faker.companyBs().empty, format("fr 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("fr 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("fr 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("fr 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("fr 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("fr 1$s %d", i));
		assert(!faker.companyName().empty, format("fr 1$s %d", i));
		assert(!faker.companyNoun().empty, format("fr 1$s %d", i));
		assert(!faker.companySuffix().empty, format("fr 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("fr 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("fr 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("fr 1$s %d", i));
		assert(!faker.databaseType().empty, format("fr 1$s %d", i));
		assert(!faker.dateMonth().empty, format("fr 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("fr 1$s %d", i));
		assert(!faker.financeAccount().empty, format("fr 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("fr 1$s %d", i));
		assert(!faker.financeBIC().empty, format("fr 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("fr 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("fr 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("fr 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("fr 1$s %d", i));
		assert(!faker.financeMask().empty, format("fr 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("fr 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("fr 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("fr 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("fr 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("fr 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("fr 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("fr 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("fr 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("fr 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("fr 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("fr 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("fr 1$s %d", i));
		assert(!faker.internetColor().empty, format("fr 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("fr 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("fr 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("fr 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("fr 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("fr 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("fr 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("fr 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("fr 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("fr 1$s %d", i));
		assert(!faker.internetPassword().empty, format("fr 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("fr 1$s %d", i));
		assert(!faker.internetUrl().empty, format("fr 1$s %d", i));
		assert(!faker.internetUserName().empty, format("fr 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("fr 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("fr 1$s %d", i));
		assert(!faker.loremSentance().empty, format("fr 1$s %d", i));
		assert(!faker.loremSentances().empty, format("fr 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("fr 1$s %d", i));
		assert(!faker.loremText().empty, format("fr 1$s %d", i));
		assert(!faker.loremWords().empty, format("fr 1$s %d", i));
		assert(!faker.musicGenre().empty, format("fr 1$s %d", i));
		assert(!faker.musicSongName().empty, format("fr 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("fr 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("fr 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("fr 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("fr 1$s %d", i));
		assert(!faker.nameGender().empty, format("fr 1$s %d", i));
		assert(!faker.nameLastName().empty, format("fr 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("fr 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("fr 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("fr 1$s %d", i));
		assert(!faker.nameName().empty, format("fr 1$s %d", i));
		assert(!faker.namePrefix().empty, format("fr 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("fr 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("fr 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("fr 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("fr 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("fr 1$s %d", i));
		assert(!faker.teamCreature().empty, format("fr 1$s %d", i));
		assert(!faker.teamName().empty, format("fr 1$s %d", i));
		assert(!faker.vehicle().empty, format("fr 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("fr 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("fr 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("fr 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("fr 1$s %d", i));
		assert(!faker.vehicleType().empty, format("fr 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("fr 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("fr 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("fr 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("fr 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("fr 1$s %d", i));
		assert(!faker.wordNoun().empty, format("fr 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("fr 1$s %d", i));
		assert(!faker.wordVerb().empty, format("fr 1$s %d", i));

	}
}

unittest {
	import faked.faker_fr_be;
    auto faker = new Faker_fr_be(23);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCity().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCityName().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCountry().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressCounty().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressDirection().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressState().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressStreet().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("fr_be 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalBear().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalBird().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalCat().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalCow().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalDog().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalFish().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalHorse().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalInsect().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalLion().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalRodent().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalSnake().empty, format("fr_be 1$s %d", i));
		assert(!faker.animalType().empty, format("fr_be 1$s %d", i));
		assert(!faker.appAuthor().empty, format("fr_be 1$s %d", i));
		assert(!faker.appName().empty, format("fr_be 1$s %d", i));
		assert(!faker.appVersion().empty, format("fr_be 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("fr_be 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("fr_be 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("fr_be 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("fr_be 1$s %d", i));
		assert(!faker.colorHuman().empty, format("fr_be 1$s %d", i));
		assert(!faker.colorSpace().empty, format("fr_be 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("fr_be 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyBs().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyName().empty, format("fr_be 1$s %d", i));
		assert(!faker.companyNoun().empty, format("fr_be 1$s %d", i));
		assert(!faker.companySuffix().empty, format("fr_be 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("fr_be 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("fr_be 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("fr_be 1$s %d", i));
		assert(!faker.databaseType().empty, format("fr_be 1$s %d", i));
		assert(!faker.dateMonth().empty, format("fr_be 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeAccount().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeBIC().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeMask().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("fr_be 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("fr_be 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("fr_be 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("fr_be 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("fr_be 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("fr_be 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("fr_be 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("fr_be 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("fr_be 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("fr_be 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetColor().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetPassword().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetUrl().empty, format("fr_be 1$s %d", i));
		assert(!faker.internetUserName().empty, format("fr_be 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("fr_be 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("fr_be 1$s %d", i));
		assert(!faker.loremSentance().empty, format("fr_be 1$s %d", i));
		assert(!faker.loremSentances().empty, format("fr_be 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("fr_be 1$s %d", i));
		assert(!faker.loremText().empty, format("fr_be 1$s %d", i));
		assert(!faker.loremWords().empty, format("fr_be 1$s %d", i));
		assert(!faker.musicGenre().empty, format("fr_be 1$s %d", i));
		assert(!faker.musicSongName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameGender().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameLastName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameName().empty, format("fr_be 1$s %d", i));
		assert(!faker.namePrefix().empty, format("fr_be 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("fr_be 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("fr_be 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("fr_be 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("fr_be 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("fr_be 1$s %d", i));
		assert(!faker.teamCreature().empty, format("fr_be 1$s %d", i));
		assert(!faker.teamName().empty, format("fr_be 1$s %d", i));
		assert(!faker.vehicle().empty, format("fr_be 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("fr_be 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("fr_be 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("fr_be 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("fr_be 1$s %d", i));
		assert(!faker.vehicleType().empty, format("fr_be 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("fr_be 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("fr_be 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("fr_be 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("fr_be 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("fr_be 1$s %d", i));
		assert(!faker.wordNoun().empty, format("fr_be 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("fr_be 1$s %d", i));
		assert(!faker.wordVerb().empty, format("fr_be 1$s %d", i));

	}
}

unittest {
	import faked.faker_fr_ca;
    auto faker = new Faker_fr_ca(24);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCity().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCityName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCountry().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressCounty().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressDirection().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressState().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressStreet().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("fr_ca 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalBear().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalBird().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalCat().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalCow().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalDog().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalFish().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalHorse().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalInsect().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalLion().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalRodent().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalSnake().empty, format("fr_ca 1$s %d", i));
		assert(!faker.animalType().empty, format("fr_ca 1$s %d", i));
		assert(!faker.appAuthor().empty, format("fr_ca 1$s %d", i));
		assert(!faker.appName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.appVersion().empty, format("fr_ca 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("fr_ca 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("fr_ca 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("fr_ca 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("fr_ca 1$s %d", i));
		assert(!faker.colorHuman().empty, format("fr_ca 1$s %d", i));
		assert(!faker.colorSpace().empty, format("fr_ca 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("fr_ca 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyBs().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companyNoun().empty, format("fr_ca 1$s %d", i));
		assert(!faker.companySuffix().empty, format("fr_ca 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("fr_ca 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("fr_ca 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("fr_ca 1$s %d", i));
		assert(!faker.databaseType().empty, format("fr_ca 1$s %d", i));
		assert(!faker.dateMonth().empty, format("fr_ca 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeAccount().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeBIC().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeMask().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("fr_ca 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("fr_ca 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("fr_ca 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("fr_ca 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("fr_ca 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("fr_ca 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("fr_ca 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("fr_ca 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("fr_ca 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("fr_ca 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetColor().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetPassword().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetUrl().empty, format("fr_ca 1$s %d", i));
		assert(!faker.internetUserName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("fr_ca 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("fr_ca 1$s %d", i));
		assert(!faker.loremSentance().empty, format("fr_ca 1$s %d", i));
		assert(!faker.loremSentances().empty, format("fr_ca 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("fr_ca 1$s %d", i));
		assert(!faker.loremText().empty, format("fr_ca 1$s %d", i));
		assert(!faker.loremWords().empty, format("fr_ca 1$s %d", i));
		assert(!faker.musicGenre().empty, format("fr_ca 1$s %d", i));
		assert(!faker.musicSongName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameGender().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameLastName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.namePrefix().empty, format("fr_ca 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("fr_ca 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("fr_ca 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("fr_ca 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("fr_ca 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("fr_ca 1$s %d", i));
		assert(!faker.teamCreature().empty, format("fr_ca 1$s %d", i));
		assert(!faker.teamName().empty, format("fr_ca 1$s %d", i));
		assert(!faker.vehicle().empty, format("fr_ca 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("fr_ca 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("fr_ca 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("fr_ca 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("fr_ca 1$s %d", i));
		assert(!faker.vehicleType().empty, format("fr_ca 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("fr_ca 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("fr_ca 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("fr_ca 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("fr_ca 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("fr_ca 1$s %d", i));
		assert(!faker.wordNoun().empty, format("fr_ca 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("fr_ca 1$s %d", i));
		assert(!faker.wordVerb().empty, format("fr_ca 1$s %d", i));

	}
}

unittest {
	import faked.faker_fr_ch;
    auto faker = new Faker_fr_ch(25);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCity().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCityName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCountry().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressCounty().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressDirection().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressState().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressStreet().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("fr_ch 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalBear().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalBird().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalCat().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalCow().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalDog().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalFish().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalHorse().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalInsect().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalLion().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalRodent().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalSnake().empty, format("fr_ch 1$s %d", i));
		assert(!faker.animalType().empty, format("fr_ch 1$s %d", i));
		assert(!faker.appAuthor().empty, format("fr_ch 1$s %d", i));
		assert(!faker.appName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.appVersion().empty, format("fr_ch 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("fr_ch 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("fr_ch 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("fr_ch 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("fr_ch 1$s %d", i));
		assert(!faker.colorHuman().empty, format("fr_ch 1$s %d", i));
		assert(!faker.colorSpace().empty, format("fr_ch 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("fr_ch 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyBs().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companyNoun().empty, format("fr_ch 1$s %d", i));
		assert(!faker.companySuffix().empty, format("fr_ch 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("fr_ch 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("fr_ch 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("fr_ch 1$s %d", i));
		assert(!faker.databaseType().empty, format("fr_ch 1$s %d", i));
		assert(!faker.dateMonth().empty, format("fr_ch 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeAccount().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeBIC().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeMask().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("fr_ch 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("fr_ch 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("fr_ch 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("fr_ch 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("fr_ch 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("fr_ch 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("fr_ch 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("fr_ch 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("fr_ch 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("fr_ch 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetColor().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetPassword().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetUrl().empty, format("fr_ch 1$s %d", i));
		assert(!faker.internetUserName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("fr_ch 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("fr_ch 1$s %d", i));
		assert(!faker.loremSentance().empty, format("fr_ch 1$s %d", i));
		assert(!faker.loremSentances().empty, format("fr_ch 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("fr_ch 1$s %d", i));
		assert(!faker.loremText().empty, format("fr_ch 1$s %d", i));
		assert(!faker.loremWords().empty, format("fr_ch 1$s %d", i));
		assert(!faker.musicGenre().empty, format("fr_ch 1$s %d", i));
		assert(!faker.musicSongName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameGender().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameLastName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.namePrefix().empty, format("fr_ch 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("fr_ch 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("fr_ch 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("fr_ch 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("fr_ch 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("fr_ch 1$s %d", i));
		assert(!faker.teamCreature().empty, format("fr_ch 1$s %d", i));
		assert(!faker.teamName().empty, format("fr_ch 1$s %d", i));
		assert(!faker.vehicle().empty, format("fr_ch 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("fr_ch 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("fr_ch 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("fr_ch 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("fr_ch 1$s %d", i));
		assert(!faker.vehicleType().empty, format("fr_ch 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("fr_ch 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("fr_ch 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("fr_ch 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("fr_ch 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("fr_ch 1$s %d", i));
		assert(!faker.wordNoun().empty, format("fr_ch 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("fr_ch 1$s %d", i));
		assert(!faker.wordVerb().empty, format("fr_ch 1$s %d", i));

	}
}

unittest {
	import faked.faker_ge;
    auto faker = new Faker_ge(26);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("ge 1$s %d", i));
		assert(!faker.addressCity().empty, format("ge 1$s %d", i));
		assert(!faker.addressCityName().empty, format("ge 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("ge 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("ge 1$s %d", i));
		assert(!faker.addressCountry().empty, format("ge 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("ge 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("ge 1$s %d", i));
		assert(!faker.addressCounty().empty, format("ge 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("ge 1$s %d", i));
		assert(!faker.addressDirection().empty, format("ge 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("ge 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("ge 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("ge 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("ge 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("ge 1$s %d", i));
		assert(!faker.addressState().empty, format("ge 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("ge 1$s %d", i));
		assert(!faker.addressStreet().empty, format("ge 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("ge 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("ge 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("ge 1$s %d", i));
		assert(!faker.animalBear().empty, format("ge 1$s %d", i));
		assert(!faker.animalBird().empty, format("ge 1$s %d", i));
		assert(!faker.animalCat().empty, format("ge 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("ge 1$s %d", i));
		assert(!faker.animalCow().empty, format("ge 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("ge 1$s %d", i));
		assert(!faker.animalDog().empty, format("ge 1$s %d", i));
		assert(!faker.animalFish().empty, format("ge 1$s %d", i));
		assert(!faker.animalHorse().empty, format("ge 1$s %d", i));
		assert(!faker.animalInsect().empty, format("ge 1$s %d", i));
		assert(!faker.animalLion().empty, format("ge 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("ge 1$s %d", i));
		assert(!faker.animalRodent().empty, format("ge 1$s %d", i));
		assert(!faker.animalSnake().empty, format("ge 1$s %d", i));
		assert(!faker.animalType().empty, format("ge 1$s %d", i));
		assert(!faker.appAuthor().empty, format("ge 1$s %d", i));
		assert(!faker.appName().empty, format("ge 1$s %d", i));
		assert(!faker.appVersion().empty, format("ge 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("ge 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("ge 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("ge 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("ge 1$s %d", i));
		assert(!faker.colorHuman().empty, format("ge 1$s %d", i));
		assert(!faker.colorSpace().empty, format("ge 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("ge 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("ge 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("ge 1$s %d", i));
		assert(!faker.companyBs().empty, format("ge 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("ge 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("ge 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("ge 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("ge 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("ge 1$s %d", i));
		assert(!faker.companyName().empty, format("ge 1$s %d", i));
		assert(!faker.companyNoun().empty, format("ge 1$s %d", i));
		assert(!faker.companySuffix().empty, format("ge 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("ge 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("ge 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("ge 1$s %d", i));
		assert(!faker.databaseType().empty, format("ge 1$s %d", i));
		assert(!faker.dateMonth().empty, format("ge 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("ge 1$s %d", i));
		assert(!faker.financeAccount().empty, format("ge 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("ge 1$s %d", i));
		assert(!faker.financeBIC().empty, format("ge 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("ge 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("ge 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("ge 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("ge 1$s %d", i));
		assert(!faker.financeMask().empty, format("ge 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("ge 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("ge 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("ge 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("ge 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("ge 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("ge 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("ge 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("ge 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("ge 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("ge 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("ge 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("ge 1$s %d", i));
		assert(!faker.internetColor().empty, format("ge 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("ge 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("ge 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("ge 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("ge 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("ge 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("ge 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("ge 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("ge 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("ge 1$s %d", i));
		assert(!faker.internetPassword().empty, format("ge 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("ge 1$s %d", i));
		assert(!faker.internetUrl().empty, format("ge 1$s %d", i));
		assert(!faker.internetUserName().empty, format("ge 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("ge 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("ge 1$s %d", i));
		assert(!faker.loremSentance().empty, format("ge 1$s %d", i));
		assert(!faker.loremSentances().empty, format("ge 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("ge 1$s %d", i));
		assert(!faker.loremText().empty, format("ge 1$s %d", i));
		assert(!faker.loremWords().empty, format("ge 1$s %d", i));
		assert(!faker.musicGenre().empty, format("ge 1$s %d", i));
		assert(!faker.musicSongName().empty, format("ge 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("ge 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("ge 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("ge 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("ge 1$s %d", i));
		assert(!faker.nameGender().empty, format("ge 1$s %d", i));
		assert(!faker.nameLastName().empty, format("ge 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("ge 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("ge 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("ge 1$s %d", i));
		assert(!faker.nameName().empty, format("ge 1$s %d", i));
		assert(!faker.namePrefix().empty, format("ge 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("ge 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("ge 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("ge 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("ge 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("ge 1$s %d", i));
		assert(!faker.teamCreature().empty, format("ge 1$s %d", i));
		assert(!faker.teamName().empty, format("ge 1$s %d", i));
		assert(!faker.vehicle().empty, format("ge 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("ge 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("ge 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("ge 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("ge 1$s %d", i));
		assert(!faker.vehicleType().empty, format("ge 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("ge 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("ge 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("ge 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("ge 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("ge 1$s %d", i));
		assert(!faker.wordNoun().empty, format("ge 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("ge 1$s %d", i));
		assert(!faker.wordVerb().empty, format("ge 1$s %d", i));

	}
}

unittest {
	import faked.faker_he;
    auto faker = new Faker_he(27);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("he 1$s %d", i));
		assert(!faker.addressCity().empty, format("he 1$s %d", i));
		assert(!faker.addressCityName().empty, format("he 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("he 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("he 1$s %d", i));
		assert(!faker.addressCountry().empty, format("he 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("he 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("he 1$s %d", i));
		assert(!faker.addressCounty().empty, format("he 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("he 1$s %d", i));
		assert(!faker.addressDirection().empty, format("he 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("he 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("he 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("he 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("he 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("he 1$s %d", i));
		assert(!faker.addressState().empty, format("he 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("he 1$s %d", i));
		assert(!faker.addressStreet().empty, format("he 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("he 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("he 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("he 1$s %d", i));
		assert(!faker.animalBear().empty, format("he 1$s %d", i));
		assert(!faker.animalBird().empty, format("he 1$s %d", i));
		assert(!faker.animalCat().empty, format("he 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("he 1$s %d", i));
		assert(!faker.animalCow().empty, format("he 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("he 1$s %d", i));
		assert(!faker.animalDog().empty, format("he 1$s %d", i));
		assert(!faker.animalFish().empty, format("he 1$s %d", i));
		assert(!faker.animalHorse().empty, format("he 1$s %d", i));
		assert(!faker.animalInsect().empty, format("he 1$s %d", i));
		assert(!faker.animalLion().empty, format("he 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("he 1$s %d", i));
		assert(!faker.animalRodent().empty, format("he 1$s %d", i));
		assert(!faker.animalSnake().empty, format("he 1$s %d", i));
		assert(!faker.animalType().empty, format("he 1$s %d", i));
		assert(!faker.appAuthor().empty, format("he 1$s %d", i));
		assert(!faker.appName().empty, format("he 1$s %d", i));
		assert(!faker.appVersion().empty, format("he 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("he 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("he 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("he 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("he 1$s %d", i));
		assert(!faker.colorHuman().empty, format("he 1$s %d", i));
		assert(!faker.colorSpace().empty, format("he 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("he 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("he 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("he 1$s %d", i));
		assert(!faker.companyBs().empty, format("he 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("he 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("he 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("he 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("he 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("he 1$s %d", i));
		assert(!faker.companyName().empty, format("he 1$s %d", i));
		assert(!faker.companyNoun().empty, format("he 1$s %d", i));
		assert(!faker.companySuffix().empty, format("he 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("he 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("he 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("he 1$s %d", i));
		assert(!faker.databaseType().empty, format("he 1$s %d", i));
		assert(!faker.dateMonth().empty, format("he 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("he 1$s %d", i));
		assert(!faker.financeAccount().empty, format("he 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("he 1$s %d", i));
		assert(!faker.financeBIC().empty, format("he 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("he 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("he 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("he 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("he 1$s %d", i));
		assert(!faker.financeMask().empty, format("he 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("he 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("he 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("he 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("he 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("he 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("he 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("he 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("he 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("he 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("he 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("he 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("he 1$s %d", i));
		assert(!faker.internetColor().empty, format("he 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("he 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("he 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("he 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("he 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("he 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("he 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("he 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("he 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("he 1$s %d", i));
		assert(!faker.internetPassword().empty, format("he 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("he 1$s %d", i));
		assert(!faker.internetUrl().empty, format("he 1$s %d", i));
		assert(!faker.internetUserName().empty, format("he 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("he 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("he 1$s %d", i));
		assert(!faker.loremSentance().empty, format("he 1$s %d", i));
		assert(!faker.loremSentances().empty, format("he 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("he 1$s %d", i));
		assert(!faker.loremText().empty, format("he 1$s %d", i));
		assert(!faker.loremWords().empty, format("he 1$s %d", i));
		assert(!faker.musicGenre().empty, format("he 1$s %d", i));
		assert(!faker.musicSongName().empty, format("he 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("he 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("he 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("he 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("he 1$s %d", i));
		assert(!faker.nameGender().empty, format("he 1$s %d", i));
		assert(!faker.nameLastName().empty, format("he 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("he 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("he 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("he 1$s %d", i));
		assert(!faker.nameName().empty, format("he 1$s %d", i));
		assert(!faker.namePrefix().empty, format("he 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("he 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("he 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("he 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("he 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("he 1$s %d", i));
		assert(!faker.teamCreature().empty, format("he 1$s %d", i));
		assert(!faker.teamName().empty, format("he 1$s %d", i));
		assert(!faker.vehicle().empty, format("he 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("he 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("he 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("he 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("he 1$s %d", i));
		assert(!faker.vehicleType().empty, format("he 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("he 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("he 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("he 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("he 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("he 1$s %d", i));
		assert(!faker.wordNoun().empty, format("he 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("he 1$s %d", i));
		assert(!faker.wordVerb().empty, format("he 1$s %d", i));

	}
}

unittest {
	import faked.faker_hr;
    auto faker = new Faker_hr(28);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("hr 1$s %d", i));
		assert(!faker.addressCity().empty, format("hr 1$s %d", i));
		assert(!faker.addressCityName().empty, format("hr 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("hr 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("hr 1$s %d", i));
		assert(!faker.addressCountry().empty, format("hr 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("hr 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("hr 1$s %d", i));
		assert(!faker.addressCounty().empty, format("hr 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("hr 1$s %d", i));
		assert(!faker.addressDirection().empty, format("hr 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("hr 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("hr 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("hr 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("hr 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("hr 1$s %d", i));
		assert(!faker.addressState().empty, format("hr 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("hr 1$s %d", i));
		assert(!faker.addressStreet().empty, format("hr 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("hr 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("hr 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("hr 1$s %d", i));
		assert(!faker.animalBear().empty, format("hr 1$s %d", i));
		assert(!faker.animalBird().empty, format("hr 1$s %d", i));
		assert(!faker.animalCat().empty, format("hr 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("hr 1$s %d", i));
		assert(!faker.animalCow().empty, format("hr 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("hr 1$s %d", i));
		assert(!faker.animalDog().empty, format("hr 1$s %d", i));
		assert(!faker.animalFish().empty, format("hr 1$s %d", i));
		assert(!faker.animalHorse().empty, format("hr 1$s %d", i));
		assert(!faker.animalInsect().empty, format("hr 1$s %d", i));
		assert(!faker.animalLion().empty, format("hr 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("hr 1$s %d", i));
		assert(!faker.animalRodent().empty, format("hr 1$s %d", i));
		assert(!faker.animalSnake().empty, format("hr 1$s %d", i));
		assert(!faker.animalType().empty, format("hr 1$s %d", i));
		assert(!faker.appAuthor().empty, format("hr 1$s %d", i));
		assert(!faker.appName().empty, format("hr 1$s %d", i));
		assert(!faker.appVersion().empty, format("hr 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("hr 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("hr 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("hr 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("hr 1$s %d", i));
		assert(!faker.colorHuman().empty, format("hr 1$s %d", i));
		assert(!faker.colorSpace().empty, format("hr 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("hr 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("hr 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("hr 1$s %d", i));
		assert(!faker.companyBs().empty, format("hr 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("hr 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("hr 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("hr 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("hr 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("hr 1$s %d", i));
		assert(!faker.companyName().empty, format("hr 1$s %d", i));
		assert(!faker.companyNoun().empty, format("hr 1$s %d", i));
		assert(!faker.companySuffix().empty, format("hr 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("hr 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("hr 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("hr 1$s %d", i));
		assert(!faker.databaseType().empty, format("hr 1$s %d", i));
		assert(!faker.dateMonth().empty, format("hr 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("hr 1$s %d", i));
		assert(!faker.financeAccount().empty, format("hr 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("hr 1$s %d", i));
		assert(!faker.financeBIC().empty, format("hr 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("hr 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("hr 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("hr 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("hr 1$s %d", i));
		assert(!faker.financeMask().empty, format("hr 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("hr 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("hr 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("hr 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("hr 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("hr 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("hr 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("hr 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("hr 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("hr 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("hr 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("hr 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("hr 1$s %d", i));
		assert(!faker.internetColor().empty, format("hr 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("hr 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("hr 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("hr 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("hr 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("hr 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("hr 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("hr 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("hr 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("hr 1$s %d", i));
		assert(!faker.internetPassword().empty, format("hr 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("hr 1$s %d", i));
		assert(!faker.internetUrl().empty, format("hr 1$s %d", i));
		assert(!faker.internetUserName().empty, format("hr 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("hr 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("hr 1$s %d", i));
		assert(!faker.loremSentance().empty, format("hr 1$s %d", i));
		assert(!faker.loremSentances().empty, format("hr 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("hr 1$s %d", i));
		assert(!faker.loremText().empty, format("hr 1$s %d", i));
		assert(!faker.loremWords().empty, format("hr 1$s %d", i));
		assert(!faker.musicGenre().empty, format("hr 1$s %d", i));
		assert(!faker.musicSongName().empty, format("hr 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("hr 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("hr 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("hr 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("hr 1$s %d", i));
		assert(!faker.nameGender().empty, format("hr 1$s %d", i));
		assert(!faker.nameLastName().empty, format("hr 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("hr 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("hr 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("hr 1$s %d", i));
		assert(!faker.nameName().empty, format("hr 1$s %d", i));
		assert(!faker.namePrefix().empty, format("hr 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("hr 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("hr 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("hr 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("hr 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("hr 1$s %d", i));
		assert(!faker.teamCreature().empty, format("hr 1$s %d", i));
		assert(!faker.teamName().empty, format("hr 1$s %d", i));
		assert(!faker.vehicle().empty, format("hr 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("hr 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("hr 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("hr 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("hr 1$s %d", i));
		assert(!faker.vehicleType().empty, format("hr 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("hr 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("hr 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("hr 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("hr 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("hr 1$s %d", i));
		assert(!faker.wordNoun().empty, format("hr 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("hr 1$s %d", i));
		assert(!faker.wordVerb().empty, format("hr 1$s %d", i));

	}
}

unittest {
	import faked.faker_hu;
    auto faker = new Faker_hu(29);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("hu 1$s %d", i));
		assert(!faker.addressCity().empty, format("hu 1$s %d", i));
		assert(!faker.addressCityName().empty, format("hu 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("hu 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("hu 1$s %d", i));
		assert(!faker.addressCountry().empty, format("hu 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("hu 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("hu 1$s %d", i));
		assert(!faker.addressCounty().empty, format("hu 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("hu 1$s %d", i));
		assert(!faker.addressDirection().empty, format("hu 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("hu 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("hu 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("hu 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("hu 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("hu 1$s %d", i));
		assert(!faker.addressState().empty, format("hu 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("hu 1$s %d", i));
		assert(!faker.addressStreet().empty, format("hu 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("hu 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("hu 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("hu 1$s %d", i));
		assert(!faker.animalBear().empty, format("hu 1$s %d", i));
		assert(!faker.animalBird().empty, format("hu 1$s %d", i));
		assert(!faker.animalCat().empty, format("hu 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("hu 1$s %d", i));
		assert(!faker.animalCow().empty, format("hu 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("hu 1$s %d", i));
		assert(!faker.animalDog().empty, format("hu 1$s %d", i));
		assert(!faker.animalFish().empty, format("hu 1$s %d", i));
		assert(!faker.animalHorse().empty, format("hu 1$s %d", i));
		assert(!faker.animalInsect().empty, format("hu 1$s %d", i));
		assert(!faker.animalLion().empty, format("hu 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("hu 1$s %d", i));
		assert(!faker.animalRodent().empty, format("hu 1$s %d", i));
		assert(!faker.animalSnake().empty, format("hu 1$s %d", i));
		assert(!faker.animalType().empty, format("hu 1$s %d", i));
		assert(!faker.appAuthor().empty, format("hu 1$s %d", i));
		assert(!faker.appName().empty, format("hu 1$s %d", i));
		assert(!faker.appVersion().empty, format("hu 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("hu 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("hu 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("hu 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("hu 1$s %d", i));
		assert(!faker.colorHuman().empty, format("hu 1$s %d", i));
		assert(!faker.colorSpace().empty, format("hu 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("hu 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("hu 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("hu 1$s %d", i));
		assert(!faker.companyBs().empty, format("hu 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("hu 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("hu 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("hu 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("hu 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("hu 1$s %d", i));
		assert(!faker.companyName().empty, format("hu 1$s %d", i));
		assert(!faker.companyNoun().empty, format("hu 1$s %d", i));
		assert(!faker.companySuffix().empty, format("hu 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("hu 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("hu 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("hu 1$s %d", i));
		assert(!faker.databaseType().empty, format("hu 1$s %d", i));
		assert(!faker.dateMonth().empty, format("hu 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("hu 1$s %d", i));
		assert(!faker.financeAccount().empty, format("hu 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("hu 1$s %d", i));
		assert(!faker.financeBIC().empty, format("hu 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("hu 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("hu 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("hu 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("hu 1$s %d", i));
		assert(!faker.financeMask().empty, format("hu 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("hu 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("hu 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("hu 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("hu 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("hu 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("hu 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("hu 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("hu 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("hu 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("hu 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("hu 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("hu 1$s %d", i));
		assert(!faker.internetColor().empty, format("hu 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("hu 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("hu 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("hu 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("hu 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("hu 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("hu 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("hu 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("hu 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("hu 1$s %d", i));
		assert(!faker.internetPassword().empty, format("hu 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("hu 1$s %d", i));
		assert(!faker.internetUrl().empty, format("hu 1$s %d", i));
		assert(!faker.internetUserName().empty, format("hu 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("hu 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("hu 1$s %d", i));
		assert(!faker.loremSentance().empty, format("hu 1$s %d", i));
		assert(!faker.loremSentances().empty, format("hu 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("hu 1$s %d", i));
		assert(!faker.loremText().empty, format("hu 1$s %d", i));
		assert(!faker.loremWords().empty, format("hu 1$s %d", i));
		assert(!faker.musicGenre().empty, format("hu 1$s %d", i));
		assert(!faker.musicSongName().empty, format("hu 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("hu 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("hu 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("hu 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("hu 1$s %d", i));
		assert(!faker.nameGender().empty, format("hu 1$s %d", i));
		assert(!faker.nameLastName().empty, format("hu 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("hu 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("hu 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("hu 1$s %d", i));
		assert(!faker.nameName().empty, format("hu 1$s %d", i));
		assert(!faker.namePrefix().empty, format("hu 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("hu 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("hu 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("hu 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("hu 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("hu 1$s %d", i));
		assert(!faker.teamCreature().empty, format("hu 1$s %d", i));
		assert(!faker.teamName().empty, format("hu 1$s %d", i));
		assert(!faker.vehicle().empty, format("hu 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("hu 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("hu 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("hu 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("hu 1$s %d", i));
		assert(!faker.vehicleType().empty, format("hu 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("hu 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("hu 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("hu 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("hu 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("hu 1$s %d", i));
		assert(!faker.wordNoun().empty, format("hu 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("hu 1$s %d", i));
		assert(!faker.wordVerb().empty, format("hu 1$s %d", i));

	}
}

unittest {
	import faked.faker_hy;
    auto faker = new Faker_hy(30);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("hy 1$s %d", i));
		assert(!faker.addressCity().empty, format("hy 1$s %d", i));
		assert(!faker.addressCityName().empty, format("hy 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("hy 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("hy 1$s %d", i));
		assert(!faker.addressCountry().empty, format("hy 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("hy 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("hy 1$s %d", i));
		assert(!faker.addressCounty().empty, format("hy 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("hy 1$s %d", i));
		assert(!faker.addressDirection().empty, format("hy 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("hy 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("hy 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("hy 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("hy 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("hy 1$s %d", i));
		assert(!faker.addressState().empty, format("hy 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("hy 1$s %d", i));
		assert(!faker.addressStreet().empty, format("hy 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("hy 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("hy 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("hy 1$s %d", i));
		assert(!faker.animalBear().empty, format("hy 1$s %d", i));
		assert(!faker.animalBird().empty, format("hy 1$s %d", i));
		assert(!faker.animalCat().empty, format("hy 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("hy 1$s %d", i));
		assert(!faker.animalCow().empty, format("hy 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("hy 1$s %d", i));
		assert(!faker.animalDog().empty, format("hy 1$s %d", i));
		assert(!faker.animalFish().empty, format("hy 1$s %d", i));
		assert(!faker.animalHorse().empty, format("hy 1$s %d", i));
		assert(!faker.animalInsect().empty, format("hy 1$s %d", i));
		assert(!faker.animalLion().empty, format("hy 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("hy 1$s %d", i));
		assert(!faker.animalRodent().empty, format("hy 1$s %d", i));
		assert(!faker.animalSnake().empty, format("hy 1$s %d", i));
		assert(!faker.animalType().empty, format("hy 1$s %d", i));
		assert(!faker.appAuthor().empty, format("hy 1$s %d", i));
		assert(!faker.appName().empty, format("hy 1$s %d", i));
		assert(!faker.appVersion().empty, format("hy 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("hy 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("hy 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("hy 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("hy 1$s %d", i));
		assert(!faker.colorHuman().empty, format("hy 1$s %d", i));
		assert(!faker.colorSpace().empty, format("hy 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("hy 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("hy 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("hy 1$s %d", i));
		assert(!faker.companyBs().empty, format("hy 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("hy 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("hy 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("hy 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("hy 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("hy 1$s %d", i));
		assert(!faker.companyName().empty, format("hy 1$s %d", i));
		assert(!faker.companyNoun().empty, format("hy 1$s %d", i));
		assert(!faker.companySuffix().empty, format("hy 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("hy 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("hy 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("hy 1$s %d", i));
		assert(!faker.databaseType().empty, format("hy 1$s %d", i));
		assert(!faker.dateMonth().empty, format("hy 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("hy 1$s %d", i));
		assert(!faker.financeAccount().empty, format("hy 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("hy 1$s %d", i));
		assert(!faker.financeBIC().empty, format("hy 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("hy 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("hy 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("hy 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("hy 1$s %d", i));
		assert(!faker.financeMask().empty, format("hy 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("hy 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("hy 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("hy 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("hy 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("hy 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("hy 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("hy 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("hy 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("hy 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("hy 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("hy 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("hy 1$s %d", i));
		assert(!faker.internetColor().empty, format("hy 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("hy 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("hy 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("hy 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("hy 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("hy 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("hy 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("hy 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("hy 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("hy 1$s %d", i));
		assert(!faker.internetPassword().empty, format("hy 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("hy 1$s %d", i));
		assert(!faker.internetUrl().empty, format("hy 1$s %d", i));
		assert(!faker.internetUserName().empty, format("hy 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("hy 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("hy 1$s %d", i));
		assert(!faker.loremSentance().empty, format("hy 1$s %d", i));
		assert(!faker.loremSentances().empty, format("hy 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("hy 1$s %d", i));
		assert(!faker.loremText().empty, format("hy 1$s %d", i));
		assert(!faker.loremWords().empty, format("hy 1$s %d", i));
		assert(!faker.musicGenre().empty, format("hy 1$s %d", i));
		assert(!faker.musicSongName().empty, format("hy 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("hy 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("hy 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("hy 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("hy 1$s %d", i));
		assert(!faker.nameGender().empty, format("hy 1$s %d", i));
		assert(!faker.nameLastName().empty, format("hy 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("hy 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("hy 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("hy 1$s %d", i));
		assert(!faker.nameName().empty, format("hy 1$s %d", i));
		assert(!faker.namePrefix().empty, format("hy 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("hy 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("hy 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("hy 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("hy 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("hy 1$s %d", i));
		assert(!faker.teamCreature().empty, format("hy 1$s %d", i));
		assert(!faker.teamName().empty, format("hy 1$s %d", i));
		assert(!faker.vehicle().empty, format("hy 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("hy 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("hy 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("hy 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("hy 1$s %d", i));
		assert(!faker.vehicleType().empty, format("hy 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("hy 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("hy 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("hy 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("hy 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("hy 1$s %d", i));
		assert(!faker.wordNoun().empty, format("hy 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("hy 1$s %d", i));
		assert(!faker.wordVerb().empty, format("hy 1$s %d", i));

	}
}

unittest {
	import faked.faker_id_id;
    auto faker = new Faker_id_id(31);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCity().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCityName().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCountry().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("id_id 1$s %d", i));
		assert(!faker.addressCounty().empty, format("id_id 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("id_id 1$s %d", i));
		assert(!faker.addressDirection().empty, format("id_id 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("id_id 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("id_id 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("id_id 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("id_id 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("id_id 1$s %d", i));
		assert(!faker.addressState().empty, format("id_id 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("id_id 1$s %d", i));
		assert(!faker.addressStreet().empty, format("id_id 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("id_id 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("id_id 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("id_id 1$s %d", i));
		assert(!faker.animalBear().empty, format("id_id 1$s %d", i));
		assert(!faker.animalBird().empty, format("id_id 1$s %d", i));
		assert(!faker.animalCat().empty, format("id_id 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("id_id 1$s %d", i));
		assert(!faker.animalCow().empty, format("id_id 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("id_id 1$s %d", i));
		assert(!faker.animalDog().empty, format("id_id 1$s %d", i));
		assert(!faker.animalFish().empty, format("id_id 1$s %d", i));
		assert(!faker.animalHorse().empty, format("id_id 1$s %d", i));
		assert(!faker.animalInsect().empty, format("id_id 1$s %d", i));
		assert(!faker.animalLion().empty, format("id_id 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("id_id 1$s %d", i));
		assert(!faker.animalRodent().empty, format("id_id 1$s %d", i));
		assert(!faker.animalSnake().empty, format("id_id 1$s %d", i));
		assert(!faker.animalType().empty, format("id_id 1$s %d", i));
		assert(!faker.appAuthor().empty, format("id_id 1$s %d", i));
		assert(!faker.appName().empty, format("id_id 1$s %d", i));
		assert(!faker.appVersion().empty, format("id_id 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("id_id 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("id_id 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("id_id 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("id_id 1$s %d", i));
		assert(!faker.colorHuman().empty, format("id_id 1$s %d", i));
		assert(!faker.colorSpace().empty, format("id_id 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("id_id 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("id_id 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("id_id 1$s %d", i));
		assert(!faker.companyBs().empty, format("id_id 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("id_id 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("id_id 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("id_id 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("id_id 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("id_id 1$s %d", i));
		assert(!faker.companyName().empty, format("id_id 1$s %d", i));
		assert(!faker.companyNoun().empty, format("id_id 1$s %d", i));
		assert(!faker.companySuffix().empty, format("id_id 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("id_id 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("id_id 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("id_id 1$s %d", i));
		assert(!faker.databaseType().empty, format("id_id 1$s %d", i));
		assert(!faker.dateMonth().empty, format("id_id 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("id_id 1$s %d", i));
		assert(!faker.financeAccount().empty, format("id_id 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("id_id 1$s %d", i));
		assert(!faker.financeBIC().empty, format("id_id 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("id_id 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("id_id 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("id_id 1$s %d", i));
		assert(!faker.financeMask().empty, format("id_id 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("id_id 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("id_id 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("id_id 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("id_id 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("id_id 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("id_id 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("id_id 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("id_id 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("id_id 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("id_id 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("id_id 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("id_id 1$s %d", i));
		assert(!faker.internetColor().empty, format("id_id 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("id_id 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("id_id 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("id_id 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("id_id 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("id_id 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("id_id 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("id_id 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("id_id 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("id_id 1$s %d", i));
		assert(!faker.internetPassword().empty, format("id_id 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("id_id 1$s %d", i));
		assert(!faker.internetUrl().empty, format("id_id 1$s %d", i));
		assert(!faker.internetUserName().empty, format("id_id 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("id_id 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("id_id 1$s %d", i));
		assert(!faker.loremSentance().empty, format("id_id 1$s %d", i));
		assert(!faker.loremSentances().empty, format("id_id 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("id_id 1$s %d", i));
		assert(!faker.loremText().empty, format("id_id 1$s %d", i));
		assert(!faker.loremWords().empty, format("id_id 1$s %d", i));
		assert(!faker.musicGenre().empty, format("id_id 1$s %d", i));
		assert(!faker.musicSongName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("id_id 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameGender().empty, format("id_id 1$s %d", i));
		assert(!faker.nameLastName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("id_id 1$s %d", i));
		assert(!faker.nameName().empty, format("id_id 1$s %d", i));
		assert(!faker.namePrefix().empty, format("id_id 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("id_id 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("id_id 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("id_id 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("id_id 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("id_id 1$s %d", i));
		assert(!faker.teamCreature().empty, format("id_id 1$s %d", i));
		assert(!faker.teamName().empty, format("id_id 1$s %d", i));
		assert(!faker.vehicle().empty, format("id_id 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("id_id 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("id_id 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("id_id 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("id_id 1$s %d", i));
		assert(!faker.vehicleType().empty, format("id_id 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("id_id 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("id_id 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("id_id 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("id_id 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("id_id 1$s %d", i));
		assert(!faker.wordNoun().empty, format("id_id 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("id_id 1$s %d", i));
		assert(!faker.wordVerb().empty, format("id_id 1$s %d", i));

	}
}

unittest {
	import faked.faker_it;
    auto faker = new Faker_it(32);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("it 1$s %d", i));
		assert(!faker.addressCity().empty, format("it 1$s %d", i));
		assert(!faker.addressCityName().empty, format("it 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("it 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("it 1$s %d", i));
		assert(!faker.addressCountry().empty, format("it 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("it 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("it 1$s %d", i));
		assert(!faker.addressCounty().empty, format("it 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("it 1$s %d", i));
		assert(!faker.addressDirection().empty, format("it 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("it 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("it 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("it 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("it 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("it 1$s %d", i));
		assert(!faker.addressState().empty, format("it 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("it 1$s %d", i));
		assert(!faker.addressStreet().empty, format("it 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("it 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("it 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("it 1$s %d", i));
		assert(!faker.animalBear().empty, format("it 1$s %d", i));
		assert(!faker.animalBird().empty, format("it 1$s %d", i));
		assert(!faker.animalCat().empty, format("it 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("it 1$s %d", i));
		assert(!faker.animalCow().empty, format("it 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("it 1$s %d", i));
		assert(!faker.animalDog().empty, format("it 1$s %d", i));
		assert(!faker.animalFish().empty, format("it 1$s %d", i));
		assert(!faker.animalHorse().empty, format("it 1$s %d", i));
		assert(!faker.animalInsect().empty, format("it 1$s %d", i));
		assert(!faker.animalLion().empty, format("it 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("it 1$s %d", i));
		assert(!faker.animalRodent().empty, format("it 1$s %d", i));
		assert(!faker.animalSnake().empty, format("it 1$s %d", i));
		assert(!faker.animalType().empty, format("it 1$s %d", i));
		assert(!faker.appAuthor().empty, format("it 1$s %d", i));
		assert(!faker.appName().empty, format("it 1$s %d", i));
		assert(!faker.appVersion().empty, format("it 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("it 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("it 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("it 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("it 1$s %d", i));
		assert(!faker.colorHuman().empty, format("it 1$s %d", i));
		assert(!faker.colorSpace().empty, format("it 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("it 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("it 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("it 1$s %d", i));
		assert(!faker.companyBs().empty, format("it 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("it 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("it 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("it 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("it 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("it 1$s %d", i));
		assert(!faker.companyName().empty, format("it 1$s %d", i));
		assert(!faker.companyNoun().empty, format("it 1$s %d", i));
		assert(!faker.companySuffix().empty, format("it 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("it 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("it 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("it 1$s %d", i));
		assert(!faker.databaseType().empty, format("it 1$s %d", i));
		assert(!faker.dateMonth().empty, format("it 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("it 1$s %d", i));
		assert(!faker.financeAccount().empty, format("it 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("it 1$s %d", i));
		assert(!faker.financeBIC().empty, format("it 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("it 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("it 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("it 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("it 1$s %d", i));
		assert(!faker.financeMask().empty, format("it 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("it 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("it 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("it 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("it 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("it 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("it 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("it 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("it 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("it 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("it 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("it 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("it 1$s %d", i));
		assert(!faker.internetColor().empty, format("it 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("it 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("it 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("it 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("it 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("it 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("it 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("it 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("it 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("it 1$s %d", i));
		assert(!faker.internetPassword().empty, format("it 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("it 1$s %d", i));
		assert(!faker.internetUrl().empty, format("it 1$s %d", i));
		assert(!faker.internetUserName().empty, format("it 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("it 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("it 1$s %d", i));
		assert(!faker.loremSentance().empty, format("it 1$s %d", i));
		assert(!faker.loremSentances().empty, format("it 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("it 1$s %d", i));
		assert(!faker.loremText().empty, format("it 1$s %d", i));
		assert(!faker.loremWords().empty, format("it 1$s %d", i));
		assert(!faker.musicGenre().empty, format("it 1$s %d", i));
		assert(!faker.musicSongName().empty, format("it 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("it 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("it 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("it 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("it 1$s %d", i));
		assert(!faker.nameGender().empty, format("it 1$s %d", i));
		assert(!faker.nameLastName().empty, format("it 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("it 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("it 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("it 1$s %d", i));
		assert(!faker.nameName().empty, format("it 1$s %d", i));
		assert(!faker.namePrefix().empty, format("it 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("it 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("it 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("it 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("it 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("it 1$s %d", i));
		assert(!faker.teamCreature().empty, format("it 1$s %d", i));
		assert(!faker.teamName().empty, format("it 1$s %d", i));
		assert(!faker.vehicle().empty, format("it 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("it 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("it 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("it 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("it 1$s %d", i));
		assert(!faker.vehicleType().empty, format("it 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("it 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("it 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("it 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("it 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("it 1$s %d", i));
		assert(!faker.wordNoun().empty, format("it 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("it 1$s %d", i));
		assert(!faker.wordVerb().empty, format("it 1$s %d", i));

	}
}

unittest {
	import faked.faker_ja;
    auto faker = new Faker_ja(33);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("ja 1$s %d", i));
		assert(!faker.addressCity().empty, format("ja 1$s %d", i));
		assert(!faker.addressCityName().empty, format("ja 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("ja 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("ja 1$s %d", i));
		assert(!faker.addressCountry().empty, format("ja 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("ja 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("ja 1$s %d", i));
		assert(!faker.addressCounty().empty, format("ja 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("ja 1$s %d", i));
		assert(!faker.addressDirection().empty, format("ja 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("ja 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("ja 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("ja 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("ja 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("ja 1$s %d", i));
		assert(!faker.addressState().empty, format("ja 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("ja 1$s %d", i));
		assert(!faker.addressStreet().empty, format("ja 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("ja 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("ja 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("ja 1$s %d", i));
		assert(!faker.animalBear().empty, format("ja 1$s %d", i));
		assert(!faker.animalBird().empty, format("ja 1$s %d", i));
		assert(!faker.animalCat().empty, format("ja 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("ja 1$s %d", i));
		assert(!faker.animalCow().empty, format("ja 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("ja 1$s %d", i));
		assert(!faker.animalDog().empty, format("ja 1$s %d", i));
		assert(!faker.animalFish().empty, format("ja 1$s %d", i));
		assert(!faker.animalHorse().empty, format("ja 1$s %d", i));
		assert(!faker.animalInsect().empty, format("ja 1$s %d", i));
		assert(!faker.animalLion().empty, format("ja 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("ja 1$s %d", i));
		assert(!faker.animalRodent().empty, format("ja 1$s %d", i));
		assert(!faker.animalSnake().empty, format("ja 1$s %d", i));
		assert(!faker.animalType().empty, format("ja 1$s %d", i));
		assert(!faker.appAuthor().empty, format("ja 1$s %d", i));
		assert(!faker.appName().empty, format("ja 1$s %d", i));
		assert(!faker.appVersion().empty, format("ja 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("ja 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("ja 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("ja 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("ja 1$s %d", i));
		assert(!faker.colorHuman().empty, format("ja 1$s %d", i));
		assert(!faker.colorSpace().empty, format("ja 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("ja 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("ja 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("ja 1$s %d", i));
		assert(!faker.companyBs().empty, format("ja 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("ja 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("ja 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("ja 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("ja 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("ja 1$s %d", i));
		assert(!faker.companyName().empty, format("ja 1$s %d", i));
		assert(!faker.companyNoun().empty, format("ja 1$s %d", i));
		assert(!faker.companySuffix().empty, format("ja 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("ja 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("ja 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("ja 1$s %d", i));
		assert(!faker.databaseType().empty, format("ja 1$s %d", i));
		assert(!faker.dateMonth().empty, format("ja 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("ja 1$s %d", i));
		assert(!faker.financeAccount().empty, format("ja 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("ja 1$s %d", i));
		assert(!faker.financeBIC().empty, format("ja 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("ja 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("ja 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("ja 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("ja 1$s %d", i));
		assert(!faker.financeMask().empty, format("ja 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("ja 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("ja 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("ja 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("ja 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("ja 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("ja 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("ja 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("ja 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("ja 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("ja 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("ja 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("ja 1$s %d", i));
		assert(!faker.internetColor().empty, format("ja 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("ja 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("ja 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("ja 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("ja 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("ja 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("ja 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("ja 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("ja 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("ja 1$s %d", i));
		assert(!faker.internetPassword().empty, format("ja 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("ja 1$s %d", i));
		assert(!faker.internetUrl().empty, format("ja 1$s %d", i));
		assert(!faker.internetUserName().empty, format("ja 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("ja 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("ja 1$s %d", i));
		assert(!faker.loremSentance().empty, format("ja 1$s %d", i));
		assert(!faker.loremSentances().empty, format("ja 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("ja 1$s %d", i));
		assert(!faker.loremText().empty, format("ja 1$s %d", i));
		assert(!faker.loremWords().empty, format("ja 1$s %d", i));
		assert(!faker.musicGenre().empty, format("ja 1$s %d", i));
		assert(!faker.musicSongName().empty, format("ja 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("ja 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("ja 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("ja 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("ja 1$s %d", i));
		assert(!faker.nameGender().empty, format("ja 1$s %d", i));
		assert(!faker.nameLastName().empty, format("ja 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("ja 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("ja 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("ja 1$s %d", i));
		assert(!faker.nameName().empty, format("ja 1$s %d", i));
		assert(!faker.namePrefix().empty, format("ja 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("ja 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("ja 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("ja 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("ja 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("ja 1$s %d", i));
		assert(!faker.teamCreature().empty, format("ja 1$s %d", i));
		assert(!faker.teamName().empty, format("ja 1$s %d", i));
		assert(!faker.vehicle().empty, format("ja 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("ja 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("ja 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("ja 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("ja 1$s %d", i));
		assert(!faker.vehicleType().empty, format("ja 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("ja 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("ja 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("ja 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("ja 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("ja 1$s %d", i));
		assert(!faker.wordNoun().empty, format("ja 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("ja 1$s %d", i));
		assert(!faker.wordVerb().empty, format("ja 1$s %d", i));

	}
}

unittest {
	import faked.faker_ko;
    auto faker = new Faker_ko(34);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("ko 1$s %d", i));
		assert(!faker.addressCity().empty, format("ko 1$s %d", i));
		assert(!faker.addressCityName().empty, format("ko 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("ko 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("ko 1$s %d", i));
		assert(!faker.addressCountry().empty, format("ko 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("ko 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("ko 1$s %d", i));
		assert(!faker.addressCounty().empty, format("ko 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("ko 1$s %d", i));
		assert(!faker.addressDirection().empty, format("ko 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("ko 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("ko 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("ko 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("ko 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("ko 1$s %d", i));
		assert(!faker.addressState().empty, format("ko 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("ko 1$s %d", i));
		assert(!faker.addressStreet().empty, format("ko 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("ko 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("ko 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("ko 1$s %d", i));
		assert(!faker.animalBear().empty, format("ko 1$s %d", i));
		assert(!faker.animalBird().empty, format("ko 1$s %d", i));
		assert(!faker.animalCat().empty, format("ko 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("ko 1$s %d", i));
		assert(!faker.animalCow().empty, format("ko 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("ko 1$s %d", i));
		assert(!faker.animalDog().empty, format("ko 1$s %d", i));
		assert(!faker.animalFish().empty, format("ko 1$s %d", i));
		assert(!faker.animalHorse().empty, format("ko 1$s %d", i));
		assert(!faker.animalInsect().empty, format("ko 1$s %d", i));
		assert(!faker.animalLion().empty, format("ko 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("ko 1$s %d", i));
		assert(!faker.animalRodent().empty, format("ko 1$s %d", i));
		assert(!faker.animalSnake().empty, format("ko 1$s %d", i));
		assert(!faker.animalType().empty, format("ko 1$s %d", i));
		assert(!faker.appAuthor().empty, format("ko 1$s %d", i));
		assert(!faker.appName().empty, format("ko 1$s %d", i));
		assert(!faker.appVersion().empty, format("ko 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("ko 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("ko 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("ko 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("ko 1$s %d", i));
		assert(!faker.colorHuman().empty, format("ko 1$s %d", i));
		assert(!faker.colorSpace().empty, format("ko 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("ko 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("ko 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("ko 1$s %d", i));
		assert(!faker.companyBs().empty, format("ko 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("ko 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("ko 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("ko 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("ko 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("ko 1$s %d", i));
		assert(!faker.companyName().empty, format("ko 1$s %d", i));
		assert(!faker.companyNoun().empty, format("ko 1$s %d", i));
		assert(!faker.companySuffix().empty, format("ko 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("ko 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("ko 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("ko 1$s %d", i));
		assert(!faker.databaseType().empty, format("ko 1$s %d", i));
		assert(!faker.dateMonth().empty, format("ko 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("ko 1$s %d", i));
		assert(!faker.financeAccount().empty, format("ko 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("ko 1$s %d", i));
		assert(!faker.financeBIC().empty, format("ko 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("ko 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("ko 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("ko 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("ko 1$s %d", i));
		assert(!faker.financeMask().empty, format("ko 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("ko 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("ko 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("ko 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("ko 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("ko 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("ko 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("ko 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("ko 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("ko 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("ko 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("ko 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("ko 1$s %d", i));
		assert(!faker.internetColor().empty, format("ko 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("ko 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("ko 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("ko 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("ko 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("ko 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("ko 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("ko 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("ko 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("ko 1$s %d", i));
		assert(!faker.internetPassword().empty, format("ko 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("ko 1$s %d", i));
		assert(!faker.internetUrl().empty, format("ko 1$s %d", i));
		assert(!faker.internetUserName().empty, format("ko 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("ko 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("ko 1$s %d", i));
		assert(!faker.loremSentance().empty, format("ko 1$s %d", i));
		assert(!faker.loremSentances().empty, format("ko 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("ko 1$s %d", i));
		assert(!faker.loremText().empty, format("ko 1$s %d", i));
		assert(!faker.loremWords().empty, format("ko 1$s %d", i));
		assert(!faker.musicGenre().empty, format("ko 1$s %d", i));
		assert(!faker.musicSongName().empty, format("ko 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("ko 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("ko 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("ko 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("ko 1$s %d", i));
		assert(!faker.nameGender().empty, format("ko 1$s %d", i));
		assert(!faker.nameLastName().empty, format("ko 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("ko 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("ko 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("ko 1$s %d", i));
		assert(!faker.nameName().empty, format("ko 1$s %d", i));
		assert(!faker.namePrefix().empty, format("ko 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("ko 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("ko 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("ko 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("ko 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("ko 1$s %d", i));
		assert(!faker.teamCreature().empty, format("ko 1$s %d", i));
		assert(!faker.teamName().empty, format("ko 1$s %d", i));
		assert(!faker.vehicle().empty, format("ko 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("ko 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("ko 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("ko 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("ko 1$s %d", i));
		assert(!faker.vehicleType().empty, format("ko 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("ko 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("ko 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("ko 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("ko 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("ko 1$s %d", i));
		assert(!faker.wordNoun().empty, format("ko 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("ko 1$s %d", i));
		assert(!faker.wordVerb().empty, format("ko 1$s %d", i));

	}
}

unittest {
	import faked.faker_lv;
    auto faker = new Faker_lv(35);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("lv 1$s %d", i));
		assert(!faker.addressCity().empty, format("lv 1$s %d", i));
		assert(!faker.addressCityName().empty, format("lv 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("lv 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("lv 1$s %d", i));
		assert(!faker.addressCountry().empty, format("lv 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("lv 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("lv 1$s %d", i));
		assert(!faker.addressCounty().empty, format("lv 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("lv 1$s %d", i));
		assert(!faker.addressDirection().empty, format("lv 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("lv 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("lv 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("lv 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("lv 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("lv 1$s %d", i));
		assert(!faker.addressState().empty, format("lv 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("lv 1$s %d", i));
		assert(!faker.addressStreet().empty, format("lv 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("lv 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("lv 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("lv 1$s %d", i));
		assert(!faker.animalBear().empty, format("lv 1$s %d", i));
		assert(!faker.animalBird().empty, format("lv 1$s %d", i));
		assert(!faker.animalCat().empty, format("lv 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("lv 1$s %d", i));
		assert(!faker.animalCow().empty, format("lv 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("lv 1$s %d", i));
		assert(!faker.animalDog().empty, format("lv 1$s %d", i));
		assert(!faker.animalFish().empty, format("lv 1$s %d", i));
		assert(!faker.animalHorse().empty, format("lv 1$s %d", i));
		assert(!faker.animalInsect().empty, format("lv 1$s %d", i));
		assert(!faker.animalLion().empty, format("lv 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("lv 1$s %d", i));
		assert(!faker.animalRodent().empty, format("lv 1$s %d", i));
		assert(!faker.animalSnake().empty, format("lv 1$s %d", i));
		assert(!faker.animalType().empty, format("lv 1$s %d", i));
		assert(!faker.appAuthor().empty, format("lv 1$s %d", i));
		assert(!faker.appName().empty, format("lv 1$s %d", i));
		assert(!faker.appVersion().empty, format("lv 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("lv 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("lv 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("lv 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("lv 1$s %d", i));
		assert(!faker.colorHuman().empty, format("lv 1$s %d", i));
		assert(!faker.colorSpace().empty, format("lv 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("lv 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("lv 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("lv 1$s %d", i));
		assert(!faker.companyBs().empty, format("lv 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("lv 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("lv 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("lv 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("lv 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("lv 1$s %d", i));
		assert(!faker.companyName().empty, format("lv 1$s %d", i));
		assert(!faker.companyNoun().empty, format("lv 1$s %d", i));
		assert(!faker.companySuffix().empty, format("lv 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("lv 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("lv 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("lv 1$s %d", i));
		assert(!faker.databaseType().empty, format("lv 1$s %d", i));
		assert(!faker.dateMonth().empty, format("lv 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("lv 1$s %d", i));
		assert(!faker.financeAccount().empty, format("lv 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("lv 1$s %d", i));
		assert(!faker.financeBIC().empty, format("lv 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("lv 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("lv 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("lv 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("lv 1$s %d", i));
		assert(!faker.financeMask().empty, format("lv 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("lv 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("lv 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("lv 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("lv 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("lv 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("lv 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("lv 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("lv 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("lv 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("lv 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("lv 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("lv 1$s %d", i));
		assert(!faker.internetColor().empty, format("lv 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("lv 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("lv 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("lv 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("lv 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("lv 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("lv 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("lv 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("lv 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("lv 1$s %d", i));
		assert(!faker.internetPassword().empty, format("lv 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("lv 1$s %d", i));
		assert(!faker.internetUrl().empty, format("lv 1$s %d", i));
		assert(!faker.internetUserName().empty, format("lv 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("lv 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("lv 1$s %d", i));
		assert(!faker.loremSentance().empty, format("lv 1$s %d", i));
		assert(!faker.loremSentances().empty, format("lv 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("lv 1$s %d", i));
		assert(!faker.loremText().empty, format("lv 1$s %d", i));
		assert(!faker.loremWords().empty, format("lv 1$s %d", i));
		assert(!faker.musicGenre().empty, format("lv 1$s %d", i));
		assert(!faker.musicSongName().empty, format("lv 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("lv 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("lv 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("lv 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("lv 1$s %d", i));
		assert(!faker.nameGender().empty, format("lv 1$s %d", i));
		assert(!faker.nameLastName().empty, format("lv 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("lv 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("lv 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("lv 1$s %d", i));
		assert(!faker.nameName().empty, format("lv 1$s %d", i));
		assert(!faker.namePrefix().empty, format("lv 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("lv 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("lv 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("lv 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("lv 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("lv 1$s %d", i));
		assert(!faker.teamCreature().empty, format("lv 1$s %d", i));
		assert(!faker.teamName().empty, format("lv 1$s %d", i));
		assert(!faker.vehicle().empty, format("lv 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("lv 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("lv 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("lv 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("lv 1$s %d", i));
		assert(!faker.vehicleType().empty, format("lv 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("lv 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("lv 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("lv 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("lv 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("lv 1$s %d", i));
		assert(!faker.wordNoun().empty, format("lv 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("lv 1$s %d", i));
		assert(!faker.wordVerb().empty, format("lv 1$s %d", i));

	}
}

unittest {
	import faked.faker_mk;
    auto faker = new Faker_mk(36);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("mk 1$s %d", i));
		assert(!faker.addressCity().empty, format("mk 1$s %d", i));
		assert(!faker.addressCityName().empty, format("mk 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("mk 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("mk 1$s %d", i));
		assert(!faker.addressCountry().empty, format("mk 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("mk 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("mk 1$s %d", i));
		assert(!faker.addressCounty().empty, format("mk 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("mk 1$s %d", i));
		assert(!faker.addressDirection().empty, format("mk 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("mk 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("mk 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("mk 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("mk 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("mk 1$s %d", i));
		assert(!faker.addressState().empty, format("mk 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("mk 1$s %d", i));
		assert(!faker.addressStreet().empty, format("mk 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("mk 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("mk 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("mk 1$s %d", i));
		assert(!faker.animalBear().empty, format("mk 1$s %d", i));
		assert(!faker.animalBird().empty, format("mk 1$s %d", i));
		assert(!faker.animalCat().empty, format("mk 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("mk 1$s %d", i));
		assert(!faker.animalCow().empty, format("mk 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("mk 1$s %d", i));
		assert(!faker.animalDog().empty, format("mk 1$s %d", i));
		assert(!faker.animalFish().empty, format("mk 1$s %d", i));
		assert(!faker.animalHorse().empty, format("mk 1$s %d", i));
		assert(!faker.animalInsect().empty, format("mk 1$s %d", i));
		assert(!faker.animalLion().empty, format("mk 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("mk 1$s %d", i));
		assert(!faker.animalRodent().empty, format("mk 1$s %d", i));
		assert(!faker.animalSnake().empty, format("mk 1$s %d", i));
		assert(!faker.animalType().empty, format("mk 1$s %d", i));
		assert(!faker.appAuthor().empty, format("mk 1$s %d", i));
		assert(!faker.appName().empty, format("mk 1$s %d", i));
		assert(!faker.appVersion().empty, format("mk 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("mk 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("mk 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("mk 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("mk 1$s %d", i));
		assert(!faker.colorHuman().empty, format("mk 1$s %d", i));
		assert(!faker.colorSpace().empty, format("mk 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("mk 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("mk 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("mk 1$s %d", i));
		assert(!faker.companyBs().empty, format("mk 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("mk 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("mk 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("mk 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("mk 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("mk 1$s %d", i));
		assert(!faker.companyName().empty, format("mk 1$s %d", i));
		assert(!faker.companyNoun().empty, format("mk 1$s %d", i));
		assert(!faker.companySuffix().empty, format("mk 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("mk 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("mk 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("mk 1$s %d", i));
		assert(!faker.databaseType().empty, format("mk 1$s %d", i));
		assert(!faker.dateMonth().empty, format("mk 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("mk 1$s %d", i));
		assert(!faker.financeAccount().empty, format("mk 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("mk 1$s %d", i));
		assert(!faker.financeBIC().empty, format("mk 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("mk 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("mk 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("mk 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("mk 1$s %d", i));
		assert(!faker.financeMask().empty, format("mk 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("mk 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("mk 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("mk 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("mk 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("mk 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("mk 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("mk 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("mk 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("mk 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("mk 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("mk 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("mk 1$s %d", i));
		assert(!faker.internetColor().empty, format("mk 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("mk 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("mk 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("mk 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("mk 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("mk 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("mk 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("mk 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("mk 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("mk 1$s %d", i));
		assert(!faker.internetPassword().empty, format("mk 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("mk 1$s %d", i));
		assert(!faker.internetUrl().empty, format("mk 1$s %d", i));
		assert(!faker.internetUserName().empty, format("mk 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("mk 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("mk 1$s %d", i));
		assert(!faker.loremSentance().empty, format("mk 1$s %d", i));
		assert(!faker.loremSentances().empty, format("mk 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("mk 1$s %d", i));
		assert(!faker.loremText().empty, format("mk 1$s %d", i));
		assert(!faker.loremWords().empty, format("mk 1$s %d", i));
		assert(!faker.musicGenre().empty, format("mk 1$s %d", i));
		assert(!faker.musicSongName().empty, format("mk 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("mk 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("mk 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("mk 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("mk 1$s %d", i));
		assert(!faker.nameGender().empty, format("mk 1$s %d", i));
		assert(!faker.nameLastName().empty, format("mk 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("mk 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("mk 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("mk 1$s %d", i));
		assert(!faker.nameName().empty, format("mk 1$s %d", i));
		assert(!faker.namePrefix().empty, format("mk 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("mk 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("mk 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("mk 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("mk 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("mk 1$s %d", i));
		assert(!faker.teamCreature().empty, format("mk 1$s %d", i));
		assert(!faker.teamName().empty, format("mk 1$s %d", i));
		assert(!faker.vehicle().empty, format("mk 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("mk 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("mk 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("mk 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("mk 1$s %d", i));
		assert(!faker.vehicleType().empty, format("mk 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("mk 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("mk 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("mk 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("mk 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("mk 1$s %d", i));
		assert(!faker.wordNoun().empty, format("mk 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("mk 1$s %d", i));
		assert(!faker.wordVerb().empty, format("mk 1$s %d", i));

	}
}

unittest {
	import faked.faker_nb_no;
    auto faker = new Faker_nb_no(37);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCity().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCityName().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCountry().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressCounty().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressDirection().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressState().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressStreet().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("nb_no 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalBear().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalBird().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalCat().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalCow().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalDog().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalFish().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalHorse().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalInsect().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalLion().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalRodent().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalSnake().empty, format("nb_no 1$s %d", i));
		assert(!faker.animalType().empty, format("nb_no 1$s %d", i));
		assert(!faker.appAuthor().empty, format("nb_no 1$s %d", i));
		assert(!faker.appName().empty, format("nb_no 1$s %d", i));
		assert(!faker.appVersion().empty, format("nb_no 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("nb_no 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("nb_no 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("nb_no 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("nb_no 1$s %d", i));
		assert(!faker.colorHuman().empty, format("nb_no 1$s %d", i));
		assert(!faker.colorSpace().empty, format("nb_no 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("nb_no 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyBs().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyName().empty, format("nb_no 1$s %d", i));
		assert(!faker.companyNoun().empty, format("nb_no 1$s %d", i));
		assert(!faker.companySuffix().empty, format("nb_no 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("nb_no 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("nb_no 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("nb_no 1$s %d", i));
		assert(!faker.databaseType().empty, format("nb_no 1$s %d", i));
		assert(!faker.dateMonth().empty, format("nb_no 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeAccount().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeBIC().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeMask().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("nb_no 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("nb_no 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("nb_no 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("nb_no 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("nb_no 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("nb_no 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("nb_no 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("nb_no 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("nb_no 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("nb_no 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetColor().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetPassword().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetUrl().empty, format("nb_no 1$s %d", i));
		assert(!faker.internetUserName().empty, format("nb_no 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("nb_no 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("nb_no 1$s %d", i));
		assert(!faker.loremSentance().empty, format("nb_no 1$s %d", i));
		assert(!faker.loremSentances().empty, format("nb_no 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("nb_no 1$s %d", i));
		assert(!faker.loremText().empty, format("nb_no 1$s %d", i));
		assert(!faker.loremWords().empty, format("nb_no 1$s %d", i));
		assert(!faker.musicGenre().empty, format("nb_no 1$s %d", i));
		assert(!faker.musicSongName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameGender().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameLastName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameName().empty, format("nb_no 1$s %d", i));
		assert(!faker.namePrefix().empty, format("nb_no 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("nb_no 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("nb_no 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("nb_no 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("nb_no 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("nb_no 1$s %d", i));
		assert(!faker.teamCreature().empty, format("nb_no 1$s %d", i));
		assert(!faker.teamName().empty, format("nb_no 1$s %d", i));
		assert(!faker.vehicle().empty, format("nb_no 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("nb_no 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("nb_no 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("nb_no 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("nb_no 1$s %d", i));
		assert(!faker.vehicleType().empty, format("nb_no 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("nb_no 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("nb_no 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("nb_no 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("nb_no 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("nb_no 1$s %d", i));
		assert(!faker.wordNoun().empty, format("nb_no 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("nb_no 1$s %d", i));
		assert(!faker.wordVerb().empty, format("nb_no 1$s %d", i));

	}
}

unittest {
	import faked.faker_ne;
    auto faker = new Faker_ne(38);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("ne 1$s %d", i));
		assert(!faker.addressCity().empty, format("ne 1$s %d", i));
		assert(!faker.addressCityName().empty, format("ne 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("ne 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("ne 1$s %d", i));
		assert(!faker.addressCountry().empty, format("ne 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("ne 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("ne 1$s %d", i));
		assert(!faker.addressCounty().empty, format("ne 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("ne 1$s %d", i));
		assert(!faker.addressDirection().empty, format("ne 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("ne 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("ne 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("ne 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("ne 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("ne 1$s %d", i));
		assert(!faker.addressState().empty, format("ne 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("ne 1$s %d", i));
		assert(!faker.addressStreet().empty, format("ne 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("ne 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("ne 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("ne 1$s %d", i));
		assert(!faker.animalBear().empty, format("ne 1$s %d", i));
		assert(!faker.animalBird().empty, format("ne 1$s %d", i));
		assert(!faker.animalCat().empty, format("ne 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("ne 1$s %d", i));
		assert(!faker.animalCow().empty, format("ne 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("ne 1$s %d", i));
		assert(!faker.animalDog().empty, format("ne 1$s %d", i));
		assert(!faker.animalFish().empty, format("ne 1$s %d", i));
		assert(!faker.animalHorse().empty, format("ne 1$s %d", i));
		assert(!faker.animalInsect().empty, format("ne 1$s %d", i));
		assert(!faker.animalLion().empty, format("ne 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("ne 1$s %d", i));
		assert(!faker.animalRodent().empty, format("ne 1$s %d", i));
		assert(!faker.animalSnake().empty, format("ne 1$s %d", i));
		assert(!faker.animalType().empty, format("ne 1$s %d", i));
		assert(!faker.appAuthor().empty, format("ne 1$s %d", i));
		assert(!faker.appName().empty, format("ne 1$s %d", i));
		assert(!faker.appVersion().empty, format("ne 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("ne 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("ne 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("ne 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("ne 1$s %d", i));
		assert(!faker.colorHuman().empty, format("ne 1$s %d", i));
		assert(!faker.colorSpace().empty, format("ne 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("ne 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("ne 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("ne 1$s %d", i));
		assert(!faker.companyBs().empty, format("ne 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("ne 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("ne 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("ne 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("ne 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("ne 1$s %d", i));
		assert(!faker.companyName().empty, format("ne 1$s %d", i));
		assert(!faker.companyNoun().empty, format("ne 1$s %d", i));
		assert(!faker.companySuffix().empty, format("ne 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("ne 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("ne 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("ne 1$s %d", i));
		assert(!faker.databaseType().empty, format("ne 1$s %d", i));
		assert(!faker.dateMonth().empty, format("ne 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("ne 1$s %d", i));
		assert(!faker.financeAccount().empty, format("ne 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("ne 1$s %d", i));
		assert(!faker.financeBIC().empty, format("ne 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("ne 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("ne 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("ne 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("ne 1$s %d", i));
		assert(!faker.financeMask().empty, format("ne 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("ne 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("ne 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("ne 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("ne 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("ne 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("ne 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("ne 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("ne 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("ne 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("ne 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("ne 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("ne 1$s %d", i));
		assert(!faker.internetColor().empty, format("ne 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("ne 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("ne 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("ne 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("ne 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("ne 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("ne 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("ne 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("ne 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("ne 1$s %d", i));
		assert(!faker.internetPassword().empty, format("ne 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("ne 1$s %d", i));
		assert(!faker.internetUrl().empty, format("ne 1$s %d", i));
		assert(!faker.internetUserName().empty, format("ne 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("ne 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("ne 1$s %d", i));
		assert(!faker.loremSentance().empty, format("ne 1$s %d", i));
		assert(!faker.loremSentances().empty, format("ne 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("ne 1$s %d", i));
		assert(!faker.loremText().empty, format("ne 1$s %d", i));
		assert(!faker.loremWords().empty, format("ne 1$s %d", i));
		assert(!faker.musicGenre().empty, format("ne 1$s %d", i));
		assert(!faker.musicSongName().empty, format("ne 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("ne 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("ne 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("ne 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("ne 1$s %d", i));
		assert(!faker.nameGender().empty, format("ne 1$s %d", i));
		assert(!faker.nameLastName().empty, format("ne 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("ne 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("ne 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("ne 1$s %d", i));
		assert(!faker.nameName().empty, format("ne 1$s %d", i));
		assert(!faker.namePrefix().empty, format("ne 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("ne 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("ne 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("ne 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("ne 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("ne 1$s %d", i));
		assert(!faker.teamCreature().empty, format("ne 1$s %d", i));
		assert(!faker.teamName().empty, format("ne 1$s %d", i));
		assert(!faker.vehicle().empty, format("ne 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("ne 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("ne 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("ne 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("ne 1$s %d", i));
		assert(!faker.vehicleType().empty, format("ne 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("ne 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("ne 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("ne 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("ne 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("ne 1$s %d", i));
		assert(!faker.wordNoun().empty, format("ne 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("ne 1$s %d", i));
		assert(!faker.wordVerb().empty, format("ne 1$s %d", i));

	}
}

unittest {
	import faked.faker_nl;
    auto faker = new Faker_nl(39);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("nl 1$s %d", i));
		assert(!faker.addressCity().empty, format("nl 1$s %d", i));
		assert(!faker.addressCityName().empty, format("nl 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("nl 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("nl 1$s %d", i));
		assert(!faker.addressCountry().empty, format("nl 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("nl 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("nl 1$s %d", i));
		assert(!faker.addressCounty().empty, format("nl 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("nl 1$s %d", i));
		assert(!faker.addressDirection().empty, format("nl 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("nl 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("nl 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("nl 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("nl 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("nl 1$s %d", i));
		assert(!faker.addressState().empty, format("nl 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("nl 1$s %d", i));
		assert(!faker.addressStreet().empty, format("nl 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("nl 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("nl 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("nl 1$s %d", i));
		assert(!faker.animalBear().empty, format("nl 1$s %d", i));
		assert(!faker.animalBird().empty, format("nl 1$s %d", i));
		assert(!faker.animalCat().empty, format("nl 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("nl 1$s %d", i));
		assert(!faker.animalCow().empty, format("nl 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("nl 1$s %d", i));
		assert(!faker.animalDog().empty, format("nl 1$s %d", i));
		assert(!faker.animalFish().empty, format("nl 1$s %d", i));
		assert(!faker.animalHorse().empty, format("nl 1$s %d", i));
		assert(!faker.animalInsect().empty, format("nl 1$s %d", i));
		assert(!faker.animalLion().empty, format("nl 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("nl 1$s %d", i));
		assert(!faker.animalRodent().empty, format("nl 1$s %d", i));
		assert(!faker.animalSnake().empty, format("nl 1$s %d", i));
		assert(!faker.animalType().empty, format("nl 1$s %d", i));
		assert(!faker.appAuthor().empty, format("nl 1$s %d", i));
		assert(!faker.appName().empty, format("nl 1$s %d", i));
		assert(!faker.appVersion().empty, format("nl 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("nl 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("nl 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("nl 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("nl 1$s %d", i));
		assert(!faker.colorHuman().empty, format("nl 1$s %d", i));
		assert(!faker.colorSpace().empty, format("nl 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("nl 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("nl 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("nl 1$s %d", i));
		assert(!faker.companyBs().empty, format("nl 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("nl 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("nl 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("nl 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("nl 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("nl 1$s %d", i));
		assert(!faker.companyName().empty, format("nl 1$s %d", i));
		assert(!faker.companyNoun().empty, format("nl 1$s %d", i));
		assert(!faker.companySuffix().empty, format("nl 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("nl 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("nl 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("nl 1$s %d", i));
		assert(!faker.databaseType().empty, format("nl 1$s %d", i));
		assert(!faker.dateMonth().empty, format("nl 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("nl 1$s %d", i));
		assert(!faker.financeAccount().empty, format("nl 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("nl 1$s %d", i));
		assert(!faker.financeBIC().empty, format("nl 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("nl 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("nl 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("nl 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("nl 1$s %d", i));
		assert(!faker.financeMask().empty, format("nl 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("nl 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("nl 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("nl 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("nl 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("nl 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("nl 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("nl 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("nl 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("nl 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("nl 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("nl 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("nl 1$s %d", i));
		assert(!faker.internetColor().empty, format("nl 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("nl 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("nl 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("nl 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("nl 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("nl 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("nl 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("nl 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("nl 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("nl 1$s %d", i));
		assert(!faker.internetPassword().empty, format("nl 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("nl 1$s %d", i));
		assert(!faker.internetUrl().empty, format("nl 1$s %d", i));
		assert(!faker.internetUserName().empty, format("nl 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("nl 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("nl 1$s %d", i));
		assert(!faker.loremSentance().empty, format("nl 1$s %d", i));
		assert(!faker.loremSentances().empty, format("nl 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("nl 1$s %d", i));
		assert(!faker.loremText().empty, format("nl 1$s %d", i));
		assert(!faker.loremWords().empty, format("nl 1$s %d", i));
		assert(!faker.musicGenre().empty, format("nl 1$s %d", i));
		assert(!faker.musicSongName().empty, format("nl 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("nl 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("nl 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("nl 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("nl 1$s %d", i));
		assert(!faker.nameGender().empty, format("nl 1$s %d", i));
		assert(!faker.nameLastName().empty, format("nl 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("nl 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("nl 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("nl 1$s %d", i));
		assert(!faker.nameName().empty, format("nl 1$s %d", i));
		assert(!faker.namePrefix().empty, format("nl 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("nl 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("nl 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("nl 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("nl 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("nl 1$s %d", i));
		assert(!faker.teamCreature().empty, format("nl 1$s %d", i));
		assert(!faker.teamName().empty, format("nl 1$s %d", i));
		assert(!faker.vehicle().empty, format("nl 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("nl 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("nl 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("nl 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("nl 1$s %d", i));
		assert(!faker.vehicleType().empty, format("nl 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("nl 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("nl 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("nl 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("nl 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("nl 1$s %d", i));
		assert(!faker.wordNoun().empty, format("nl 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("nl 1$s %d", i));
		assert(!faker.wordVerb().empty, format("nl 1$s %d", i));

	}
}

unittest {
	import faked.faker_nl_be;
    auto faker = new Faker_nl_be(40);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCity().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCityName().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCountry().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressCounty().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressDirection().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressState().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressStreet().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("nl_be 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalBear().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalBird().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalCat().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalCow().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalDog().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalFish().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalHorse().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalInsect().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalLion().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalRodent().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalSnake().empty, format("nl_be 1$s %d", i));
		assert(!faker.animalType().empty, format("nl_be 1$s %d", i));
		assert(!faker.appAuthor().empty, format("nl_be 1$s %d", i));
		assert(!faker.appName().empty, format("nl_be 1$s %d", i));
		assert(!faker.appVersion().empty, format("nl_be 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("nl_be 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("nl_be 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("nl_be 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("nl_be 1$s %d", i));
		assert(!faker.colorHuman().empty, format("nl_be 1$s %d", i));
		assert(!faker.colorSpace().empty, format("nl_be 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("nl_be 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyBs().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyName().empty, format("nl_be 1$s %d", i));
		assert(!faker.companyNoun().empty, format("nl_be 1$s %d", i));
		assert(!faker.companySuffix().empty, format("nl_be 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("nl_be 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("nl_be 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("nl_be 1$s %d", i));
		assert(!faker.databaseType().empty, format("nl_be 1$s %d", i));
		assert(!faker.dateMonth().empty, format("nl_be 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeAccount().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeBIC().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeMask().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("nl_be 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("nl_be 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("nl_be 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("nl_be 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("nl_be 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("nl_be 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("nl_be 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("nl_be 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("nl_be 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("nl_be 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetColor().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetPassword().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetUrl().empty, format("nl_be 1$s %d", i));
		assert(!faker.internetUserName().empty, format("nl_be 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("nl_be 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("nl_be 1$s %d", i));
		assert(!faker.loremSentance().empty, format("nl_be 1$s %d", i));
		assert(!faker.loremSentances().empty, format("nl_be 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("nl_be 1$s %d", i));
		assert(!faker.loremText().empty, format("nl_be 1$s %d", i));
		assert(!faker.loremWords().empty, format("nl_be 1$s %d", i));
		assert(!faker.musicGenre().empty, format("nl_be 1$s %d", i));
		assert(!faker.musicSongName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameGender().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameLastName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameName().empty, format("nl_be 1$s %d", i));
		assert(!faker.namePrefix().empty, format("nl_be 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("nl_be 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("nl_be 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("nl_be 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("nl_be 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("nl_be 1$s %d", i));
		assert(!faker.teamCreature().empty, format("nl_be 1$s %d", i));
		assert(!faker.teamName().empty, format("nl_be 1$s %d", i));
		assert(!faker.vehicle().empty, format("nl_be 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("nl_be 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("nl_be 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("nl_be 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("nl_be 1$s %d", i));
		assert(!faker.vehicleType().empty, format("nl_be 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("nl_be 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("nl_be 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("nl_be 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("nl_be 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("nl_be 1$s %d", i));
		assert(!faker.wordNoun().empty, format("nl_be 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("nl_be 1$s %d", i));
		assert(!faker.wordVerb().empty, format("nl_be 1$s %d", i));

	}
}

unittest {
	import faked.faker_pl;
    auto faker = new Faker_pl(41);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("pl 1$s %d", i));
		assert(!faker.addressCity().empty, format("pl 1$s %d", i));
		assert(!faker.addressCityName().empty, format("pl 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("pl 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("pl 1$s %d", i));
		assert(!faker.addressCountry().empty, format("pl 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("pl 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("pl 1$s %d", i));
		assert(!faker.addressCounty().empty, format("pl 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("pl 1$s %d", i));
		assert(!faker.addressDirection().empty, format("pl 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("pl 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("pl 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("pl 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("pl 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("pl 1$s %d", i));
		assert(!faker.addressState().empty, format("pl 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("pl 1$s %d", i));
		assert(!faker.addressStreet().empty, format("pl 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("pl 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("pl 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("pl 1$s %d", i));
		assert(!faker.animalBear().empty, format("pl 1$s %d", i));
		assert(!faker.animalBird().empty, format("pl 1$s %d", i));
		assert(!faker.animalCat().empty, format("pl 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("pl 1$s %d", i));
		assert(!faker.animalCow().empty, format("pl 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("pl 1$s %d", i));
		assert(!faker.animalDog().empty, format("pl 1$s %d", i));
		assert(!faker.animalFish().empty, format("pl 1$s %d", i));
		assert(!faker.animalHorse().empty, format("pl 1$s %d", i));
		assert(!faker.animalInsect().empty, format("pl 1$s %d", i));
		assert(!faker.animalLion().empty, format("pl 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("pl 1$s %d", i));
		assert(!faker.animalRodent().empty, format("pl 1$s %d", i));
		assert(!faker.animalSnake().empty, format("pl 1$s %d", i));
		assert(!faker.animalType().empty, format("pl 1$s %d", i));
		assert(!faker.appAuthor().empty, format("pl 1$s %d", i));
		assert(!faker.appName().empty, format("pl 1$s %d", i));
		assert(!faker.appVersion().empty, format("pl 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("pl 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("pl 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("pl 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("pl 1$s %d", i));
		assert(!faker.colorHuman().empty, format("pl 1$s %d", i));
		assert(!faker.colorSpace().empty, format("pl 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("pl 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("pl 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("pl 1$s %d", i));
		assert(!faker.companyBs().empty, format("pl 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("pl 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("pl 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("pl 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("pl 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("pl 1$s %d", i));
		assert(!faker.companyName().empty, format("pl 1$s %d", i));
		assert(!faker.companyNoun().empty, format("pl 1$s %d", i));
		assert(!faker.companySuffix().empty, format("pl 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("pl 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("pl 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("pl 1$s %d", i));
		assert(!faker.databaseType().empty, format("pl 1$s %d", i));
		assert(!faker.dateMonth().empty, format("pl 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("pl 1$s %d", i));
		assert(!faker.financeAccount().empty, format("pl 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("pl 1$s %d", i));
		assert(!faker.financeBIC().empty, format("pl 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("pl 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("pl 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("pl 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("pl 1$s %d", i));
		assert(!faker.financeMask().empty, format("pl 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("pl 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("pl 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("pl 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("pl 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("pl 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("pl 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("pl 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("pl 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("pl 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("pl 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("pl 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("pl 1$s %d", i));
		assert(!faker.internetColor().empty, format("pl 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("pl 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("pl 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("pl 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("pl 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("pl 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("pl 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("pl 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("pl 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("pl 1$s %d", i));
		assert(!faker.internetPassword().empty, format("pl 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("pl 1$s %d", i));
		assert(!faker.internetUrl().empty, format("pl 1$s %d", i));
		assert(!faker.internetUserName().empty, format("pl 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("pl 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("pl 1$s %d", i));
		assert(!faker.loremSentance().empty, format("pl 1$s %d", i));
		assert(!faker.loremSentances().empty, format("pl 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("pl 1$s %d", i));
		assert(!faker.loremText().empty, format("pl 1$s %d", i));
		assert(!faker.loremWords().empty, format("pl 1$s %d", i));
		assert(!faker.musicGenre().empty, format("pl 1$s %d", i));
		assert(!faker.musicSongName().empty, format("pl 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("pl 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("pl 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("pl 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("pl 1$s %d", i));
		assert(!faker.nameGender().empty, format("pl 1$s %d", i));
		assert(!faker.nameLastName().empty, format("pl 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("pl 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("pl 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("pl 1$s %d", i));
		assert(!faker.nameName().empty, format("pl 1$s %d", i));
		assert(!faker.namePrefix().empty, format("pl 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("pl 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("pl 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("pl 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("pl 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("pl 1$s %d", i));
		assert(!faker.teamCreature().empty, format("pl 1$s %d", i));
		assert(!faker.teamName().empty, format("pl 1$s %d", i));
		assert(!faker.vehicle().empty, format("pl 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("pl 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("pl 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("pl 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("pl 1$s %d", i));
		assert(!faker.vehicleType().empty, format("pl 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("pl 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("pl 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("pl 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("pl 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("pl 1$s %d", i));
		assert(!faker.wordNoun().empty, format("pl 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("pl 1$s %d", i));
		assert(!faker.wordVerb().empty, format("pl 1$s %d", i));

	}
}

unittest {
	import faked.faker_pt_br;
    auto faker = new Faker_pt_br(42);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCity().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCityName().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCountry().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressCounty().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressDirection().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressState().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressStreet().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("pt_br 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalBear().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalBird().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalCat().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalCow().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalDog().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalFish().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalHorse().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalInsect().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalLion().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalRodent().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalSnake().empty, format("pt_br 1$s %d", i));
		assert(!faker.animalType().empty, format("pt_br 1$s %d", i));
		assert(!faker.appAuthor().empty, format("pt_br 1$s %d", i));
		assert(!faker.appName().empty, format("pt_br 1$s %d", i));
		assert(!faker.appVersion().empty, format("pt_br 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("pt_br 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("pt_br 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("pt_br 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("pt_br 1$s %d", i));
		assert(!faker.colorHuman().empty, format("pt_br 1$s %d", i));
		assert(!faker.colorSpace().empty, format("pt_br 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("pt_br 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyBs().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyName().empty, format("pt_br 1$s %d", i));
		assert(!faker.companyNoun().empty, format("pt_br 1$s %d", i));
		assert(!faker.companySuffix().empty, format("pt_br 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("pt_br 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("pt_br 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("pt_br 1$s %d", i));
		assert(!faker.databaseType().empty, format("pt_br 1$s %d", i));
		assert(!faker.dateMonth().empty, format("pt_br 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeAccount().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeBIC().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeMask().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("pt_br 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("pt_br 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("pt_br 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("pt_br 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("pt_br 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("pt_br 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("pt_br 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("pt_br 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("pt_br 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("pt_br 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetColor().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetPassword().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetUrl().empty, format("pt_br 1$s %d", i));
		assert(!faker.internetUserName().empty, format("pt_br 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("pt_br 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("pt_br 1$s %d", i));
		assert(!faker.loremSentance().empty, format("pt_br 1$s %d", i));
		assert(!faker.loremSentances().empty, format("pt_br 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("pt_br 1$s %d", i));
		assert(!faker.loremText().empty, format("pt_br 1$s %d", i));
		assert(!faker.loremWords().empty, format("pt_br 1$s %d", i));
		assert(!faker.musicGenre().empty, format("pt_br 1$s %d", i));
		assert(!faker.musicSongName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameGender().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameLastName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameName().empty, format("pt_br 1$s %d", i));
		assert(!faker.namePrefix().empty, format("pt_br 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("pt_br 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("pt_br 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("pt_br 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("pt_br 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("pt_br 1$s %d", i));
		assert(!faker.teamCreature().empty, format("pt_br 1$s %d", i));
		assert(!faker.teamName().empty, format("pt_br 1$s %d", i));
		assert(!faker.vehicle().empty, format("pt_br 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("pt_br 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("pt_br 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("pt_br 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("pt_br 1$s %d", i));
		assert(!faker.vehicleType().empty, format("pt_br 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("pt_br 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("pt_br 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("pt_br 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("pt_br 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("pt_br 1$s %d", i));
		assert(!faker.wordNoun().empty, format("pt_br 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("pt_br 1$s %d", i));
		assert(!faker.wordVerb().empty, format("pt_br 1$s %d", i));

	}
}

unittest {
	import faked.faker_pt_pt;
    auto faker = new Faker_pt_pt(43);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCity().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCityName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCountry().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressCounty().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressDirection().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressState().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressStreet().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("pt_pt 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalBear().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalBird().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalCat().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalCow().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalDog().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalFish().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalHorse().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalInsect().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalLion().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalRodent().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalSnake().empty, format("pt_pt 1$s %d", i));
		assert(!faker.animalType().empty, format("pt_pt 1$s %d", i));
		assert(!faker.appAuthor().empty, format("pt_pt 1$s %d", i));
		assert(!faker.appName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.appVersion().empty, format("pt_pt 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("pt_pt 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("pt_pt 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("pt_pt 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("pt_pt 1$s %d", i));
		assert(!faker.colorHuman().empty, format("pt_pt 1$s %d", i));
		assert(!faker.colorSpace().empty, format("pt_pt 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("pt_pt 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyBs().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companyNoun().empty, format("pt_pt 1$s %d", i));
		assert(!faker.companySuffix().empty, format("pt_pt 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("pt_pt 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("pt_pt 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("pt_pt 1$s %d", i));
		assert(!faker.databaseType().empty, format("pt_pt 1$s %d", i));
		assert(!faker.dateMonth().empty, format("pt_pt 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeAccount().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeBIC().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeMask().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("pt_pt 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("pt_pt 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("pt_pt 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("pt_pt 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("pt_pt 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("pt_pt 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("pt_pt 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("pt_pt 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("pt_pt 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("pt_pt 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetColor().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetPassword().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetUrl().empty, format("pt_pt 1$s %d", i));
		assert(!faker.internetUserName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("pt_pt 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("pt_pt 1$s %d", i));
		assert(!faker.loremSentance().empty, format("pt_pt 1$s %d", i));
		assert(!faker.loremSentances().empty, format("pt_pt 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("pt_pt 1$s %d", i));
		assert(!faker.loremText().empty, format("pt_pt 1$s %d", i));
		assert(!faker.loremWords().empty, format("pt_pt 1$s %d", i));
		assert(!faker.musicGenre().empty, format("pt_pt 1$s %d", i));
		assert(!faker.musicSongName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameGender().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameLastName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.namePrefix().empty, format("pt_pt 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("pt_pt 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("pt_pt 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("pt_pt 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("pt_pt 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("pt_pt 1$s %d", i));
		assert(!faker.teamCreature().empty, format("pt_pt 1$s %d", i));
		assert(!faker.teamName().empty, format("pt_pt 1$s %d", i));
		assert(!faker.vehicle().empty, format("pt_pt 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("pt_pt 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("pt_pt 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("pt_pt 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("pt_pt 1$s %d", i));
		assert(!faker.vehicleType().empty, format("pt_pt 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("pt_pt 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("pt_pt 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("pt_pt 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("pt_pt 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("pt_pt 1$s %d", i));
		assert(!faker.wordNoun().empty, format("pt_pt 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("pt_pt 1$s %d", i));
		assert(!faker.wordVerb().empty, format("pt_pt 1$s %d", i));

	}
}

unittest {
	import faked.faker_ro;
    auto faker = new Faker_ro(44);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("ro 1$s %d", i));
		assert(!faker.addressCity().empty, format("ro 1$s %d", i));
		assert(!faker.addressCityName().empty, format("ro 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("ro 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("ro 1$s %d", i));
		assert(!faker.addressCountry().empty, format("ro 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("ro 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("ro 1$s %d", i));
		assert(!faker.addressCounty().empty, format("ro 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("ro 1$s %d", i));
		assert(!faker.addressDirection().empty, format("ro 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("ro 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("ro 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("ro 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("ro 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("ro 1$s %d", i));
		assert(!faker.addressState().empty, format("ro 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("ro 1$s %d", i));
		assert(!faker.addressStreet().empty, format("ro 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("ro 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("ro 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("ro 1$s %d", i));
		assert(!faker.animalBear().empty, format("ro 1$s %d", i));
		assert(!faker.animalBird().empty, format("ro 1$s %d", i));
		assert(!faker.animalCat().empty, format("ro 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("ro 1$s %d", i));
		assert(!faker.animalCow().empty, format("ro 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("ro 1$s %d", i));
		assert(!faker.animalDog().empty, format("ro 1$s %d", i));
		assert(!faker.animalFish().empty, format("ro 1$s %d", i));
		assert(!faker.animalHorse().empty, format("ro 1$s %d", i));
		assert(!faker.animalInsect().empty, format("ro 1$s %d", i));
		assert(!faker.animalLion().empty, format("ro 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("ro 1$s %d", i));
		assert(!faker.animalRodent().empty, format("ro 1$s %d", i));
		assert(!faker.animalSnake().empty, format("ro 1$s %d", i));
		assert(!faker.animalType().empty, format("ro 1$s %d", i));
		assert(!faker.appAuthor().empty, format("ro 1$s %d", i));
		assert(!faker.appName().empty, format("ro 1$s %d", i));
		assert(!faker.appVersion().empty, format("ro 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("ro 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("ro 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("ro 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("ro 1$s %d", i));
		assert(!faker.colorHuman().empty, format("ro 1$s %d", i));
		assert(!faker.colorSpace().empty, format("ro 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("ro 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("ro 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("ro 1$s %d", i));
		assert(!faker.companyBs().empty, format("ro 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("ro 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("ro 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("ro 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("ro 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("ro 1$s %d", i));
		assert(!faker.companyName().empty, format("ro 1$s %d", i));
		assert(!faker.companyNoun().empty, format("ro 1$s %d", i));
		assert(!faker.companySuffix().empty, format("ro 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("ro 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("ro 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("ro 1$s %d", i));
		assert(!faker.databaseType().empty, format("ro 1$s %d", i));
		assert(!faker.dateMonth().empty, format("ro 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("ro 1$s %d", i));
		assert(!faker.financeAccount().empty, format("ro 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("ro 1$s %d", i));
		assert(!faker.financeBIC().empty, format("ro 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("ro 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("ro 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("ro 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("ro 1$s %d", i));
		assert(!faker.financeMask().empty, format("ro 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("ro 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("ro 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("ro 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("ro 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("ro 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("ro 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("ro 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("ro 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("ro 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("ro 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("ro 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("ro 1$s %d", i));
		assert(!faker.internetColor().empty, format("ro 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("ro 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("ro 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("ro 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("ro 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("ro 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("ro 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("ro 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("ro 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("ro 1$s %d", i));
		assert(!faker.internetPassword().empty, format("ro 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("ro 1$s %d", i));
		assert(!faker.internetUrl().empty, format("ro 1$s %d", i));
		assert(!faker.internetUserName().empty, format("ro 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("ro 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("ro 1$s %d", i));
		assert(!faker.loremSentance().empty, format("ro 1$s %d", i));
		assert(!faker.loremSentances().empty, format("ro 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("ro 1$s %d", i));
		assert(!faker.loremText().empty, format("ro 1$s %d", i));
		assert(!faker.loremWords().empty, format("ro 1$s %d", i));
		assert(!faker.musicGenre().empty, format("ro 1$s %d", i));
		assert(!faker.musicSongName().empty, format("ro 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("ro 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("ro 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("ro 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("ro 1$s %d", i));
		assert(!faker.nameGender().empty, format("ro 1$s %d", i));
		assert(!faker.nameLastName().empty, format("ro 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("ro 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("ro 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("ro 1$s %d", i));
		assert(!faker.nameName().empty, format("ro 1$s %d", i));
		assert(!faker.namePrefix().empty, format("ro 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("ro 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("ro 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("ro 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("ro 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("ro 1$s %d", i));
		assert(!faker.teamCreature().empty, format("ro 1$s %d", i));
		assert(!faker.teamName().empty, format("ro 1$s %d", i));
		assert(!faker.vehicle().empty, format("ro 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("ro 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("ro 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("ro 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("ro 1$s %d", i));
		assert(!faker.vehicleType().empty, format("ro 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("ro 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("ro 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("ro 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("ro 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("ro 1$s %d", i));
		assert(!faker.wordNoun().empty, format("ro 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("ro 1$s %d", i));
		assert(!faker.wordVerb().empty, format("ro 1$s %d", i));

	}
}

unittest {
	import faked.faker_ru;
    auto faker = new Faker_ru(45);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("ru 1$s %d", i));
		assert(!faker.addressCity().empty, format("ru 1$s %d", i));
		assert(!faker.addressCityName().empty, format("ru 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("ru 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("ru 1$s %d", i));
		assert(!faker.addressCountry().empty, format("ru 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("ru 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("ru 1$s %d", i));
		assert(!faker.addressCounty().empty, format("ru 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("ru 1$s %d", i));
		assert(!faker.addressDirection().empty, format("ru 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("ru 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("ru 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("ru 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("ru 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("ru 1$s %d", i));
		assert(!faker.addressState().empty, format("ru 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("ru 1$s %d", i));
		assert(!faker.addressStreet().empty, format("ru 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("ru 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("ru 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("ru 1$s %d", i));
		assert(!faker.animalBear().empty, format("ru 1$s %d", i));
		assert(!faker.animalBird().empty, format("ru 1$s %d", i));
		assert(!faker.animalCat().empty, format("ru 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("ru 1$s %d", i));
		assert(!faker.animalCow().empty, format("ru 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("ru 1$s %d", i));
		assert(!faker.animalDog().empty, format("ru 1$s %d", i));
		assert(!faker.animalFish().empty, format("ru 1$s %d", i));
		assert(!faker.animalHorse().empty, format("ru 1$s %d", i));
		assert(!faker.animalInsect().empty, format("ru 1$s %d", i));
		assert(!faker.animalLion().empty, format("ru 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("ru 1$s %d", i));
		assert(!faker.animalRodent().empty, format("ru 1$s %d", i));
		assert(!faker.animalSnake().empty, format("ru 1$s %d", i));
		assert(!faker.animalType().empty, format("ru 1$s %d", i));
		assert(!faker.appAuthor().empty, format("ru 1$s %d", i));
		assert(!faker.appName().empty, format("ru 1$s %d", i));
		assert(!faker.appVersion().empty, format("ru 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("ru 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("ru 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("ru 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("ru 1$s %d", i));
		assert(!faker.colorHuman().empty, format("ru 1$s %d", i));
		assert(!faker.colorSpace().empty, format("ru 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("ru 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("ru 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("ru 1$s %d", i));
		assert(!faker.companyBs().empty, format("ru 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("ru 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("ru 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("ru 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("ru 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("ru 1$s %d", i));
		assert(!faker.companyName().empty, format("ru 1$s %d", i));
		assert(!faker.companyNoun().empty, format("ru 1$s %d", i));
		assert(!faker.companySuffix().empty, format("ru 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("ru 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("ru 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("ru 1$s %d", i));
		assert(!faker.databaseType().empty, format("ru 1$s %d", i));
		assert(!faker.dateMonth().empty, format("ru 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("ru 1$s %d", i));
		assert(!faker.financeAccount().empty, format("ru 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("ru 1$s %d", i));
		assert(!faker.financeBIC().empty, format("ru 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("ru 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("ru 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("ru 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("ru 1$s %d", i));
		assert(!faker.financeMask().empty, format("ru 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("ru 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("ru 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("ru 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("ru 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("ru 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("ru 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("ru 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("ru 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("ru 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("ru 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("ru 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("ru 1$s %d", i));
		assert(!faker.internetColor().empty, format("ru 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("ru 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("ru 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("ru 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("ru 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("ru 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("ru 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("ru 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("ru 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("ru 1$s %d", i));
		assert(!faker.internetPassword().empty, format("ru 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("ru 1$s %d", i));
		assert(!faker.internetUrl().empty, format("ru 1$s %d", i));
		assert(!faker.internetUserName().empty, format("ru 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("ru 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("ru 1$s %d", i));
		assert(!faker.loremSentance().empty, format("ru 1$s %d", i));
		assert(!faker.loremSentances().empty, format("ru 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("ru 1$s %d", i));
		assert(!faker.loremText().empty, format("ru 1$s %d", i));
		assert(!faker.loremWords().empty, format("ru 1$s %d", i));
		assert(!faker.musicGenre().empty, format("ru 1$s %d", i));
		assert(!faker.musicSongName().empty, format("ru 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("ru 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("ru 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("ru 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("ru 1$s %d", i));
		assert(!faker.nameGender().empty, format("ru 1$s %d", i));
		assert(!faker.nameLastName().empty, format("ru 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("ru 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("ru 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("ru 1$s %d", i));
		assert(!faker.nameName().empty, format("ru 1$s %d", i));
		assert(!faker.namePrefix().empty, format("ru 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("ru 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("ru 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("ru 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("ru 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("ru 1$s %d", i));
		assert(!faker.teamCreature().empty, format("ru 1$s %d", i));
		assert(!faker.teamName().empty, format("ru 1$s %d", i));
		assert(!faker.vehicle().empty, format("ru 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("ru 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("ru 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("ru 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("ru 1$s %d", i));
		assert(!faker.vehicleType().empty, format("ru 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("ru 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("ru 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("ru 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("ru 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("ru 1$s %d", i));
		assert(!faker.wordNoun().empty, format("ru 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("ru 1$s %d", i));
		assert(!faker.wordVerb().empty, format("ru 1$s %d", i));

	}
}

unittest {
	import faked.faker_sk;
    auto faker = new Faker_sk(46);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("sk 1$s %d", i));
		assert(!faker.addressCity().empty, format("sk 1$s %d", i));
		assert(!faker.addressCityName().empty, format("sk 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("sk 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("sk 1$s %d", i));
		assert(!faker.addressCountry().empty, format("sk 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("sk 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("sk 1$s %d", i));
		assert(!faker.addressCounty().empty, format("sk 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("sk 1$s %d", i));
		assert(!faker.addressDirection().empty, format("sk 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("sk 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("sk 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("sk 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("sk 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("sk 1$s %d", i));
		assert(!faker.addressState().empty, format("sk 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("sk 1$s %d", i));
		assert(!faker.addressStreet().empty, format("sk 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("sk 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("sk 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("sk 1$s %d", i));
		assert(!faker.animalBear().empty, format("sk 1$s %d", i));
		assert(!faker.animalBird().empty, format("sk 1$s %d", i));
		assert(!faker.animalCat().empty, format("sk 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("sk 1$s %d", i));
		assert(!faker.animalCow().empty, format("sk 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("sk 1$s %d", i));
		assert(!faker.animalDog().empty, format("sk 1$s %d", i));
		assert(!faker.animalFish().empty, format("sk 1$s %d", i));
		assert(!faker.animalHorse().empty, format("sk 1$s %d", i));
		assert(!faker.animalInsect().empty, format("sk 1$s %d", i));
		assert(!faker.animalLion().empty, format("sk 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("sk 1$s %d", i));
		assert(!faker.animalRodent().empty, format("sk 1$s %d", i));
		assert(!faker.animalSnake().empty, format("sk 1$s %d", i));
		assert(!faker.animalType().empty, format("sk 1$s %d", i));
		assert(!faker.appAuthor().empty, format("sk 1$s %d", i));
		assert(!faker.appName().empty, format("sk 1$s %d", i));
		assert(!faker.appVersion().empty, format("sk 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("sk 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("sk 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("sk 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("sk 1$s %d", i));
		assert(!faker.colorHuman().empty, format("sk 1$s %d", i));
		assert(!faker.colorSpace().empty, format("sk 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("sk 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("sk 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("sk 1$s %d", i));
		assert(!faker.companyBs().empty, format("sk 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("sk 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("sk 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("sk 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("sk 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("sk 1$s %d", i));
		assert(!faker.companyName().empty, format("sk 1$s %d", i));
		assert(!faker.companyNoun().empty, format("sk 1$s %d", i));
		assert(!faker.companySuffix().empty, format("sk 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("sk 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("sk 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("sk 1$s %d", i));
		assert(!faker.databaseType().empty, format("sk 1$s %d", i));
		assert(!faker.dateMonth().empty, format("sk 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("sk 1$s %d", i));
		assert(!faker.financeAccount().empty, format("sk 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("sk 1$s %d", i));
		assert(!faker.financeBIC().empty, format("sk 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("sk 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("sk 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("sk 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("sk 1$s %d", i));
		assert(!faker.financeMask().empty, format("sk 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("sk 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("sk 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("sk 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("sk 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("sk 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("sk 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("sk 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("sk 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("sk 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("sk 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("sk 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("sk 1$s %d", i));
		assert(!faker.internetColor().empty, format("sk 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("sk 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("sk 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("sk 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("sk 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("sk 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("sk 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("sk 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("sk 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("sk 1$s %d", i));
		assert(!faker.internetPassword().empty, format("sk 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("sk 1$s %d", i));
		assert(!faker.internetUrl().empty, format("sk 1$s %d", i));
		assert(!faker.internetUserName().empty, format("sk 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("sk 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("sk 1$s %d", i));
		assert(!faker.loremSentance().empty, format("sk 1$s %d", i));
		assert(!faker.loremSentances().empty, format("sk 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("sk 1$s %d", i));
		assert(!faker.loremText().empty, format("sk 1$s %d", i));
		assert(!faker.loremWords().empty, format("sk 1$s %d", i));
		assert(!faker.musicGenre().empty, format("sk 1$s %d", i));
		assert(!faker.musicSongName().empty, format("sk 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("sk 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("sk 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("sk 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("sk 1$s %d", i));
		assert(!faker.nameGender().empty, format("sk 1$s %d", i));
		assert(!faker.nameLastName().empty, format("sk 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("sk 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("sk 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("sk 1$s %d", i));
		assert(!faker.nameName().empty, format("sk 1$s %d", i));
		assert(!faker.namePrefix().empty, format("sk 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("sk 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("sk 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("sk 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("sk 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("sk 1$s %d", i));
		assert(!faker.teamCreature().empty, format("sk 1$s %d", i));
		assert(!faker.teamName().empty, format("sk 1$s %d", i));
		assert(!faker.vehicle().empty, format("sk 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("sk 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("sk 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("sk 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("sk 1$s %d", i));
		assert(!faker.vehicleType().empty, format("sk 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("sk 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("sk 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("sk 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("sk 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("sk 1$s %d", i));
		assert(!faker.wordNoun().empty, format("sk 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("sk 1$s %d", i));
		assert(!faker.wordVerb().empty, format("sk 1$s %d", i));

	}
}

unittest {
	import faked.faker_sv;
    auto faker = new Faker_sv(47);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("sv 1$s %d", i));
		assert(!faker.addressCity().empty, format("sv 1$s %d", i));
		assert(!faker.addressCityName().empty, format("sv 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("sv 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("sv 1$s %d", i));
		assert(!faker.addressCountry().empty, format("sv 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("sv 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("sv 1$s %d", i));
		assert(!faker.addressCounty().empty, format("sv 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("sv 1$s %d", i));
		assert(!faker.addressDirection().empty, format("sv 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("sv 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("sv 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("sv 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("sv 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("sv 1$s %d", i));
		assert(!faker.addressState().empty, format("sv 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("sv 1$s %d", i));
		assert(!faker.addressStreet().empty, format("sv 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("sv 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("sv 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("sv 1$s %d", i));
		assert(!faker.animalBear().empty, format("sv 1$s %d", i));
		assert(!faker.animalBird().empty, format("sv 1$s %d", i));
		assert(!faker.animalCat().empty, format("sv 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("sv 1$s %d", i));
		assert(!faker.animalCow().empty, format("sv 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("sv 1$s %d", i));
		assert(!faker.animalDog().empty, format("sv 1$s %d", i));
		assert(!faker.animalFish().empty, format("sv 1$s %d", i));
		assert(!faker.animalHorse().empty, format("sv 1$s %d", i));
		assert(!faker.animalInsect().empty, format("sv 1$s %d", i));
		assert(!faker.animalLion().empty, format("sv 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("sv 1$s %d", i));
		assert(!faker.animalRodent().empty, format("sv 1$s %d", i));
		assert(!faker.animalSnake().empty, format("sv 1$s %d", i));
		assert(!faker.animalType().empty, format("sv 1$s %d", i));
		assert(!faker.appAuthor().empty, format("sv 1$s %d", i));
		assert(!faker.appName().empty, format("sv 1$s %d", i));
		assert(!faker.appVersion().empty, format("sv 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("sv 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("sv 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("sv 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("sv 1$s %d", i));
		assert(!faker.colorHuman().empty, format("sv 1$s %d", i));
		assert(!faker.colorSpace().empty, format("sv 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("sv 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("sv 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("sv 1$s %d", i));
		assert(!faker.companyBs().empty, format("sv 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("sv 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("sv 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("sv 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("sv 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("sv 1$s %d", i));
		assert(!faker.companyName().empty, format("sv 1$s %d", i));
		assert(!faker.companyNoun().empty, format("sv 1$s %d", i));
		assert(!faker.companySuffix().empty, format("sv 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("sv 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("sv 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("sv 1$s %d", i));
		assert(!faker.databaseType().empty, format("sv 1$s %d", i));
		assert(!faker.dateMonth().empty, format("sv 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("sv 1$s %d", i));
		assert(!faker.financeAccount().empty, format("sv 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("sv 1$s %d", i));
		assert(!faker.financeBIC().empty, format("sv 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("sv 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("sv 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("sv 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("sv 1$s %d", i));
		assert(!faker.financeMask().empty, format("sv 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("sv 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("sv 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("sv 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("sv 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("sv 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("sv 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("sv 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("sv 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("sv 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("sv 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("sv 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("sv 1$s %d", i));
		assert(!faker.internetColor().empty, format("sv 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("sv 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("sv 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("sv 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("sv 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("sv 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("sv 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("sv 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("sv 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("sv 1$s %d", i));
		assert(!faker.internetPassword().empty, format("sv 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("sv 1$s %d", i));
		assert(!faker.internetUrl().empty, format("sv 1$s %d", i));
		assert(!faker.internetUserName().empty, format("sv 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("sv 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("sv 1$s %d", i));
		assert(!faker.loremSentance().empty, format("sv 1$s %d", i));
		assert(!faker.loremSentances().empty, format("sv 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("sv 1$s %d", i));
		assert(!faker.loremText().empty, format("sv 1$s %d", i));
		assert(!faker.loremWords().empty, format("sv 1$s %d", i));
		assert(!faker.musicGenre().empty, format("sv 1$s %d", i));
		assert(!faker.musicSongName().empty, format("sv 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("sv 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("sv 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("sv 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("sv 1$s %d", i));
		assert(!faker.nameGender().empty, format("sv 1$s %d", i));
		assert(!faker.nameLastName().empty, format("sv 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("sv 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("sv 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("sv 1$s %d", i));
		assert(!faker.nameName().empty, format("sv 1$s %d", i));
		assert(!faker.namePrefix().empty, format("sv 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("sv 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("sv 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("sv 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("sv 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("sv 1$s %d", i));
		assert(!faker.teamCreature().empty, format("sv 1$s %d", i));
		assert(!faker.teamName().empty, format("sv 1$s %d", i));
		assert(!faker.vehicle().empty, format("sv 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("sv 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("sv 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("sv 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("sv 1$s %d", i));
		assert(!faker.vehicleType().empty, format("sv 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("sv 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("sv 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("sv 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("sv 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("sv 1$s %d", i));
		assert(!faker.wordNoun().empty, format("sv 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("sv 1$s %d", i));
		assert(!faker.wordVerb().empty, format("sv 1$s %d", i));

	}
}

unittest {
	import faked.faker_tr;
    auto faker = new Faker_tr(48);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("tr 1$s %d", i));
		assert(!faker.addressCity().empty, format("tr 1$s %d", i));
		assert(!faker.addressCityName().empty, format("tr 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("tr 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("tr 1$s %d", i));
		assert(!faker.addressCountry().empty, format("tr 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("tr 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("tr 1$s %d", i));
		assert(!faker.addressCounty().empty, format("tr 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("tr 1$s %d", i));
		assert(!faker.addressDirection().empty, format("tr 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("tr 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("tr 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("tr 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("tr 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("tr 1$s %d", i));
		assert(!faker.addressState().empty, format("tr 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("tr 1$s %d", i));
		assert(!faker.addressStreet().empty, format("tr 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("tr 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("tr 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("tr 1$s %d", i));
		assert(!faker.animalBear().empty, format("tr 1$s %d", i));
		assert(!faker.animalBird().empty, format("tr 1$s %d", i));
		assert(!faker.animalCat().empty, format("tr 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("tr 1$s %d", i));
		assert(!faker.animalCow().empty, format("tr 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("tr 1$s %d", i));
		assert(!faker.animalDog().empty, format("tr 1$s %d", i));
		assert(!faker.animalFish().empty, format("tr 1$s %d", i));
		assert(!faker.animalHorse().empty, format("tr 1$s %d", i));
		assert(!faker.animalInsect().empty, format("tr 1$s %d", i));
		assert(!faker.animalLion().empty, format("tr 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("tr 1$s %d", i));
		assert(!faker.animalRodent().empty, format("tr 1$s %d", i));
		assert(!faker.animalSnake().empty, format("tr 1$s %d", i));
		assert(!faker.animalType().empty, format("tr 1$s %d", i));
		assert(!faker.appAuthor().empty, format("tr 1$s %d", i));
		assert(!faker.appName().empty, format("tr 1$s %d", i));
		assert(!faker.appVersion().empty, format("tr 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("tr 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("tr 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("tr 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("tr 1$s %d", i));
		assert(!faker.colorHuman().empty, format("tr 1$s %d", i));
		assert(!faker.colorSpace().empty, format("tr 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("tr 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("tr 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("tr 1$s %d", i));
		assert(!faker.companyBs().empty, format("tr 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("tr 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("tr 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("tr 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("tr 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("tr 1$s %d", i));
		assert(!faker.companyName().empty, format("tr 1$s %d", i));
		assert(!faker.companyNoun().empty, format("tr 1$s %d", i));
		assert(!faker.companySuffix().empty, format("tr 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("tr 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("tr 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("tr 1$s %d", i));
		assert(!faker.databaseType().empty, format("tr 1$s %d", i));
		assert(!faker.dateMonth().empty, format("tr 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("tr 1$s %d", i));
		assert(!faker.financeAccount().empty, format("tr 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("tr 1$s %d", i));
		assert(!faker.financeBIC().empty, format("tr 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("tr 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("tr 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("tr 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("tr 1$s %d", i));
		assert(!faker.financeMask().empty, format("tr 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("tr 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("tr 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("tr 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("tr 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("tr 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("tr 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("tr 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("tr 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("tr 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("tr 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("tr 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("tr 1$s %d", i));
		assert(!faker.internetColor().empty, format("tr 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("tr 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("tr 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("tr 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("tr 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("tr 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("tr 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("tr 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("tr 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("tr 1$s %d", i));
		assert(!faker.internetPassword().empty, format("tr 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("tr 1$s %d", i));
		assert(!faker.internetUrl().empty, format("tr 1$s %d", i));
		assert(!faker.internetUserName().empty, format("tr 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("tr 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("tr 1$s %d", i));
		assert(!faker.loremSentance().empty, format("tr 1$s %d", i));
		assert(!faker.loremSentances().empty, format("tr 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("tr 1$s %d", i));
		assert(!faker.loremText().empty, format("tr 1$s %d", i));
		assert(!faker.loremWords().empty, format("tr 1$s %d", i));
		assert(!faker.musicGenre().empty, format("tr 1$s %d", i));
		assert(!faker.musicSongName().empty, format("tr 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("tr 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("tr 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("tr 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("tr 1$s %d", i));
		assert(!faker.nameGender().empty, format("tr 1$s %d", i));
		assert(!faker.nameLastName().empty, format("tr 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("tr 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("tr 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("tr 1$s %d", i));
		assert(!faker.nameName().empty, format("tr 1$s %d", i));
		assert(!faker.namePrefix().empty, format("tr 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("tr 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("tr 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("tr 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("tr 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("tr 1$s %d", i));
		assert(!faker.teamCreature().empty, format("tr 1$s %d", i));
		assert(!faker.teamName().empty, format("tr 1$s %d", i));
		assert(!faker.vehicle().empty, format("tr 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("tr 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("tr 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("tr 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("tr 1$s %d", i));
		assert(!faker.vehicleType().empty, format("tr 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("tr 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("tr 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("tr 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("tr 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("tr 1$s %d", i));
		assert(!faker.wordNoun().empty, format("tr 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("tr 1$s %d", i));
		assert(!faker.wordVerb().empty, format("tr 1$s %d", i));

	}
}

unittest {
	import faked.faker_uk;
    auto faker = new Faker_uk(49);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("uk 1$s %d", i));
		assert(!faker.addressCity().empty, format("uk 1$s %d", i));
		assert(!faker.addressCityName().empty, format("uk 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("uk 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("uk 1$s %d", i));
		assert(!faker.addressCountry().empty, format("uk 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("uk 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("uk 1$s %d", i));
		assert(!faker.addressCounty().empty, format("uk 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("uk 1$s %d", i));
		assert(!faker.addressDirection().empty, format("uk 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("uk 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("uk 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("uk 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("uk 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("uk 1$s %d", i));
		assert(!faker.addressState().empty, format("uk 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("uk 1$s %d", i));
		assert(!faker.addressStreet().empty, format("uk 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("uk 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("uk 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("uk 1$s %d", i));
		assert(!faker.animalBear().empty, format("uk 1$s %d", i));
		assert(!faker.animalBird().empty, format("uk 1$s %d", i));
		assert(!faker.animalCat().empty, format("uk 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("uk 1$s %d", i));
		assert(!faker.animalCow().empty, format("uk 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("uk 1$s %d", i));
		assert(!faker.animalDog().empty, format("uk 1$s %d", i));
		assert(!faker.animalFish().empty, format("uk 1$s %d", i));
		assert(!faker.animalHorse().empty, format("uk 1$s %d", i));
		assert(!faker.animalInsect().empty, format("uk 1$s %d", i));
		assert(!faker.animalLion().empty, format("uk 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("uk 1$s %d", i));
		assert(!faker.animalRodent().empty, format("uk 1$s %d", i));
		assert(!faker.animalSnake().empty, format("uk 1$s %d", i));
		assert(!faker.animalType().empty, format("uk 1$s %d", i));
		assert(!faker.appAuthor().empty, format("uk 1$s %d", i));
		assert(!faker.appName().empty, format("uk 1$s %d", i));
		assert(!faker.appVersion().empty, format("uk 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("uk 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("uk 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("uk 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("uk 1$s %d", i));
		assert(!faker.colorHuman().empty, format("uk 1$s %d", i));
		assert(!faker.colorSpace().empty, format("uk 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("uk 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("uk 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("uk 1$s %d", i));
		assert(!faker.companyBs().empty, format("uk 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("uk 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("uk 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("uk 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("uk 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("uk 1$s %d", i));
		assert(!faker.companyName().empty, format("uk 1$s %d", i));
		assert(!faker.companyNoun().empty, format("uk 1$s %d", i));
		assert(!faker.companySuffix().empty, format("uk 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("uk 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("uk 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("uk 1$s %d", i));
		assert(!faker.databaseType().empty, format("uk 1$s %d", i));
		assert(!faker.dateMonth().empty, format("uk 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("uk 1$s %d", i));
		assert(!faker.financeAccount().empty, format("uk 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("uk 1$s %d", i));
		assert(!faker.financeBIC().empty, format("uk 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("uk 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("uk 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("uk 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("uk 1$s %d", i));
		assert(!faker.financeMask().empty, format("uk 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("uk 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("uk 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("uk 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("uk 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("uk 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("uk 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("uk 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("uk 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("uk 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("uk 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("uk 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("uk 1$s %d", i));
		assert(!faker.internetColor().empty, format("uk 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("uk 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("uk 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("uk 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("uk 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("uk 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("uk 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("uk 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("uk 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("uk 1$s %d", i));
		assert(!faker.internetPassword().empty, format("uk 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("uk 1$s %d", i));
		assert(!faker.internetUrl().empty, format("uk 1$s %d", i));
		assert(!faker.internetUserName().empty, format("uk 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("uk 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("uk 1$s %d", i));
		assert(!faker.loremSentance().empty, format("uk 1$s %d", i));
		assert(!faker.loremSentances().empty, format("uk 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("uk 1$s %d", i));
		assert(!faker.loremText().empty, format("uk 1$s %d", i));
		assert(!faker.loremWords().empty, format("uk 1$s %d", i));
		assert(!faker.musicGenre().empty, format("uk 1$s %d", i));
		assert(!faker.musicSongName().empty, format("uk 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("uk 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("uk 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("uk 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("uk 1$s %d", i));
		assert(!faker.nameGender().empty, format("uk 1$s %d", i));
		assert(!faker.nameLastName().empty, format("uk 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("uk 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("uk 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("uk 1$s %d", i));
		assert(!faker.nameName().empty, format("uk 1$s %d", i));
		assert(!faker.namePrefix().empty, format("uk 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("uk 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("uk 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("uk 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("uk 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("uk 1$s %d", i));
		assert(!faker.teamCreature().empty, format("uk 1$s %d", i));
		assert(!faker.teamName().empty, format("uk 1$s %d", i));
		assert(!faker.vehicle().empty, format("uk 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("uk 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("uk 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("uk 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("uk 1$s %d", i));
		assert(!faker.vehicleType().empty, format("uk 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("uk 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("uk 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("uk 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("uk 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("uk 1$s %d", i));
		assert(!faker.wordNoun().empty, format("uk 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("uk 1$s %d", i));
		assert(!faker.wordVerb().empty, format("uk 1$s %d", i));

	}
}

unittest {
	import faked.faker_vi;
    auto faker = new Faker_vi(50);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("vi 1$s %d", i));
		assert(!faker.addressCity().empty, format("vi 1$s %d", i));
		assert(!faker.addressCityName().empty, format("vi 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("vi 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("vi 1$s %d", i));
		assert(!faker.addressCountry().empty, format("vi 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("vi 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("vi 1$s %d", i));
		assert(!faker.addressCounty().empty, format("vi 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("vi 1$s %d", i));
		assert(!faker.addressDirection().empty, format("vi 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("vi 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("vi 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("vi 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("vi 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("vi 1$s %d", i));
		assert(!faker.addressState().empty, format("vi 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("vi 1$s %d", i));
		assert(!faker.addressStreet().empty, format("vi 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("vi 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("vi 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("vi 1$s %d", i));
		assert(!faker.animalBear().empty, format("vi 1$s %d", i));
		assert(!faker.animalBird().empty, format("vi 1$s %d", i));
		assert(!faker.animalCat().empty, format("vi 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("vi 1$s %d", i));
		assert(!faker.animalCow().empty, format("vi 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("vi 1$s %d", i));
		assert(!faker.animalDog().empty, format("vi 1$s %d", i));
		assert(!faker.animalFish().empty, format("vi 1$s %d", i));
		assert(!faker.animalHorse().empty, format("vi 1$s %d", i));
		assert(!faker.animalInsect().empty, format("vi 1$s %d", i));
		assert(!faker.animalLion().empty, format("vi 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("vi 1$s %d", i));
		assert(!faker.animalRodent().empty, format("vi 1$s %d", i));
		assert(!faker.animalSnake().empty, format("vi 1$s %d", i));
		assert(!faker.animalType().empty, format("vi 1$s %d", i));
		assert(!faker.appAuthor().empty, format("vi 1$s %d", i));
		assert(!faker.appName().empty, format("vi 1$s %d", i));
		assert(!faker.appVersion().empty, format("vi 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("vi 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("vi 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("vi 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("vi 1$s %d", i));
		assert(!faker.colorHuman().empty, format("vi 1$s %d", i));
		assert(!faker.colorSpace().empty, format("vi 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("vi 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("vi 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("vi 1$s %d", i));
		assert(!faker.companyBs().empty, format("vi 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("vi 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("vi 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("vi 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("vi 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("vi 1$s %d", i));
		assert(!faker.companyName().empty, format("vi 1$s %d", i));
		assert(!faker.companyNoun().empty, format("vi 1$s %d", i));
		assert(!faker.companySuffix().empty, format("vi 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("vi 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("vi 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("vi 1$s %d", i));
		assert(!faker.databaseType().empty, format("vi 1$s %d", i));
		assert(!faker.dateMonth().empty, format("vi 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("vi 1$s %d", i));
		assert(!faker.financeAccount().empty, format("vi 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("vi 1$s %d", i));
		assert(!faker.financeBIC().empty, format("vi 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("vi 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("vi 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("vi 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("vi 1$s %d", i));
		assert(!faker.financeMask().empty, format("vi 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("vi 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("vi 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("vi 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("vi 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("vi 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("vi 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("vi 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("vi 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("vi 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("vi 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("vi 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("vi 1$s %d", i));
		assert(!faker.internetColor().empty, format("vi 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("vi 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("vi 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("vi 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("vi 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("vi 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("vi 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("vi 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("vi 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("vi 1$s %d", i));
		assert(!faker.internetPassword().empty, format("vi 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("vi 1$s %d", i));
		assert(!faker.internetUrl().empty, format("vi 1$s %d", i));
		assert(!faker.internetUserName().empty, format("vi 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("vi 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("vi 1$s %d", i));
		assert(!faker.loremSentance().empty, format("vi 1$s %d", i));
		assert(!faker.loremSentances().empty, format("vi 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("vi 1$s %d", i));
		assert(!faker.loremText().empty, format("vi 1$s %d", i));
		assert(!faker.loremWords().empty, format("vi 1$s %d", i));
		assert(!faker.musicGenre().empty, format("vi 1$s %d", i));
		assert(!faker.musicSongName().empty, format("vi 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("vi 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("vi 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("vi 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("vi 1$s %d", i));
		assert(!faker.nameGender().empty, format("vi 1$s %d", i));
		assert(!faker.nameLastName().empty, format("vi 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("vi 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("vi 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("vi 1$s %d", i));
		assert(!faker.nameName().empty, format("vi 1$s %d", i));
		assert(!faker.namePrefix().empty, format("vi 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("vi 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("vi 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("vi 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("vi 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("vi 1$s %d", i));
		assert(!faker.teamCreature().empty, format("vi 1$s %d", i));
		assert(!faker.teamName().empty, format("vi 1$s %d", i));
		assert(!faker.vehicle().empty, format("vi 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("vi 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("vi 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("vi 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("vi 1$s %d", i));
		assert(!faker.vehicleType().empty, format("vi 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("vi 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("vi 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("vi 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("vi 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("vi 1$s %d", i));
		assert(!faker.wordNoun().empty, format("vi 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("vi 1$s %d", i));
		assert(!faker.wordVerb().empty, format("vi 1$s %d", i));

	}
}

unittest {
	import faked.faker_zh_cn;
    auto faker = new Faker_zh_cn(51);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCity().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCityName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCountry().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressCounty().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressDirection().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressState().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressStreet().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("zh_cn 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalBear().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalBird().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalCat().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalCow().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalDog().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalFish().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalHorse().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalInsect().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalLion().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalRodent().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalSnake().empty, format("zh_cn 1$s %d", i));
		assert(!faker.animalType().empty, format("zh_cn 1$s %d", i));
		assert(!faker.appAuthor().empty, format("zh_cn 1$s %d", i));
		assert(!faker.appName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.appVersion().empty, format("zh_cn 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("zh_cn 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("zh_cn 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("zh_cn 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("zh_cn 1$s %d", i));
		assert(!faker.colorHuman().empty, format("zh_cn 1$s %d", i));
		assert(!faker.colorSpace().empty, format("zh_cn 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("zh_cn 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyBs().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companyNoun().empty, format("zh_cn 1$s %d", i));
		assert(!faker.companySuffix().empty, format("zh_cn 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("zh_cn 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("zh_cn 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("zh_cn 1$s %d", i));
		assert(!faker.databaseType().empty, format("zh_cn 1$s %d", i));
		assert(!faker.dateMonth().empty, format("zh_cn 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeAccount().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeBIC().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeMask().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("zh_cn 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("zh_cn 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("zh_cn 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("zh_cn 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("zh_cn 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("zh_cn 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("zh_cn 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("zh_cn 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("zh_cn 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("zh_cn 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetColor().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetPassword().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetUrl().empty, format("zh_cn 1$s %d", i));
		assert(!faker.internetUserName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("zh_cn 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("zh_cn 1$s %d", i));
		assert(!faker.loremSentance().empty, format("zh_cn 1$s %d", i));
		assert(!faker.loremSentances().empty, format("zh_cn 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("zh_cn 1$s %d", i));
		assert(!faker.loremText().empty, format("zh_cn 1$s %d", i));
		assert(!faker.loremWords().empty, format("zh_cn 1$s %d", i));
		assert(!faker.musicGenre().empty, format("zh_cn 1$s %d", i));
		assert(!faker.musicSongName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameGender().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameLastName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.namePrefix().empty, format("zh_cn 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("zh_cn 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("zh_cn 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("zh_cn 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("zh_cn 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("zh_cn 1$s %d", i));
		assert(!faker.teamCreature().empty, format("zh_cn 1$s %d", i));
		assert(!faker.teamName().empty, format("zh_cn 1$s %d", i));
		assert(!faker.vehicle().empty, format("zh_cn 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("zh_cn 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("zh_cn 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("zh_cn 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("zh_cn 1$s %d", i));
		assert(!faker.vehicleType().empty, format("zh_cn 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("zh_cn 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("zh_cn 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("zh_cn 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("zh_cn 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("zh_cn 1$s %d", i));
		assert(!faker.wordNoun().empty, format("zh_cn 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("zh_cn 1$s %d", i));
		assert(!faker.wordVerb().empty, format("zh_cn 1$s %d", i));

	}
}

unittest {
	import faked.faker_zh_tw;
    auto faker = new Faker_zh_tw(52);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCity().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCityName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCountry().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressCounty().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressDirection().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressState().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressStreet().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("zh_tw 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalBear().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalBird().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalCat().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalCow().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalDog().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalFish().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalHorse().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalInsect().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalLion().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalRodent().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalSnake().empty, format("zh_tw 1$s %d", i));
		assert(!faker.animalType().empty, format("zh_tw 1$s %d", i));
		assert(!faker.appAuthor().empty, format("zh_tw 1$s %d", i));
		assert(!faker.appName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.appVersion().empty, format("zh_tw 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("zh_tw 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("zh_tw 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("zh_tw 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("zh_tw 1$s %d", i));
		assert(!faker.colorHuman().empty, format("zh_tw 1$s %d", i));
		assert(!faker.colorSpace().empty, format("zh_tw 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("zh_tw 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyBs().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companyNoun().empty, format("zh_tw 1$s %d", i));
		assert(!faker.companySuffix().empty, format("zh_tw 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("zh_tw 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("zh_tw 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("zh_tw 1$s %d", i));
		assert(!faker.databaseType().empty, format("zh_tw 1$s %d", i));
		assert(!faker.dateMonth().empty, format("zh_tw 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeAccount().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeBIC().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeMask().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("zh_tw 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("zh_tw 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("zh_tw 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("zh_tw 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("zh_tw 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("zh_tw 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("zh_tw 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("zh_tw 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("zh_tw 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("zh_tw 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetColor().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetPassword().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetUrl().empty, format("zh_tw 1$s %d", i));
		assert(!faker.internetUserName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("zh_tw 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("zh_tw 1$s %d", i));
		assert(!faker.loremSentance().empty, format("zh_tw 1$s %d", i));
		assert(!faker.loremSentances().empty, format("zh_tw 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("zh_tw 1$s %d", i));
		assert(!faker.loremText().empty, format("zh_tw 1$s %d", i));
		assert(!faker.loremWords().empty, format("zh_tw 1$s %d", i));
		assert(!faker.musicGenre().empty, format("zh_tw 1$s %d", i));
		assert(!faker.musicSongName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameGender().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameLastName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.namePrefix().empty, format("zh_tw 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("zh_tw 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("zh_tw 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("zh_tw 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("zh_tw 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("zh_tw 1$s %d", i));
		assert(!faker.teamCreature().empty, format("zh_tw 1$s %d", i));
		assert(!faker.teamName().empty, format("zh_tw 1$s %d", i));
		assert(!faker.vehicle().empty, format("zh_tw 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("zh_tw 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("zh_tw 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("zh_tw 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("zh_tw 1$s %d", i));
		assert(!faker.vehicleType().empty, format("zh_tw 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("zh_tw 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("zh_tw 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("zh_tw 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("zh_tw 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("zh_tw 1$s %d", i));
		assert(!faker.wordNoun().empty, format("zh_tw 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("zh_tw 1$s %d", i));
		assert(!faker.wordVerb().empty, format("zh_tw 1$s %d", i));

	}
}

unittest {
	import faked.faker_zu_za;
    auto faker = new Faker_zu_za(53);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCity().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCityName().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCountry().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressCounty().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressDirection().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressState().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressStreet().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("zu_za 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalBear().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalBird().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalCat().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalCow().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalDog().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalFish().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalHorse().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalInsect().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalLion().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalRodent().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalSnake().empty, format("zu_za 1$s %d", i));
		assert(!faker.animalType().empty, format("zu_za 1$s %d", i));
		assert(!faker.appAuthor().empty, format("zu_za 1$s %d", i));
		assert(!faker.appName().empty, format("zu_za 1$s %d", i));
		assert(!faker.appVersion().empty, format("zu_za 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("zu_za 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("zu_za 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("zu_za 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("zu_za 1$s %d", i));
		assert(!faker.colorHuman().empty, format("zu_za 1$s %d", i));
		assert(!faker.colorSpace().empty, format("zu_za 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("zu_za 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyBs().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyName().empty, format("zu_za 1$s %d", i));
		assert(!faker.companyNoun().empty, format("zu_za 1$s %d", i));
		assert(!faker.companySuffix().empty, format("zu_za 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("zu_za 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("zu_za 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("zu_za 1$s %d", i));
		assert(!faker.databaseType().empty, format("zu_za 1$s %d", i));
		assert(!faker.dateMonth().empty, format("zu_za 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeAccount().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeBIC().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeMask().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("zu_za 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("zu_za 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("zu_za 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("zu_za 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("zu_za 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("zu_za 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("zu_za 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("zu_za 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("zu_za 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("zu_za 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetColor().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetPassword().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetUrl().empty, format("zu_za 1$s %d", i));
		assert(!faker.internetUserName().empty, format("zu_za 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("zu_za 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("zu_za 1$s %d", i));
		assert(!faker.loremSentance().empty, format("zu_za 1$s %d", i));
		assert(!faker.loremSentances().empty, format("zu_za 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("zu_za 1$s %d", i));
		assert(!faker.loremText().empty, format("zu_za 1$s %d", i));
		assert(!faker.loremWords().empty, format("zu_za 1$s %d", i));
		assert(!faker.musicGenre().empty, format("zu_za 1$s %d", i));
		assert(!faker.musicSongName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameGender().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameLastName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameName().empty, format("zu_za 1$s %d", i));
		assert(!faker.namePrefix().empty, format("zu_za 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("zu_za 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("zu_za 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("zu_za 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("zu_za 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("zu_za 1$s %d", i));
		assert(!faker.teamCreature().empty, format("zu_za 1$s %d", i));
		assert(!faker.teamName().empty, format("zu_za 1$s %d", i));
		assert(!faker.vehicle().empty, format("zu_za 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("zu_za 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("zu_za 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("zu_za 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("zu_za 1$s %d", i));
		assert(!faker.vehicleType().empty, format("zu_za 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("zu_za 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("zu_za 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("zu_za 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("zu_za 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("zu_za 1$s %d", i));
		assert(!faker.wordNoun().empty, format("zu_za 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("zu_za 1$s %d", i));
		assert(!faker.wordVerb().empty, format("zu_za 1$s %d", i));

	}
}

unittest {
	import faked.base;
    auto faker = new Faker(54);
	for(int i = 0; i < 30; ++i) {
		assert(!faker.addressBuildingNumber().empty, format("en 1$s %d", i));
		assert(!faker.addressCity().empty, format("en 1$s %d", i));
		assert(!faker.addressCityName().empty, format("en 1$s %d", i));
		assert(!faker.addressCityPrefix().empty, format("en 1$s %d", i));
		assert(!faker.addressCitySuffix().empty, format("en 1$s %d", i));
		assert(!faker.addressCountry().empty, format("en 1$s %d", i));
		assert(!faker.addressCountryCode().empty, format("en 1$s %d", i));
		assert(!faker.addressCountryCodeAlpha3().empty, format("en 1$s %d", i));
		assert(!faker.addressCounty().empty, format("en 1$s %d", i));
		assert(!faker.addressDefaultCountry().empty, format("en 1$s %d", i));
		assert(!faker.addressDirection().empty, format("en 1$s %d", i));
		assert(!faker.addressDirectionAbbr().empty, format("en 1$s %d", i));
		assert(!faker.addressLatitude().empty, format("en 1$s %d", i));
		assert(!faker.addressLongitude().empty, format("en 1$s %d", i));
		assert(!faker.addressPostcode().empty, format("en 1$s %d", i));
		assert(!faker.addressSecondaryAddress().empty, format("en 1$s %d", i));
		assert(!faker.addressState().empty, format("en 1$s %d", i));
		assert(!faker.addressStateAbbr().empty, format("en 1$s %d", i));
		assert(!faker.addressStreet().empty, format("en 1$s %d", i));
		assert(!faker.addressStreetAddress().empty, format("en 1$s %d", i));
		assert(!faker.addressStreetSuffix().empty, format("en 1$s %d", i));
		assert(!faker.addressTimeZone().empty, format("en 1$s %d", i));
		assert(!faker.animalBear().empty, format("en 1$s %d", i));
		assert(!faker.animalBird().empty, format("en 1$s %d", i));
		assert(!faker.animalCat().empty, format("en 1$s %d", i));
		assert(!faker.animalCetacean().empty, format("en 1$s %d", i));
		assert(!faker.animalCow().empty, format("en 1$s %d", i));
		assert(!faker.animalCrocodilia().empty, format("en 1$s %d", i));
		assert(!faker.animalDog().empty, format("en 1$s %d", i));
		assert(!faker.animalFish().empty, format("en 1$s %d", i));
		assert(!faker.animalHorse().empty, format("en 1$s %d", i));
		assert(!faker.animalInsect().empty, format("en 1$s %d", i));
		assert(!faker.animalLion().empty, format("en 1$s %d", i));
		assert(!faker.animalRabbit().empty, format("en 1$s %d", i));
		assert(!faker.animalRodent().empty, format("en 1$s %d", i));
		assert(!faker.animalSnake().empty, format("en 1$s %d", i));
		assert(!faker.animalType().empty, format("en 1$s %d", i));
		assert(!faker.appAuthor().empty, format("en 1$s %d", i));
		assert(!faker.appName().empty, format("en 1$s %d", i));
		assert(!faker.appVersion().empty, format("en 1$s %d", i));
		assert(!faker.businessCreditCardExpiryDates().empty, format("en 1$s %d", i));
		assert(!faker.businessCreditCardNumbers().empty, format("en 1$s %d", i));
		assert(!faker.businessCreditCardTypes().empty, format("en 1$s %d", i));
		assert(!faker.cellPhoneFormats().empty, format("en 1$s %d", i));
		assert(!faker.colorHuman().empty, format("en 1$s %d", i));
		assert(!faker.colorSpace().empty, format("en 1$s %d", i));
		assert(!faker.commerceDepartment().empty, format("en 1$s %d", i));
		assert(!faker.commerceProductDescription().empty, format("en 1$s %d", i));
		assert(!faker.companyAdjective().empty, format("en 1$s %d", i));
		assert(!faker.companyBs().empty, format("en 1$s %d", i));
		assert(!faker.companyBsAdjective().empty, format("en 1$s %d", i));
		assert(!faker.companyBsNoun().empty, format("en 1$s %d", i));
		assert(!faker.companyBsVerb().empty, format("en 1$s %d", i));
		assert(!faker.companyCatchPhrase().empty, format("en 1$s %d", i));
		assert(!faker.companyDescriptor().empty, format("en 1$s %d", i));
		assert(!faker.companyName().empty, format("en 1$s %d", i));
		assert(!faker.companyNoun().empty, format("en 1$s %d", i));
		assert(!faker.companySuffix().empty, format("en 1$s %d", i));
		assert(!faker.databaseCollation().empty, format("en 1$s %d", i));
		assert(!faker.databaseColumn().empty, format("en 1$s %d", i));
		assert(!faker.databaseEngine().empty, format("en 1$s %d", i));
		assert(!faker.databaseType().empty, format("en 1$s %d", i));
		assert(!faker.dateMonth().empty, format("en 1$s %d", i));
		assert(!faker.dateWeekday().empty, format("en 1$s %d", i));
		assert(!faker.financeAccount().empty, format("en 1$s %d", i));
		assert(!faker.financeAccountType().empty, format("en 1$s %d", i));
		assert(!faker.financeBIC().empty, format("en 1$s %d", i));
		assert(!faker.financeBitcoinAddress().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCard().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardAmericanExpress().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardCVV().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardDinersClub().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardDiscover().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardInstapayment().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardJcb().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardMastercard().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardSolo().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardSwitch().empty, format("en 1$s %d", i));
		assert(!faker.financeCreditCardVisa().empty, format("en 1$s %d", i));
		assert(!faker.financeCurrency().empty, format("en 1$s %d", i));
		assert(!faker.financeIBAN().empty, format("en 1$s %d", i));
		assert(!faker.financeMask().empty, format("en 1$s %d", i));
		assert(!faker.financeRoutingNumber().empty, format("en 1$s %d", i));
		assert(!faker.financeTransactionType().empty, format("en 1$s %d", i));
		assert(!faker.hackerAbbreviation().empty, format("en 1$s %d", i));
		assert(!faker.hackerAdjective().empty, format("en 1$s %d", i));
		assert(!faker.hackerIngverb().empty, format("en 1$s %d", i));
		assert(!faker.hackerNoun().empty, format("en 1$s %d", i));
		assert(!faker.hackerPhrase().empty, format("en 1$s %d", i));
		assert(!faker.hackerVerb().empty, format("en 1$s %d", i));
		assert(!faker.helperAlpha().empty, format("en 1$s %d", i));
		assert(!faker.helperAlphaNum().empty, format("en 1$s %d", i));
		assert(!faker.helperHexaDecimal().empty, format("en 1$s %d", i));
		assert(!faker.internetAvatarUri().empty, format("en 1$s %d", i));
		assert(!faker.internetColor().empty, format("en 1$s %d", i));
		assert(!faker.internetDomainName().empty, format("en 1$s %d", i));
		assert(!faker.internetDomainSuffix().empty, format("en 1$s %d", i));
		assert(!faker.internetDomainWord().empty, format("en 1$s %d", i));
		assert(!faker.internetEmoji().empty, format("en 1$s %d", i));
		assert(!faker.internetExampleEmail().empty, format("en 1$s %d", i));
		assert(!faker.internetFreeEmail().empty, format("en 1$s %d", i));
		assert(!faker.internetHttpStatusCode().empty, format("en 1$s %d", i));
		assert(!faker.internetIPv4().empty, format("en 1$s %d", i));
		assert(!faker.internetIPv6().empty, format("en 1$s %d", i));
		assert(!faker.internetPassword().empty, format("en 1$s %d", i));
		assert(!faker.internetProtocol().empty, format("en 1$s %d", i));
		assert(!faker.internetUrl().empty, format("en 1$s %d", i));
		assert(!faker.internetUserName().empty, format("en 1$s %d", i));
		assert(!faker.loremParagraph().empty, format("en 1$s %d", i));
		assert(!faker.loremParagraphs().empty, format("en 1$s %d", i));
		assert(!faker.loremSentance().empty, format("en 1$s %d", i));
		assert(!faker.loremSentances().empty, format("en 1$s %d", i));
		assert(!faker.loremSupplemental().empty, format("en 1$s %d", i));
		assert(!faker.loremText().empty, format("en 1$s %d", i));
		assert(!faker.loremWords().empty, format("en 1$s %d", i));
		assert(!faker.musicGenre().empty, format("en 1$s %d", i));
		assert(!faker.musicSongName().empty, format("en 1$s %d", i));
		assert(!faker.nameBinaryGender().empty, format("en 1$s %d", i));
		assert(!faker.nameFemaleFirstName().empty, format("en 1$s %d", i));
		assert(!faker.nameFemaleMiddleName().empty, format("en 1$s %d", i));
		assert(!faker.nameFirstName().empty, format("en 1$s %d", i));
		assert(!faker.nameGender().empty, format("en 1$s %d", i));
		assert(!faker.nameLastName().empty, format("en 1$s %d", i));
		assert(!faker.nameMaleFirstName().empty, format("en 1$s %d", i));
		assert(!faker.nameMaleMiddleName().empty, format("en 1$s %d", i));
		assert(!faker.nameMiddleName().empty, format("en 1$s %d", i));
		assert(!faker.nameName().empty, format("en 1$s %d", i));
		assert(!faker.namePrefix().empty, format("en 1$s %d", i));
		assert(!faker.nameSuffix().empty, format("en 1$s %d", i));
		assert(!faker.phoneNumber().empty, format("en 1$s %d", i));
		assert(!faker.phoneNumberFormats().empty, format("en 1$s %d", i));
		assert(!faker.scienceChemicalelement().empty, format("en 1$s %d", i));
		assert(!faker.scienceUnit().empty, format("en 1$s %d", i));
		assert(!faker.teamCreature().empty, format("en 1$s %d", i));
		assert(!faker.teamName().empty, format("en 1$s %d", i));
		assert(!faker.vehicle().empty, format("en 1$s %d", i));
		assert(!faker.vehicleBicycleType().empty, format("en 1$s %d", i));
		assert(!faker.vehicleFuel().empty, format("en 1$s %d", i));
		assert(!faker.vehicleManufacturer().empty, format("en 1$s %d", i));
		assert(!faker.vehicleModel().empty, format("en 1$s %d", i));
		assert(!faker.vehicleType().empty, format("en 1$s %d", i));
		assert(!faker.vehicleVin().empty, format("en 1$s %d", i));
		assert(!faker.wordAdjective().empty, format("en 1$s %d", i));
		assert(!faker.wordAdverb().empty, format("en 1$s %d", i));
		assert(!faker.wordConjunction().empty, format("en 1$s %d", i));
		assert(!faker.wordInterjection().empty, format("en 1$s %d", i));
		assert(!faker.wordNoun().empty, format("en 1$s %d", i));
		assert(!faker.wordPreposition().empty, format("en 1$s %d", i));
		assert(!faker.wordVerb().empty, format("en 1$s %d", i));

	}
}

